
ultra_wifi_check.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009610  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  080097b0  080097b0  0000a7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fac  08009fac  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009fac  08009fac  0000afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fb4  08009fb4  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb4  08009fb4  0000afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fb8  08009fb8  0000afb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009fbc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b40  200001d8  0800a194  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d18  0800a194  0000bd18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e431  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228e  00000000  00000000  00019639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aba  00000000  00000000  0001c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d1  00000000  00000000  0001d142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4e8  00000000  00000000  00034a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009061c  00000000  00000000  00043efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b4  00000000  00000000  000d455c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d9610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009798 	.word	0x08009798

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009798 	.word	0x08009798

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	807b      	strh	r3, [r7, #2]
    *length = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001068:	2100      	movs	r1, #0
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f004 ff92 	bl	8005f94 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001070:	f240 4202 	movw	r2, #1026	@ 0x402
 8001074:	2100      	movs	r1, #0
 8001076:	4826      	ldr	r0, [pc, #152]	@ (8001110 <esp_at_command+0xc0>)
 8001078:	f004 ff8c 	bl	8005f94 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff f90f 	bl	80002a0 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	4822      	ldr	r0, [pc, #136]	@ (8001114 <esp_at_command+0xc4>)
 800108c:	f002 fece 	bl	8003e2c <HAL_UART_Transmit>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d032      	beq.n	80010fc <esp_at_command+0xac>
        return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e035      	b.n	8001108 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <esp_at_command+0xc0>)
 800109e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80010a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010a6:	d302      	bcc.n	80010ae <esp_at_command+0x5e>
            return -2;
 80010a8:	f06f 0301 	mvn.w	r3, #1
 80010ac:	e02c      	b.n	8001108 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80010ae:	491a      	ldr	r1, [pc, #104]	@ (8001118 <esp_at_command+0xc8>)
 80010b0:	4817      	ldr	r0, [pc, #92]	@ (8001110 <esp_at_command+0xc0>)
 80010b2:	f004 fff3 	bl	800609c <strstr>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <esp_at_command+0x72>
            return -3;
 80010bc:	f06f 0302 	mvn.w	r3, #2
 80010c0:	e022      	b.n	8001108 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80010c2:	4916      	ldr	r1, [pc, #88]	@ (800111c <esp_at_command+0xcc>)
 80010c4:	4812      	ldr	r0, [pc, #72]	@ (8001110 <esp_at_command+0xc0>)
 80010c6:	f004 ffe9 	bl	800609c <strstr>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <esp_at_command+0xc0>)
 80010d2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80010d6:	461a      	mov	r2, r3
 80010d8:	490d      	ldr	r1, [pc, #52]	@ (8001110 <esp_at_command+0xc0>)
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f005 f873 	bl	80061c6 <memcpy>
            *length = cb_data.length;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <esp_at_command+0xc0>)
 80010e2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
            return 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e00c      	b.n	8001108 <esp_at_command+0xb8>
        }
        time_out -= 10;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	3b0a      	subs	r3, #10
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 f98a 	bl	8002410 <HAL_Delay>
    while(time_out > 0)
 80010fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dccb      	bgt.n	800109c <esp_at_command+0x4c>
    }
    return -4;
 8001104:	f06f 0303 	mvn.w	r3, #3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000063c 	.word	0x2000063c
 8001114:	20000b1c 	.word	0x20000b1c
 8001118:	080097b0 	.word	0x080097b0
 800111c:	080097b8 	.word	0x080097b8

08001120 <esp_reset>:

static int esp_reset(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800112a:	1dba      	adds	r2, r7, #6
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	4909      	ldr	r1, [pc, #36]	@ (8001158 <esp_reset+0x38>)
 8001132:	480a      	ldr	r0, [pc, #40]	@ (800115c <esp_reset+0x3c>)
 8001134:	f7ff ff8c 	bl	8001050 <esp_at_command>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <esp_reset+0x24>
    {
    	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e004      	b.n	800114e <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001144:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001148:	f001 f962 	bl	8002410 <HAL_Delay>
    return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000204 	.word	0x20000204
 800115c:	080097bc 	.word	0x080097bc

08001160 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 800116e:	f107 020a 	add.w	r2, r7, #10
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	492d      	ldr	r1, [pc, #180]	@ (800122c <request_ip_addr+0xcc>)
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <request_ip_addr+0xd0>)
 800117a:	f7ff ff69 	bl	8001050 <esp_at_command>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001184:	482b      	ldr	r0, [pc, #172]	@ (8001234 <request_ip_addr+0xd4>)
 8001186:	f004 fe03 	bl	8005d90 <puts>
 800118a:	e049      	b.n	8001220 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 800118c:	492a      	ldr	r1, [pc, #168]	@ (8001238 <request_ip_addr+0xd8>)
 800118e:	4827      	ldr	r0, [pc, #156]	@ (800122c <request_ip_addr+0xcc>)
 8001190:	f004 ff28 	bl	8005fe4 <strtok>
 8001194:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03e      	beq.n	800121a <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e009      	b.n	80011b6 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <request_ip_addr+0xcc>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fd92 	bl	8005cd4 <putchar>
            for(int i = 0 ; i < length ; i++)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	3301      	adds	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	461a      	mov	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4293      	cmp	r3, r2
 80011be:	dbf0      	blt.n	80011a2 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80011c0:	e02b      	b.n	800121a <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80011c2:	491e      	ldr	r1, [pc, #120]	@ (800123c <request_ip_addr+0xdc>)
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f004 ff69 	bl	800609c <strstr>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01f      	beq.n	8001210 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80011d0:	491b      	ldr	r1, [pc, #108]	@ (8001240 <request_ip_addr+0xe0>)
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f004 ff06 	bl	8005fe4 <strtok>
                ip = strtok(NULL, "\"");
 80011d8:	4919      	ldr	r1, [pc, #100]	@ (8001240 <request_ip_addr+0xe0>)
 80011da:	2000      	movs	r0, #0
 80011dc:	f004 ff02 	bl	8005fe4 <strtok>
 80011e0:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80011e2:	4918      	ldr	r1, [pc, #96]	@ (8001244 <request_ip_addr+0xe4>)
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7fe fffb 	bl	80001e0 <strcmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00f      	beq.n	8001210 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80011f0:	2210      	movs	r2, #16
 80011f2:	2100      	movs	r1, #0
 80011f4:	4814      	ldr	r0, [pc, #80]	@ (8001248 <request_ip_addr+0xe8>)
 80011f6:	f004 fecd 	bl	8005f94 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7ff f850 	bl	80002a0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <request_ip_addr+0xe8>)
 8001208:	f004 ffdd 	bl	80061c6 <memcpy>
                    return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e009      	b.n	8001224 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001210:	4909      	ldr	r1, [pc, #36]	@ (8001238 <request_ip_addr+0xd8>)
 8001212:	2000      	movs	r0, #0
 8001214:	f004 fee6 	bl	8005fe4 <strtok>
 8001218:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1d0      	bne.n	80011c2 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000204 	.word	0x20000204
 8001230:	08009804 	.word	0x08009804
 8001234:	08009810 	.word	0x08009810
 8001238:	080097f8 	.word	0x080097f8
 800123c:	08009830 	.word	0x08009830
 8001240:	08009800 	.word	0x08009800
 8001244:	080097c8 	.word	0x080097c8
 8001248:	200001f4 	.word	0x200001f4

0800124c <esp_client_conn>:
int esp_client_conn()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b092      	sub	sp, #72	@ 0x48
 8001250:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2240      	movs	r2, #64	@ 0x40
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f004 fe9a 	bl	8005f94 <memset>
  uint16_t length = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001264:	f107 0008 	add.w	r0, r7, #8
 8001268:	f241 3388 	movw	r3, #5000	@ 0x1388
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <esp_client_conn+0x48>)
 800126e:	490a      	ldr	r1, [pc, #40]	@ (8001298 <esp_client_conn+0x4c>)
 8001270:	f004 fd96 	bl	8005da0 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001274:	1dba      	adds	r2, r7, #6
 8001276:	f107 0008 	add.w	r0, r7, #8
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	4907      	ldr	r1, [pc, #28]	@ (800129c <esp_client_conn+0x50>)
 8001280:	f7ff fee6 	bl	8001050 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001284:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <esp_client_conn+0x54>)
 8001286:	f000 f909 	bl	800149c <esp_send_data>
	return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3748      	adds	r7, #72	@ 0x48
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	0800983c 	.word	0x0800983c
 8001298:	0800984c 	.word	0x0800984c
 800129c:	20000204 	.word	0x20000204
 80012a0:	08009868 	.word	0x08009868

080012a4 <esp_get_status>:
int esp_get_status()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80012ae:	1dba      	adds	r2, r7, #6
 80012b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b4:	4909      	ldr	r1, [pc, #36]	@ (80012dc <esp_get_status+0x38>)
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <esp_get_status+0x3c>)
 80012b8:	f7ff feca 	bl	8001050 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80012bc:	4909      	ldr	r1, [pc, #36]	@ (80012e4 <esp_get_status+0x40>)
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <esp_get_status+0x38>)
 80012c0:	f004 feec 	bl	800609c <strstr>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <esp_get_status+0x2a>
    {
    	return 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e001      	b.n	80012d2 <esp_get_status+0x2e>
    }
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000204 	.word	0x20000204
 80012e0:	08009878 	.word	0x08009878
 80012e4:	08009888 	.word	0x08009888

080012e8 <drv_esp_init>:
int drv_esp_init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 80012ec:	2210      	movs	r2, #16
 80012ee:	2100      	movs	r1, #0
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <drv_esp_init+0x24>)
 80012f2:	f004 fe4f 	bl	8005f94 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 80012f6:	2201      	movs	r2, #1
 80012f8:	4905      	ldr	r1, [pc, #20]	@ (8001310 <drv_esp_init+0x28>)
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <drv_esp_init+0x2c>)
 80012fc:	f002 fe21 	bl	8003f42 <HAL_UART_Receive_IT>

    return esp_reset();
 8001300:	f7ff ff0e 	bl	8001120 <esp_reset>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001f4 	.word	0x200001f4
 8001310:	2000063b 	.word	0x2000063b
 8001314:	20000b1c 	.word	0x20000b1c

08001318 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2240      	movs	r2, #64	@ 0x40
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fe2f 	bl	8005f94 <memset>
  if(ssid == NULL || passwd == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <ap_conn_func+0x2a>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001342:	4817      	ldr	r0, [pc, #92]	@ (80013a0 <ap_conn_func+0x88>)
 8001344:	f004 fd24 	bl	8005d90 <puts>
 8001348:	e026      	b.n	8001398 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800134a:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	4914      	ldr	r1, [pc, #80]	@ (80013a4 <ap_conn_func+0x8c>)
 8001354:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <ap_conn_func+0x90>)
 8001356:	f7ff fe7b 	bl	8001050 <esp_at_command>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001360:	4812      	ldr	r0, [pc, #72]	@ (80013ac <ap_conn_func+0x94>)
 8001362:	f004 fd15 	bl	8005d90 <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8001366:	f107 000c 	add.w	r0, r7, #12
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4910      	ldr	r1, [pc, #64]	@ (80013b0 <ap_conn_func+0x98>)
 8001370:	f004 fd16 	bl	8005da0 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001374:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001378:	f107 000c 	add.w	r0, r7, #12
 800137c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001380:	4908      	ldr	r1, [pc, #32]	@ (80013a4 <ap_conn_func+0x8c>)
 8001382:	f7ff fe65 	bl	8001050 <esp_at_command>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4619      	mov	r1, r3
 8001392:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <ap_conn_func+0x9c>)
 8001394:	f004 fc8c 	bl	8005cb0 <iprintf>
}
 8001398:	3750      	adds	r7, #80	@ 0x50
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	080098ec 	.word	0x080098ec
 80013a4:	20000204 	.word	0x20000204
 80013a8:	08009918 	.word	0x08009918
 80013ac:	08009928 	.word	0x08009928
 80013b0:	0800993c 	.word	0x0800993c
 80013b4:	08009954 	.word	0x08009954

080013b8 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_UART_RxCpltCallback+0x9c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d117      	bne.n	80013fa <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013cc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d4:	d20c      	bcs.n	80013f0 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013d8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	b291      	uxth	r1, r2
 80013e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013e2:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_UART_RxCpltCallback+0xa4>)
 80013ea:	7819      	ldrb	r1, [r3, #0]
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013ee:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	491a      	ldr	r1, [pc, #104]	@ (800145c <HAL_UART_RxCpltCallback+0xa4>)
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f002 fda4 	bl	8003f42 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <HAL_UART_RxCpltCallback+0xa8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d122      	bne.n	800144a <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_UART_RxCpltCallback+0xb0>)
 800140a:	7811      	ldrb	r1, [r2, #0]
 800140c:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_UART_RxCpltCallback+0xb4>)
 800140e:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a15      	ldr	r2, [pc, #84]	@ (800146c <HAL_UART_RxCpltCallback+0xb4>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b0d      	cmp	r3, #13
 800141c:	d10b      	bne.n	8001436 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_UART_RxCpltCallback+0xb4>)
 8001424:	2100      	movs	r1, #0
 8001426:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_UART_RxCpltCallback+0xb8>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
    		i = 0;
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e004      	b.n	8001440 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 800143e:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001440:	2201      	movs	r2, #1
 8001442:	4909      	ldr	r1, [pc, #36]	@ (8001468 <HAL_UART_RxCpltCallback+0xb0>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f002 fd7c 	bl	8003f42 <HAL_UART_Receive_IT>
    }
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40011400 	.word	0x40011400
 8001458:	2000063c 	.word	0x2000063c
 800145c:	2000063b 	.word	0x2000063b
 8001460:	40004400 	.word	0x40004400
 8001464:	20000a40 	.word	0x20000a40
 8001468:	2000063a 	.word	0x2000063a
 800146c:	20000608 	.word	0x20000608
 8001470:	20000604 	.word	0x20000604

08001474 <AiotClient_Init>:


void AiotClient_Init()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8001478:	4906      	ldr	r1, [pc, #24]	@ (8001494 <AiotClient_Init+0x20>)
 800147a:	4807      	ldr	r0, [pc, #28]	@ (8001498 <AiotClient_Init+0x24>)
 800147c:	f7ff ff4c 	bl	8001318 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fe6d 	bl	8001160 <request_ip_addr>
	esp_client_conn();
 8001486:	f7ff fee1 	bl	800124c <esp_client_conn>
	esp_get_status();
 800148a:	f7ff ff0b 	bl	80012a4 <esp_get_status>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	080099b4 	.word	0x080099b4
 8001498:	080099c0 	.word	0x080099c0

0800149c <esp_send_data>:

void esp_send_data(char *data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2240      	movs	r2, #64	@ 0x40
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fd71 	bl	8005f94 <memset>
	uint16_t length = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7fe fef2 	bl	80002a0 <strlen>
 80014bc:	4602      	mov	r2, r0
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	490e      	ldr	r1, [pc, #56]	@ (80014fc <esp_send_data+0x60>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 fc6b 	bl	8005da0 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 80014ca:	f107 020e 	add.w	r2, r7, #14
 80014ce:	f107 0010 	add.w	r0, r7, #16
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	490a      	ldr	r1, [pc, #40]	@ (8001500 <esp_send_data+0x64>)
 80014d8:	f7ff fdba 	bl	8001050 <esp_at_command>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d107      	bne.n	80014f2 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80014e2:	f107 020e 	add.w	r2, r7, #14
 80014e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ea:	4905      	ldr	r1, [pc, #20]	@ (8001500 <esp_send_data+0x64>)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdaf 	bl	8001050 <esp_at_command>
	}
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	@ 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	080099c8 	.word	0x080099c8
 8001500:	20000204 	.word	0x20000204

08001504 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001508:	2201      	movs	r2, #1
 800150a:	4903      	ldr	r1, [pc, #12]	@ (8001518 <drv_uart_init+0x14>)
 800150c:	4803      	ldr	r0, [pc, #12]	@ (800151c <drv_uart_init+0x18>)
 800150e:	f002 fd18 	bl	8003f42 <HAL_UART_Receive_IT>
    return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000063a 	.word	0x2000063a
 800151c:	20000ad4 	.word	0x20000ad4

08001520 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001528:	1d39      	adds	r1, r7, #4
 800152a:	230a      	movs	r3, #10
 800152c:	2201      	movs	r2, #1
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <__io_putchar+0x2c>)
 8001530:	f002 fc7c 	bl	8003e2c <HAL_UART_Transmit>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <__io_putchar+0x1e>
        return ch;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <__io_putchar+0x22>
    return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000ad4 	.word	0x20000ad4

08001550 <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(int us)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	int t1 = htim5.Instance->CNT;
 8001558:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <microDelay+0x30>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	60fb      	str	r3, [r7, #12]
	while((htim5.Instance->CNT - t1) < us);
 8001560:	bf00      	nop
 8001562:	4b07      	ldr	r3, [pc, #28]	@ (8001580 <microDelay+0x30>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1ad2      	subs	r2, r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3f7      	bcc.n	8001562 <microDelay+0x12>
}
 8001572:	bf00      	nop
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000a8c 	.word	0x20000a8c

08001584 <signalTrig>:

void signalTrig()//초음파 Trig
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin,1);
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <signalTrig+0x24>)
 800158e:	f001 faa3 	bl	8002ad8 <HAL_GPIO_WritePin>
	 microDelay(10);
 8001592:	200a      	movs	r0, #10
 8001594:	f7ff ffdc 	bl	8001550 <microDelay>
	 HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin,0);
 8001598:	2200      	movs	r2, #0
 800159a:	2120      	movs	r1, #32
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <signalTrig+0x24>)
 800159e:	f001 fa9b 	bl	8002ad8 <HAL_GPIO_WritePin>

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020400 	.word	0x40020400
 80015ac:	00000000 	.word	0x00000000

080015b0 <getDist>:
double getDist() //초음파측정 함수
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
	signalTrig();
 80015b6:	f7ff ffe5 	bl	8001584 <signalTrig>
	uint32_t timeout = 100000;
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <getDist+0xd0>)
 80015bc:	617b      	str	r3, [r7, #20]
	while (!HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) && timeout--);
 80015be:	bf00      	nop
 80015c0:	2110      	movs	r1, #16
 80015c2:	4830      	ldr	r0, [pc, #192]	@ (8001684 <getDist+0xd4>)
 80015c4:	f001 fa70 	bl	8002aa8 <HAL_GPIO_ReadPin>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d104      	bne.n	80015d8 <getDist+0x28>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1e5a      	subs	r2, r3, #1
 80015d2:	617a      	str	r2, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f3      	bne.n	80015c0 <getDist+0x10>
	if (timeout == 0) {
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <getDist+0x3c>
		printf("Echo rising edge timeout!\r\n");
 80015de:	482a      	ldr	r0, [pc, #168]	@ (8001688 <getDist+0xd8>)
 80015e0:	f004 fbd6 	bl	8005d90 <puts>
		return -1;
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	4b28      	ldr	r3, [pc, #160]	@ (800168c <getDist+0xdc>)
 80015ea:	e03a      	b.n	8001662 <getDist+0xb2>
	}
	int t1 = htim5.Instance->CNT;
 80015ec:	4b28      	ldr	r3, [pc, #160]	@ (8001690 <getDist+0xe0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	613b      	str	r3, [r7, #16]

	timeout = 100000;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <getDist+0xd0>)
 80015f6:	617b      	str	r3, [r7, #20]
	while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) && timeout--);
 80015f8:	bf00      	nop
 80015fa:	2110      	movs	r1, #16
 80015fc:	4821      	ldr	r0, [pc, #132]	@ (8001684 <getDist+0xd4>)
 80015fe:	f001 fa53 	bl	8002aa8 <HAL_GPIO_ReadPin>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d004      	beq.n	8001612 <getDist+0x62>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1e5a      	subs	r2, r3, #1
 800160c:	617a      	str	r2, [r7, #20]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f3      	bne.n	80015fa <getDist+0x4a>

	if (timeout == 0) {
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <getDist+0x76>
		printf("Echo falling edge timeout!\r\n");
 8001618:	481e      	ldr	r0, [pc, #120]	@ (8001694 <getDist+0xe4>)
 800161a:	f004 fbb9 	bl	8005d90 <puts>
		return -1;
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <getDist+0xdc>)
 8001624:	e01d      	b.n	8001662 <getDist+0xb2>
	}
	int t2 = htim5.Instance->CNT;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <getDist+0xe0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	60fb      	str	r3, [r7, #12]

	double dist = (t2 - t1) * 0.017; // 초음파 속도: 340 m/s -> 0.017 cm/us
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff8d 	bl	8000554 <__aeabi_i2d>
 800163a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001678 <getDist+0xc8>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe fff2 	bl	8000628 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	e9c7 2300 	strd	r2, r3, [r7]
	microDelay(60000); // 최소 60ms 간격 필요
 800164c:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8001650:	f7ff ff7e 	bl	8001550 <microDelay>
	printf("Distance: %.2f cm\r\n", dist);
 8001654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001658:	480f      	ldr	r0, [pc, #60]	@ (8001698 <getDist+0xe8>)
 800165a:	f004 fb29 	bl	8005cb0 <iprintf>
	return dist;
 800165e:	e9d7 2300 	ldrd	r2, r3, [r7]

}
 8001662:	ec43 2b17 	vmov	d7, r2, r3
 8001666:	eeb0 0a47 	vmov.f32	s0, s14
 800166a:	eef0 0a67 	vmov.f32	s1, s15
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	b020c49c 	.word	0xb020c49c
 800167c:	3f916872 	.word	0x3f916872
 8001680:	000186a0 	.word	0x000186a0
 8001684:	40020400 	.word	0x40020400
 8001688:	080099d8 	.word	0x080099d8
 800168c:	bff00000 	.word	0xbff00000
 8001690:	20000a8c 	.word	0x20000a8c
 8001694:	080099f4 	.word	0x080099f4
 8001698:	08009a10 	.word	0x08009a10

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b092      	sub	sp, #72	@ 0x48
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	647b      	str	r3, [r7, #68]	@ 0x44
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f000 fe41 	bl	800232c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f913 	bl	80018d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f000 fa6b 	bl	8001b88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fa15 	bl	8001ae0 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80016b6:	f000 f9c5 	bl	8001a44 <MX_TIM5_Init>
  MX_TIM3_Init();
 80016ba:	f000 f975 	bl	80019a8 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80016be:	f000 fa39 	bl	8001b34 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim5);
 80016c2:	486c      	ldr	r0, [pc, #432]	@ (8001874 <main+0x1d8>)
 80016c4:	f001 ff24 	bl	8003510 <HAL_TIM_Base_Start>
  printf("Start main() - ultra-wifi\r\n");
 80016c8:	486b      	ldr	r0, [pc, #428]	@ (8001878 <main+0x1dc>)
 80016ca:	f004 fb61 	bl	8005d90 <puts>
  ret |= drv_uart_init();
 80016ce:	f7ff ff19 	bl	8001504 <drv_uart_init>
 80016d2:	4602      	mov	r2, r0
 80016d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016d6:	4313      	orrs	r3, r2
 80016d8:	647b      	str	r3, [r7, #68]	@ 0x44
  ret |= drv_esp_init();
 80016da:	f7ff fe05 	bl	80012e8 <drv_esp_init>
 80016de:	4602      	mov	r2, r0
 80016e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e2:	4313      	orrs	r3, r2
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
  if(ret != 0)
 80016e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <main+0x5a>
  {
	  printf("Esp response error\r\n");
 80016ec:	4863      	ldr	r0, [pc, #396]	@ (800187c <main+0x1e0>)
 80016ee:	f004 fb4f 	bl	8005d90 <puts>
	  Error_Handler();
 80016f2:	f000 fbd1 	bl	8001e98 <Error_Handler>
  }

  AiotClient_Init();
 80016f6:	f7ff febd 	bl	8001474 <AiotClient_Init>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80016fa:	4861      	ldr	r0, [pc, #388]	@ (8001880 <main+0x1e4>)
 80016fc:	f001 ff62 	bl	80035c4 <HAL_TIM_Base_Start_IT>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <main+0x6e>
  {
	  Error_Handler();
 8001706:	f000 fbc7 	bl	8001e98 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if (strstr((char*) cb_data.buf, "+IPD")
 800170a:	495e      	ldr	r1, [pc, #376]	@ (8001884 <main+0x1e8>)
 800170c:	485e      	ldr	r0, [pc, #376]	@ (8001888 <main+0x1ec>)
 800170e:	f004 fcc5 	bl	800609c <strstr>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01d      	beq.n	8001754 <main+0xb8>
				&& cb_data.buf[cb_data.length - 1] == '\n') {
 8001718:	4b5b      	ldr	r3, [pc, #364]	@ (8001888 <main+0x1ec>)
 800171a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800171e:	3b01      	subs	r3, #1
 8001720:	4a59      	ldr	r2, [pc, #356]	@ (8001888 <main+0x1ec>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	2b0a      	cmp	r3, #10
 8001726:	d115      	bne.n	8001754 <main+0xb8>
			//?  ?  ?   ??  \r\n+IPD,15:[KSH_LIN]HELLO\n
			strcpy(strBuff, strchr((char*) cb_data.buf, '['));
 8001728:	215b      	movs	r1, #91	@ 0x5b
 800172a:	4857      	ldr	r0, [pc, #348]	@ (8001888 <main+0x1ec>)
 800172c:	f004 fc3a 	bl	8005fa4 <strchr>
 8001730:	4603      	mov	r3, r0
 8001732:	4619      	mov	r1, r3
 8001734:	4855      	ldr	r0, [pc, #340]	@ (800188c <main+0x1f0>)
 8001736:	f004 fd3e 	bl	80061b6 <strcpy>
			memset(cb_data.buf, 0x0, sizeof(cb_data.buf));
 800173a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173e:	2100      	movs	r1, #0
 8001740:	4851      	ldr	r0, [pc, #324]	@ (8001888 <main+0x1ec>)
 8001742:	f004 fc27 	bl	8005f94 <memset>
			cb_data.length = 0;
 8001746:	4b50      	ldr	r3, [pc, #320]	@ (8001888 <main+0x1ec>)
 8001748:	2200      	movs	r2, #0
 800174a:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 800174e:	484f      	ldr	r0, [pc, #316]	@ (800188c <main+0x1f0>)
 8001750:	f000 faac 	bl	8001cac <esp_event>
		}
		if (rx2Flag) {
 8001754:	4b4e      	ldr	r3, [pc, #312]	@ (8001890 <main+0x1f4>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <main+0xd0>
			printf("recv2 : %s\r\n", rx2Data);
 800175e:	494d      	ldr	r1, [pc, #308]	@ (8001894 <main+0x1f8>)
 8001760:	484d      	ldr	r0, [pc, #308]	@ (8001898 <main+0x1fc>)
 8001762:	f004 faa5 	bl	8005cb0 <iprintf>
			rx2Flag = 0;
 8001766:	4b4a      	ldr	r3, [pc, #296]	@ (8001890 <main+0x1f4>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
		}

		if (tim3Flag1Sec)   //1초에 한번
 800176c:	4b4b      	ldr	r3, [pc, #300]	@ (800189c <main+0x200>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ca      	beq.n	800170a <main+0x6e>
		{
			tim3Flag1Sec = 0;
 8001774:	4b49      	ldr	r3, [pc, #292]	@ (800189c <main+0x200>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]

			if (!(tim3Sec % 10)) //10초에 한번
 800177a:	4b49      	ldr	r3, [pc, #292]	@ (80018a0 <main+0x204>)
 800177c:	6819      	ldr	r1, [r3, #0]
 800177e:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <main+0x208>)
 8001780:	fba3 2301 	umull	r2, r3, r3, r1
 8001784:	08da      	lsrs	r2, r3, #3
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	1aca      	subs	r2, r1, r3
 8001790:	2a00      	cmp	r2, #0
 8001792:	d109      	bne.n	80017a8 <main+0x10c>
			{
				if (esp_get_status() != 0) {
 8001794:	f7ff fd86 	bl	80012a4 <esp_get_status>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <main+0x10c>
					printf("server connecting ...\r\n");
 800179e:	4842      	ldr	r0, [pc, #264]	@ (80018a8 <main+0x20c>)
 80017a0:	f004 faf6 	bl	8005d90 <puts>
					esp_client_conn();
 80017a4:	f7ff fd52 	bl	800124c <esp_client_conn>
				}
			}
			if (LimitFlag) {
 80017a8:	4b40      	ldr	r3, [pc, #256]	@ (80018ac <main+0x210>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d04b      	beq.n	8001848 <main+0x1ac>
				double dist = getDist();
 80017b0:	f7ff fefe 	bl	80015b0 <getDist>
 80017b4:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
				if (dist <= LIMIT) {
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b3c      	ldr	r3, [pc, #240]	@ (80018b0 <main+0x214>)
 80017be:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80017c2:	f7ff f9ad 	bl	8000b20 <__aeabi_dcmple>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d02e      	beq.n	800182a <main+0x18e>
					if (!warningSent) {
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <main+0x218>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10c      	bne.n	80017ee <main+0x152>
						char sendBuf[50];
						sprintf(sendBuf, "[%s]WARNING\n", "SQL");
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4a38      	ldr	r2, [pc, #224]	@ (80018b8 <main+0x21c>)
 80017d8:	4938      	ldr	r1, [pc, #224]	@ (80018bc <main+0x220>)
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 fae0 	bl	8005da0 <siprintf>
						esp_send_data(sendBuf);
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe5a 	bl	800149c <esp_send_data>
						warningSent = 1;
 80017e8:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <main+0x218>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
					}
						cnt += 1;
 80017ee:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <main+0x224>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3301      	adds	r3, #1
 80017f4:	4a32      	ldr	r2, [pc, #200]	@ (80018c0 <main+0x224>)
 80017f6:	6013      	str	r3, [r2, #0]
						//printf("cnt : %d\r\n", cnt);
						printf("WARNING\r\n");
 80017f8:	4832      	ldr	r0, [pc, #200]	@ (80018c4 <main+0x228>)
 80017fa:	f004 fac9 	bl	8005d90 <puts>
						if (!(tim3Sec % 1)) { //2초간 토글
 80017fe:	4b28      	ldr	r3, [pc, #160]	@ (80018a0 <main+0x204>)
 8001800:	681b      	ldr	r3, [r3, #0]
							HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001806:	4830      	ldr	r0, [pc, #192]	@ (80018c8 <main+0x22c>)
 8001808:	f001 f97f 	bl	8002b0a <HAL_GPIO_TogglePin>
						}

						if (cnt >= 10) {
 800180c:	4b2c      	ldr	r3, [pc, #176]	@ (80018c0 <main+0x224>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b09      	cmp	r3, #9
 8001812:	f77f af7a 	ble.w	800170a <main+0x6e>
							HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800181c:	482a      	ldr	r0, [pc, #168]	@ (80018c8 <main+0x22c>)
 800181e:	f001 f95b 	bl	8002ad8 <HAL_GPIO_WritePin>
									GPIO_PIN_RESET);
							LimitFlag = 0;  // 입실 상태 종료
 8001822:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <main+0x210>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	e76f      	b.n	800170a <main+0x6e>
						}
					} else {
						cnt = 0;
 800182a:	4b25      	ldr	r3, [pc, #148]	@ (80018c0 <main+0x224>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin,
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001836:	4824      	ldr	r0, [pc, #144]	@ (80018c8 <main+0x22c>)
 8001838:	f001 f94e 	bl	8002ad8 <HAL_GPIO_WritePin>
								GPIO_PIN_RESET);
						if (!LimitFlag) {
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <main+0x210>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f af62 	bne.w	800170a <main+0x6e>
							break;
 8001846:	e010      	b.n	800186a <main+0x1ce>
						}
					}
				}
			 else if (dist < 0) {
 8001848:	4b20      	ldr	r3, [pc, #128]	@ (80018cc <main+0x230>)
 800184a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	f7ff f959 	bl	8000b0c <__aeabi_dcmplt>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <main+0x1cc>
				printf("거리 측정 실패\r\n");
 8001860:	481b      	ldr	r0, [pc, #108]	@ (80018d0 <main+0x234>)
 8001862:	f004 fa95 	bl	8005d90 <puts>
				continue;
 8001866:	bf00      	nop
		if (strstr((char*) cb_data.buf, "+IPD")
 8001868:	e74f      	b.n	800170a <main+0x6e>
 800186a:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 800186c:	4618      	mov	r0, r3
 800186e:	3748      	adds	r7, #72	@ 0x48
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000a8c 	.word	0x20000a8c
 8001878:	08009a24 	.word	0x08009a24
 800187c:	08009a40 	.word	0x08009a40
 8001880:	20000a44 	.word	0x20000a44
 8001884:	08009a54 	.word	0x08009a54
 8001888:	2000063c 	.word	0x2000063c
 800188c:	20000b80 	.word	0x20000b80
 8001890:	20000604 	.word	0x20000604
 8001894:	20000608 	.word	0x20000608
 8001898:	08009a5c 	.word	0x08009a5c
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000b64 	.word	0x20000b64
 80018a4:	cccccccd 	.word	0xcccccccd
 80018a8:	08009a6c 	.word	0x08009a6c
 80018ac:	20000b74 	.word	0x20000b74
 80018b0:	40100000 	.word	0x40100000
 80018b4:	20000b70 	.word	0x20000b70
 80018b8:	08009a84 	.word	0x08009a84
 80018bc:	08009a88 	.word	0x08009a88
 80018c0:	20000b78 	.word	0x20000b78
 80018c4:	08009a98 	.word	0x08009a98
 80018c8:	40020400 	.word	0x40020400
 80018cc:	20000b68 	.word	0x20000b68
 80018d0:	08009aa4 	.word	0x08009aa4

080018d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2230      	movs	r2, #48	@ 0x30
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f004 fb56 	bl	8005f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <SystemClock_Config+0xcc>)
 8001902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001906:	6413      	str	r3, [r2, #64]	@ 0x40
 8001908:	4b25      	ldr	r3, [pc, #148]	@ (80019a0 <SystemClock_Config+0xcc>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <SystemClock_Config+0xd0>)
 800191e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <SystemClock_Config+0xd0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001930:	2302      	movs	r3, #2
 8001932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001934:	2301      	movs	r3, #1
 8001936:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001938:	2310      	movs	r3, #16
 800193a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193c:	2302      	movs	r3, #2
 800193e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001940:	2300      	movs	r3, #0
 8001942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001944:	2310      	movs	r3, #16
 8001946:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001948:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800194c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800194e:	2304      	movs	r3, #4
 8001950:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001952:	2304      	movs	r3, #4
 8001954:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	4618      	mov	r0, r3
 800195c:	f001 f8f0 	bl	8002b40 <HAL_RCC_OscConfig>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001966:	f000 fa97 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800196a:	230f      	movs	r3, #15
 800196c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800196e:	2302      	movs	r3, #2
 8001970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001980:	f107 030c 	add.w	r3, r7, #12
 8001984:	2102      	movs	r1, #2
 8001986:	4618      	mov	r0, r3
 8001988:	f001 fb52 	bl	8003030 <HAL_RCC_ClockConfig>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001992:	f000 fa81 	bl	8001e98 <Error_Handler>
  }
}
 8001996:	bf00      	nop
 8001998:	3750      	adds	r7, #80	@ 0x50
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40007000 	.word	0x40007000

080019a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001a40 <MX_TIM3_Init+0x98>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019cc:	2253      	movs	r2, #83	@ 0x53
 80019ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019e6:	2280      	movs	r2, #128	@ 0x80
 80019e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ea:	4814      	ldr	r0, [pc, #80]	@ (8001a3c <MX_TIM3_Init+0x94>)
 80019ec:	f001 fd40 	bl	8003470 <HAL_TIM_Base_Init>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80019f6:	f000 fa4f 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <MX_TIM3_Init+0x94>)
 8001a08:	f001 ff2e 	bl	8003868 <HAL_TIM_ConfigClockSource>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a12:	f000 fa41 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <MX_TIM3_Init+0x94>)
 8001a24:	f002 f930 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a2e:	f000 fa33 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000a44 	.word	0x20000a44
 8001a40:	40000400 	.word	0x40000400

08001a44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <MX_TIM5_Init+0x98>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a68:	2253      	movs	r2, #83	@ 0x53
 8001a6a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a72:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a86:	4814      	ldr	r0, [pc, #80]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001a88:	f001 fcf2 	bl	8003470 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001a92:	f000 fa01 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001aa4:	f001 fee0 	bl	8003868 <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001aae:	f000 f9f3 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <MX_TIM5_Init+0x94>)
 8001ac0:	f002 f8e2 	bl	8003c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001aca:	f000 f9e5 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000a8c 	.word	0x20000a8c
 8001adc:	40000c00 	.word	0x40000c00

08001ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae4:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <MX_USART2_UART_Init+0x50>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0b      	ldr	r3, [pc, #44]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b04:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b06:	220c      	movs	r2, #12
 8001b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b08      	ldr	r3, [pc, #32]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b16:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_USART2_UART_Init+0x4c>)
 8001b18:	f002 f938 	bl	8003d8c <HAL_UART_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b22:	f000 f9b9 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000ad4 	.word	0x20000ad4
 8001b30:	40004400 	.word	0x40004400

08001b34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <MX_USART6_UART_Init+0x50>)
 8001b3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b40:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001b44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b58:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_USART6_UART_Init+0x4c>)
 8001b6c:	f002 f90e 	bl	8003d8c <HAL_UART_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b76:	f000 f98f 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000b1c 	.word	0x20000b1c
 8001b84:	40011400 	.word	0x40011400

08001b88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
 8001b9c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b3b      	ldr	r3, [pc, #236]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0304 	and.w	r3, r3, #4
 8001bb6:	613b      	str	r3, [r7, #16]
 8001bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	4b37      	ldr	r3, [pc, #220]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a36      	ldr	r2, [pc, #216]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b34      	ldr	r3, [pc, #208]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b30      	ldr	r3, [pc, #192]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a2f      	ldr	r2, [pc, #188]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a28      	ldr	r2, [pc, #160]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001bfc:	f043 0302 	orr.w	r3, r3, #2
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b26      	ldr	r3, [pc, #152]	@ (8001c9c <MX_GPIO_Init+0x114>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2120      	movs	r1, #32
 8001c12:	4823      	ldr	r0, [pc, #140]	@ (8001ca0 <MX_GPIO_Init+0x118>)
 8001c14:	f000 ff60 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001c1e:	4821      	ldr	r0, [pc, #132]	@ (8001ca4 <MX_GPIO_Init+0x11c>)
 8001c20:	f000 ff5a 	bl	8002ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c2a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4619      	mov	r1, r3
 8001c3a:	481b      	ldr	r0, [pc, #108]	@ (8001ca8 <MX_GPIO_Init+0x120>)
 8001c3c:	f000 fdb0 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c40:	2320      	movs	r3, #32
 8001c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	4619      	mov	r1, r3
 8001c56:	4812      	ldr	r0, [pc, #72]	@ (8001ca0 <MX_GPIO_Init+0x118>)
 8001c58:	f000 fda2 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin Trig_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|Trig_Pin;
 8001c5c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001c60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	4619      	mov	r1, r3
 8001c74:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <MX_GPIO_Init+0x11c>)
 8001c76:	f000 fd93 	bl	80027a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001c7a:	2310      	movs	r3, #16
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <MX_GPIO_Init+0x11c>)
 8001c8e:	f000 fd87 	bl	80027a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	@ 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40020400 	.word	0x40020400
 8001ca8:	40020800 	.word	0x40020800

08001cac <esp_event>:

/* USER CODE BEGIN 4 */
void esp_event(char * recvBuf)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b09c      	sub	sp, #112	@ 0x70
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	6078      	str	r0, [r7, #4]
  int i=0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001cb8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 f95f 	bl	8005f94 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe fae2 	bl	80002a0 <strlen>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	4a48      	ldr	r2, [pc, #288]	@ (8001e04 <esp_event+0x158>)
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4847      	ldr	r0, [pc, #284]	@ (8001e08 <esp_event+0x15c>)
 8001cea:	f003 ffe1 	bl	8005cb0 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8001cee:	4947      	ldr	r1, [pc, #284]	@ (8001e0c <esp_event+0x160>)
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f004 f977 	bl	8005fe4 <strtok>
 8001cf6:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001cf8:	e011      	b.n	8001d1e <esp_event+0x72>
  {
    pArray[i] = pToken;
 8001cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	3368      	adds	r3, #104	@ 0x68
 8001d00:	443b      	add	r3, r7
 8001d02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d04:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001d08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	dc08      	bgt.n	8001d26 <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8001d14:	493d      	ldr	r1, [pc, #244]	@ (8001e0c <esp_event+0x160>)
 8001d16:	2000      	movs	r0, #0
 8001d18:	f004 f964 	bl	8005fe4 <strtok>
 8001d1c:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001d1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ea      	bne.n	8001cfa <esp_event+0x4e>
 8001d24:	e000      	b.n	8001d28 <esp_event+0x7c>
      break;
 8001d26:	bf00      	nop
  }
	if (!strcmp(pArray[1], "AUTHER")) //인증모듈로부터 인증 수신
 8001d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d2a:	4939      	ldr	r1, [pc, #228]	@ (8001e10 <esp_event+0x164>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fa57 	bl	80001e0 <strcmp>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d149      	bne.n	8001dcc <esp_event+0x120>
	{
		NowCheck = !NowCheck;
 8001d38:	4b36      	ldr	r3, [pc, #216]	@ (8001e14 <esp_event+0x168>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b32      	ldr	r3, [pc, #200]	@ (8001e14 <esp_event+0x168>)
 8001d4a:	601a      	str	r2, [r3, #0]
		printf("%d\r\n",NowCheck);
 8001d4c:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <esp_event+0x168>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4831      	ldr	r0, [pc, #196]	@ (8001e18 <esp_event+0x16c>)
 8001d54:	f003 ffac 	bl	8005cb0 <iprintf>
		if (NowCheck == 1) //입실
 8001d58:	4b2e      	ldr	r3, [pc, #184]	@ (8001e14 <esp_event+0x168>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d118      	bne.n	8001d92 <esp_event+0xe6>
				{
			sprintf(sendBuf, "[%s]%s@%d\n", "SQL", "CHECK", NowCheck);
 8001d60:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <esp_event+0x168>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f107 000c 	add.w	r0, r7, #12
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e1c <esp_event+0x170>)
 8001d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e20 <esp_event+0x174>)
 8001d6e:	492d      	ldr	r1, [pc, #180]	@ (8001e24 <esp_event+0x178>)
 8001d70:	f004 f816 	bl	8005da0 <siprintf>
			esp_send_data(sendBuf);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fb8f 	bl	800149c <esp_send_data>
			LimitFlag = 1; //초음파ON
 8001d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e28 <esp_event+0x17c>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
			cnt = 0;
 8001d84:	4b29      	ldr	r3, [pc, #164]	@ (8001e2c <esp_event+0x180>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
			warningSent = 0;
 8001d8a:	4b29      	ldr	r3, [pc, #164]	@ (8001e30 <esp_event+0x184>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e034      	b.n	8001dfc <esp_event+0x150>
		} else if (NowCheck == 0) //퇴실
 8001d92:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <esp_event+0x168>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d130      	bne.n	8001dfc <esp_event+0x150>
				{
			sprintf(sendBuf, "[%s]%s@%d\n", "SQL", "CHECK", NowCheck);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <esp_event+0x168>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f107 000c 	add.w	r0, r7, #12
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <esp_event+0x170>)
 8001da6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <esp_event+0x174>)
 8001da8:	491e      	ldr	r1, [pc, #120]	@ (8001e24 <esp_event+0x178>)
 8001daa:	f003 fff9 	bl	8005da0 <siprintf>
			esp_send_data(sendBuf);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fb72 	bl	800149c <esp_send_data>
			LimitFlag = 0; //초음파OFF
 8001db8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <esp_event+0x17c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET); //부저OFF
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001dc4:	481b      	ldr	r0, [pc, #108]	@ (8001e34 <esp_event+0x188>)
 8001dc6:	f000 fe87 	bl	8002ad8 <HAL_GPIO_WritePin>
 8001dca:	e017      	b.n	8001dfc <esp_event+0x150>

		}
		//sprintf(sendBuf, "[%s]%s@%s\n","SQL", pArray[1], pArray[2]);
		//esp_send_data(sendBuf);
	}
  else if(!strncmp(pArray[1]," New conn",8))
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001dce:	2208      	movs	r2, #8
 8001dd0:	4919      	ldr	r1, [pc, #100]	@ (8001e38 <esp_event+0x18c>)
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f8f3 	bl	8005fbe <strncmp>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <esp_event+0x14a>
  {
//	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
     return;
  }
  else if(!strncmp(pArray[1]," Already log",8))
 8001dde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001de0:	2208      	movs	r2, #8
 8001de2:	4916      	ldr	r1, [pc, #88]	@ (8001e3c <esp_event+0x190>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 f8ea 	bl	8005fbe <strncmp>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d104      	bne.n	8001dfa <esp_event+0x14e>
  {
// 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
	  esp_client_conn();
 8001df0:	f7ff fa2c 	bl	800124c <esp_client_conn>
      return;
 8001df4:	e002      	b.n	8001dfc <esp_event+0x150>
     return;
 8001df6:	bf00      	nop
 8001df8:	e000      	b.n	8001dfc <esp_event+0x150>
  }
  else
      return;
 8001dfa:	bf00      	nop
}
 8001dfc:	3768      	adds	r7, #104	@ 0x68
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000b80 	.word	0x20000b80
 8001e08:	08009abc 	.word	0x08009abc
 8001e0c:	08009ad0 	.word	0x08009ad0
 8001e10:	08009ad4 	.word	0x08009ad4
 8001e14:	20000b7c 	.word	0x20000b7c
 8001e18:	08009adc 	.word	0x08009adc
 8001e1c:	08009ae4 	.word	0x08009ae4
 8001e20:	08009a84 	.word	0x08009a84
 8001e24:	08009aec 	.word	0x08009aec
 8001e28:	20000b74 	.word	0x20000b74
 8001e2c:	20000b78 	.word	0x20000b78
 8001e30:	20000b70 	.word	0x20000b70
 8001e34:	40020400 	.word	0x40020400
 8001e38:	08009af8 	.word	0x08009af8
 8001e3c:	08009b04 	.word	0x08009b04

08001e40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	if (htim->Instance == TIM3) {
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d114      	bne.n	8001e7c <HAL_TIM_PeriodElapsedCallback+0x3c>
		tim3Cnt++; //1ms
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a0c      	ldr	r2, [pc, #48]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e5a:	6013      	str	r3, [r2, #0]
		if (tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e64:	db0a      	blt.n	8001e7c <HAL_TIM_PeriodElapsedCallback+0x3c>
				{
			tim3Flag1Sec = 1; //1sec
 8001e66:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
			tim3Sec++;
 8001e6c:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e74:	6013      	str	r3, [r2, #0]
			tim3Cnt = 0;
 8001e76:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	20000bc0 	.word	0x20000bc0
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000b64 	.word	0x20000b64

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <Error_Handler+0x8>

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ee2:	2007      	movs	r0, #7
 8001ee4:	f000 fb88 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <HAL_TIM_Base_MspInit+0x70>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d116      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a16      	ldr	r2, [pc, #88]	@ (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	201d      	movs	r0, #29
 8001f28:	f000 fb71 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f2c:	201d      	movs	r0, #29
 8001f2e:	f000 fb8a 	bl	8002646 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f32:	e012      	b.n	8001f5a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0c      	ldr	r2, [pc, #48]	@ (8001f6c <HAL_TIM_Base_MspInit+0x78>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d10d      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b09      	ldr	r3, [pc, #36]	@ (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f48:	f043 0308 	orr.w	r3, r3, #8
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_TIM_Base_MspInit+0x74>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40000400 	.word	0x40000400
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40000c00 	.word	0x40000c00

08001f70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08c      	sub	sp, #48	@ 0x30
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002078 <HAL_UART_MspInit+0x108>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d134      	bne.n	8001ffc <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	4b39      	ldr	r3, [pc, #228]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a38      	ldr	r2, [pc, #224]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b36      	ldr	r3, [pc, #216]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	4b32      	ldr	r3, [pc, #200]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a31      	ldr	r2, [pc, #196]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	617b      	str	r3, [r7, #20]
 8001fc8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fca:	230c      	movs	r3, #12
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4826      	ldr	r0, [pc, #152]	@ (8002080 <HAL_UART_MspInit+0x110>)
 8001fe6:	f000 fbdb 	bl	80027a0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2026      	movs	r0, #38	@ 0x26
 8001ff0:	f000 fb0d 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ff4:	2026      	movs	r0, #38	@ 0x26
 8001ff6:	f000 fb26 	bl	8002646 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ffa:	e038      	b.n	800206e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a20      	ldr	r2, [pc, #128]	@ (8002084 <HAL_UART_MspInit+0x114>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d133      	bne.n	800206e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <HAL_UART_MspInit+0x10c>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	4a1b      	ldr	r2, [pc, #108]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	6453      	str	r3, [r2, #68]	@ 0x44
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	4a14      	ldr	r2, [pc, #80]	@ (800207c <HAL_UART_MspInit+0x10c>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6313      	str	r3, [r2, #48]	@ 0x30
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_UART_MspInit+0x10c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800203e:	23c0      	movs	r3, #192	@ 0xc0
 8002040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800204e:	2308      	movs	r3, #8
 8002050:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	4619      	mov	r1, r3
 8002058:	480b      	ldr	r0, [pc, #44]	@ (8002088 <HAL_UART_MspInit+0x118>)
 800205a:	f000 fba1 	bl	80027a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2047      	movs	r0, #71	@ 0x47
 8002064:	f000 fad3 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002068:	2047      	movs	r0, #71	@ 0x47
 800206a:	f000 faec 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	@ 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40004400 	.word	0x40004400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000
 8002084:	40011400 	.word	0x40011400
 8002088:	40020800 	.word	0x40020800

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <NMI_Handler+0x4>

08002094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e2:	f000 f975 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <TIM3_IRQHandler+0x10>)
 80020f2:	f001 fac9 	bl	8003688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000a44 	.word	0x20000a44

08002100 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <USART2_IRQHandler+0x10>)
 8002106:	f001 ff41 	bl	8003f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000ad4 	.word	0x20000ad4

08002114 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <USART6_IRQHandler+0x10>)
 800211a:	f001 ff37 	bl	8003f8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000b1c 	.word	0x20000b1c

08002128 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return 1;
 800212c:	2301      	movs	r3, #1
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_kill>:

int _kill(int pid, int sig)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002142:	f004 f80b 	bl	800615c <__errno>
 8002146:	4603      	mov	r3, r0
 8002148:	2216      	movs	r2, #22
 800214a:	601a      	str	r2, [r3, #0]
  return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <_exit>:

void _exit (int status)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ffe7 	bl	8002138 <_kill>
  while (1) {}    /* Make sure we hang here */
 800216a:	bf00      	nop
 800216c:	e7fd      	b.n	800216a <_exit+0x12>

0800216e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b086      	sub	sp, #24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e00a      	b.n	8002196 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002180:	f3af 8000 	nop.w
 8002184:	4601      	mov	r1, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	60ba      	str	r2, [r7, #8]
 800218c:	b2ca      	uxtb	r2, r1
 800218e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	dbf0      	blt.n	8002180 <_read+0x12>
  }

  return len;
 800219e:	687b      	ldr	r3, [r7, #4]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	e009      	b.n	80021ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f9ac 	bl	8001520 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	dbf1      	blt.n	80021ba <_write+0x12>
  }
  return len;
 80021d6:	687b      	ldr	r3, [r7, #4]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_close>:

int _close(int file)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002208:	605a      	str	r2, [r3, #4]
  return 0;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_isatty>:

int _isatty(int file)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002220:	2301      	movs	r3, #1
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002250:	4a14      	ldr	r2, [pc, #80]	@ (80022a4 <_sbrk+0x5c>)
 8002252:	4b15      	ldr	r3, [pc, #84]	@ (80022a8 <_sbrk+0x60>)
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800225c:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <_sbrk+0x64>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <_sbrk+0x64>)
 8002266:	4a12      	ldr	r2, [pc, #72]	@ (80022b0 <_sbrk+0x68>)
 8002268:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800226a:	4b10      	ldr	r3, [pc, #64]	@ (80022ac <_sbrk+0x64>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	429a      	cmp	r2, r3
 8002276:	d207      	bcs.n	8002288 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002278:	f003 ff70 	bl	800615c <__errno>
 800227c:	4603      	mov	r3, r0
 800227e:	220c      	movs	r2, #12
 8002280:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295
 8002286:	e009      	b.n	800229c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <_sbrk+0x64>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228e:	4b07      	ldr	r3, [pc, #28]	@ (80022ac <_sbrk+0x64>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <_sbrk+0x64>)
 8002298:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800229a:	68fb      	ldr	r3, [r7, #12]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20020000 	.word	0x20020000
 80022a8:	00000400 	.word	0x00000400
 80022ac:	20000bc4 	.word	0x20000bc4
 80022b0:	20000d18 	.word	0x20000d18

080022b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b8:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <SystemInit+0x20>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	4a05      	ldr	r2, [pc, #20]	@ (80022d4 <SystemInit+0x20>)
 80022c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002310 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022dc:	f7ff ffea 	bl	80022b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022e0:	480c      	ldr	r0, [pc, #48]	@ (8002314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022e2:	490d      	ldr	r1, [pc, #52]	@ (8002318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e4:	4a0d      	ldr	r2, [pc, #52]	@ (800231c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002306:	f003 ff2f 	bl	8006168 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230a:	f7ff f9c7 	bl	800169c <main>
  bx  lr    
 800230e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002310:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002318:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800231c:	08009fbc 	.word	0x08009fbc
  ldr r2, =_sbss
 8002320:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002324:	20000d18 	.word	0x20000d18

08002328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC_IRQHandler>
	...

0800232c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002330:	4b0e      	ldr	r3, [pc, #56]	@ (800236c <HAL_Init+0x40>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0d      	ldr	r2, [pc, #52]	@ (800236c <HAL_Init+0x40>)
 8002336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800233a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800233c:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <HAL_Init+0x40>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_Init+0x40>)
 8002342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002348:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_Init+0x40>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a07      	ldr	r2, [pc, #28]	@ (800236c <HAL_Init+0x40>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002354:	2003      	movs	r0, #3
 8002356:	f000 f94f 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800235a:	2000      	movs	r0, #0
 800235c:	f000 f808 	bl	8002370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002360:	f7ff fda0 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40023c00 	.word	0x40023c00

08002370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_InitTick+0x54>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b12      	ldr	r3, [pc, #72]	@ (80023c8 <HAL_InitTick+0x58>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f967 	bl	8002662 <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f000 f92f 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	@ (80023cc <HAL_InitTick+0x5c>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000004 	.word	0x20000004
 80023c8:	2000000c 	.word	0x2000000c
 80023cc:	20000008 	.word	0x20000008

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	@ (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	@ (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2000000c 	.word	0x2000000c
 80023f4:	20000bc8 	.word	0x20000bc8

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	@ (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000bc8 	.word	0x20000bc8

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000000c 	.word	0x2000000c

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	@ (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	@ (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	@ (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	@ (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002686:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff feb6 	bl	80023f8 <HAL_GetTick>
 800268c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d008      	beq.n	80026ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2280      	movs	r2, #128	@ 0x80
 800269e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e052      	b.n	8002752 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0216 	bic.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <HAL_DMA_Abort+0x62>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0208 	bic.w	r2, r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fc:	e013      	b.n	8002726 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fe:	f7ff fe7b 	bl	80023f8 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b05      	cmp	r3, #5
 800270a:	d90c      	bls.n	8002726 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2203      	movs	r2, #3
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e015      	b.n	8002752 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e4      	bne.n	80026fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002738:	223f      	movs	r2, #63	@ 0x3f
 800273a:	409a      	lsls	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d004      	beq.n	8002778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2280      	movs	r2, #128	@ 0x80
 8002772:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e00c      	b.n	8002792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2205      	movs	r2, #5
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	@ 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	e159      	b.n	8002a70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	f040 8148 	bne.w	8002a6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d005      	beq.n	80027f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d130      	bne.n	8002854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	69b9      	ldr	r1, [r7, #24]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a2 	beq.w	8002a6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b57      	ldr	r3, [pc, #348]	@ (8002a88 <HAL_GPIO_Init+0x2e8>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	4a56      	ldr	r2, [pc, #344]	@ (8002a88 <HAL_GPIO_Init+0x2e8>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002934:	6453      	str	r3, [r2, #68]	@ 0x44
 8002936:	4b54      	ldr	r3, [pc, #336]	@ (8002a88 <HAL_GPIO_Init+0x2e8>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002942:	4a52      	ldr	r2, [pc, #328]	@ (8002a8c <HAL_GPIO_Init+0x2ec>)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	089b      	lsrs	r3, r3, #2
 8002948:	3302      	adds	r3, #2
 800294a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	220f      	movs	r2, #15
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4013      	ands	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a49      	ldr	r2, [pc, #292]	@ (8002a90 <HAL_GPIO_Init+0x2f0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x202>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a48      	ldr	r2, [pc, #288]	@ (8002a94 <HAL_GPIO_Init+0x2f4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x1fe>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a47      	ldr	r2, [pc, #284]	@ (8002a98 <HAL_GPIO_Init+0x2f8>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x1fa>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a46      	ldr	r2, [pc, #280]	@ (8002a9c <HAL_GPIO_Init+0x2fc>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x1f6>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a45      	ldr	r2, [pc, #276]	@ (8002aa0 <HAL_GPIO_Init+0x300>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x1f2>
 800298e:	2304      	movs	r3, #4
 8002990:	e008      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 8002992:	2307      	movs	r3, #7
 8002994:	e006      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 8002996:	2303      	movs	r3, #3
 8002998:	e004      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 800299a:	2302      	movs	r3, #2
 800299c:	e002      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 800299e:	2301      	movs	r3, #1
 80029a0:	e000      	b.n	80029a4 <HAL_GPIO_Init+0x204>
 80029a2:	2300      	movs	r3, #0
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	f002 0203 	and.w	r2, r2, #3
 80029aa:	0092      	lsls	r2, r2, #2
 80029ac:	4093      	lsls	r3, r2
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b4:	4935      	ldr	r1, [pc, #212]	@ (8002a8c <HAL_GPIO_Init+0x2ec>)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	089b      	lsrs	r3, r3, #2
 80029ba:	3302      	adds	r3, #2
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029c2:	4b38      	ldr	r3, [pc, #224]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	43db      	mvns	r3, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4013      	ands	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e6:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ec:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	4013      	ands	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a10:	4a24      	ldr	r2, [pc, #144]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a40:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a64:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa4 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b0f      	cmp	r3, #15
 8002a74:	f67f aea2 	bls.w	80027bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3724      	adds	r7, #36	@ 0x24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e001      	b.n	8002aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	460b      	mov	r3, r1
 8002b14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b1c:	887a      	ldrh	r2, [r7, #2]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	041a      	lsls	r2, r3, #16
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	43d9      	mvns	r1, r3
 8002b28:	887b      	ldrh	r3, [r7, #2]
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	619a      	str	r2, [r3, #24]
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e267      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d075      	beq.n	8002c4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b5e:	4b88      	ldr	r3, [pc, #544]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d00c      	beq.n	8002b84 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b6a:	4b85      	ldr	r3, [pc, #532]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d112      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b76:	4b82      	ldr	r3, [pc, #520]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b82:	d10b      	bne.n	8002b9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	4b7e      	ldr	r3, [pc, #504]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d05b      	beq.n	8002c48 <HAL_RCC_OscConfig+0x108>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d157      	bne.n	8002c48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e242      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x74>
 8002ba6:	4b76      	ldr	r3, [pc, #472]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a75      	ldr	r2, [pc, #468]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	e01d      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x98>
 8002bbe:	4b70      	ldr	r3, [pc, #448]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a6f      	ldr	r2, [pc, #444]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	4b6d      	ldr	r3, [pc, #436]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6c      	ldr	r2, [pc, #432]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	6013      	str	r3, [r2, #0]
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0xb0>
 8002bd8:	4b69      	ldr	r3, [pc, #420]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a65      	ldr	r2, [pc, #404]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002bea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7ff fbfe 	bl	80023f8 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff fbfa 	bl	80023f8 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e207      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b5b      	ldr	r3, [pc, #364]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0xc0>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fbea 	bl	80023f8 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c28:	f7ff fbe6 	bl	80023f8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e1f3      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3a:	4b51      	ldr	r3, [pc, #324]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0xe8>
 8002c46:	e000      	b.n	8002c4a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d063      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c56:	4b4a      	ldr	r3, [pc, #296]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d11c      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c6e:	4b44      	ldr	r3, [pc, #272]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d116      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7a:	4b41      	ldr	r3, [pc, #260]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d001      	beq.n	8002c92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e1c7      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4937      	ldr	r1, [pc, #220]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	e03a      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d020      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb0:	4b34      	ldr	r3, [pc, #208]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fb9f 	bl	80023f8 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7ff fb9b 	bl	80023f8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e1a8      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f0      	beq.n	8002cbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cdc:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	4925      	ldr	r1, [pc, #148]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	4b24      	ldr	r3, [pc, #144]	@ (8002d84 <HAL_RCC_OscConfig+0x244>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7ff fb7e 	bl	80023f8 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d00:	f7ff fb7a 	bl	80023f8 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e187      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f0      	bne.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d036      	beq.n	8002d98 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <HAL_RCC_OscConfig+0x248>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7ff fb5e 	bl	80023f8 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d40:	f7ff fb5a 	bl	80023f8 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e167      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d52:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_OscConfig+0x240>)
 8002d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x200>
 8002d5e:	e01b      	b.n	8002d98 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d60:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_RCC_OscConfig+0x248>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d66:	f7ff fb47 	bl	80023f8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d6c:	e00e      	b.n	8002d8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d6e:	f7ff fb43 	bl	80023f8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d907      	bls.n	8002d8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e150      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	42470000 	.word	0x42470000
 8002d88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002d8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ea      	bne.n	8002d6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8097 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002daa:	4b81      	ldr	r3, [pc, #516]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	4b7d      	ldr	r3, [pc, #500]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	4a7c      	ldr	r2, [pc, #496]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc6:	4b7a      	ldr	r3, [pc, #488]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd6:	4b77      	ldr	r3, [pc, #476]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d118      	bne.n	8002e14 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de2:	4b74      	ldr	r3, [pc, #464]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a73      	ldr	r2, [pc, #460]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dee:	f7ff fb03 	bl	80023f8 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7ff faff 	bl	80023f8 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e10c      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b6a      	ldr	r3, [pc, #424]	@ (8002fb4 <HAL_RCC_OscConfig+0x474>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x2ea>
 8002e1c:	4b64      	ldr	r3, [pc, #400]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e20:	4a63      	ldr	r2, [pc, #396]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e28:	e01c      	b.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x30c>
 8002e32:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	4a5e      	ldr	r2, [pc, #376]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e3e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e42:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCC_OscConfig+0x324>
 8002e4c:	4b58      	ldr	r3, [pc, #352]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	4a57      	ldr	r2, [pc, #348]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e58:	4b55      	ldr	r3, [pc, #340]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5c:	4a54      	ldr	r2, [pc, #336]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	f023 0304 	bic.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6c:	f7ff fac4 	bl	80023f8 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e72:	e00a      	b.n	8002e8a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7ff fac0 	bl	80023f8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e0cb      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8a:	4b49      	ldr	r3, [pc, #292]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ee      	beq.n	8002e74 <HAL_RCC_OscConfig+0x334>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7ff faae 	bl	80023f8 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e9e:	e00a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea0:	f7ff faaa 	bl	80023f8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e0b5      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1ee      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ec2:	7dfb      	ldrb	r3, [r7, #23]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ecc:	4a38      	ldr	r2, [pc, #224]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ed2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 80a1 	beq.w	8003020 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ede:	4b34      	ldr	r3, [pc, #208]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d05c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d141      	bne.n	8002f76 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef2:	4b31      	ldr	r3, [pc, #196]	@ (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7ff fa7e 	bl	80023f8 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f00:	f7ff fa7a 	bl	80023f8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e087      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f12:	4b27      	ldr	r3, [pc, #156]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	019b      	lsls	r3, r3, #6
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	085b      	lsrs	r3, r3, #1
 8002f36:	3b01      	subs	r3, #1
 8002f38:	041b      	lsls	r3, r3, #16
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f40:	061b      	lsls	r3, r3, #24
 8002f42:	491b      	ldr	r1, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f48:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4e:	f7ff fa53 	bl	80023f8 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7ff fa4f 	bl	80023f8 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e05c      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0f0      	beq.n	8002f56 <HAL_RCC_OscConfig+0x416>
 8002f74:	e054      	b.n	8003020 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <HAL_RCC_OscConfig+0x478>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff fa3c 	bl	80023f8 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff fa38 	bl	80023f8 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e045      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCC_OscConfig+0x470>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x444>
 8002fa2:	e03d      	b.n	8003020 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e038      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800302c <HAL_RCC_OscConfig+0x4ec>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d028      	beq.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d121      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fec:	4013      	ands	r3, r2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ff2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	3b01      	subs	r3, #1
 8003006:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3718      	adds	r7, #24
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800

08003030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0cc      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b68      	ldr	r3, [pc, #416]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d90c      	bls.n	800306c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b65      	ldr	r3, [pc, #404]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b63      	ldr	r3, [pc, #396]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e0b8      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003084:	4b59      	ldr	r3, [pc, #356]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	4a58      	ldr	r2, [pc, #352]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800308a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800308e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800309c:	4b53      	ldr	r3, [pc, #332]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a52      	ldr	r2, [pc, #328]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b50      	ldr	r3, [pc, #320]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	494d      	ldr	r1, [pc, #308]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d044      	beq.n	8003150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d107      	bne.n	80030de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ce:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d119      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e07f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d107      	bne.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ee:	4b3f      	ldr	r3, [pc, #252]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e06f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030fe:	4b3b      	ldr	r3, [pc, #236]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e067      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800310e:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 0203 	bic.w	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4934      	ldr	r1, [pc, #208]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003120:	f7ff f96a 	bl	80023f8 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003126:	e00a      	b.n	800313e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003128:	f7ff f966 	bl	80023f8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e04f      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313e:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 020c 	and.w	r2, r3, #12
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	429a      	cmp	r2, r3
 800314e:	d1eb      	bne.n	8003128 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003150:	4b25      	ldr	r3, [pc, #148]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d20c      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315e:	4b22      	ldr	r3, [pc, #136]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003166:	4b20      	ldr	r3, [pc, #128]	@ (80031e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0307 	and.w	r3, r3, #7
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	429a      	cmp	r2, r3
 8003172:	d001      	beq.n	8003178 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e032      	b.n	80031de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003184:	4b19      	ldr	r3, [pc, #100]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4916      	ldr	r1, [pc, #88]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	4313      	orrs	r3, r2
 8003194:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d009      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031a2:	4b12      	ldr	r3, [pc, #72]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	490e      	ldr	r1, [pc, #56]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b6:	f000 f821 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	490a      	ldr	r1, [pc, #40]	@ (80031f0 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	5ccb      	ldrb	r3, [r1, r3]
 80031ca:	fa22 f303 	lsr.w	r3, r2, r3
 80031ce:	4a09      	ldr	r2, [pc, #36]	@ (80031f4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031d2:	4b09      	ldr	r3, [pc, #36]	@ (80031f8 <HAL_RCC_ClockConfig+0x1c8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f8ca 	bl	8002370 <HAL_InitTick>

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40023c00 	.word	0x40023c00
 80031ec:	40023800 	.word	0x40023800
 80031f0:	08009b14 	.word	0x08009b14
 80031f4:	20000004 	.word	0x20000004
 80031f8:	20000008 	.word	0x20000008

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b094      	sub	sp, #80	@ 0x50
 8003202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003214:	4b79      	ldr	r3, [pc, #484]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	2b08      	cmp	r3, #8
 800321e:	d00d      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x40>
 8003220:	2b08      	cmp	r3, #8
 8003222:	f200 80e1 	bhi.w	80033e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_RCC_GetSysClockFreq+0x34>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0x3a>
 800322e:	e0db      	b.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003230:	4b73      	ldr	r3, [pc, #460]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x204>)
 8003232:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003234:	e0db      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003236:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x208>)
 8003238:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800323a:	e0d8      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800323c:	4b6f      	ldr	r3, [pc, #444]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003244:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003246:	4b6d      	ldr	r3, [pc, #436]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d063      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b6a      	ldr	r3, [pc, #424]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	2200      	movs	r2, #0
 800325a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800325c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800325e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003264:	633b      	str	r3, [r7, #48]	@ 0x30
 8003266:	2300      	movs	r3, #0
 8003268:	637b      	str	r3, [r7, #52]	@ 0x34
 800326a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800326e:	4622      	mov	r2, r4
 8003270:	462b      	mov	r3, r5
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	0159      	lsls	r1, r3, #5
 800327c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003280:	0150      	lsls	r0, r2, #5
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4621      	mov	r1, r4
 8003288:	1a51      	subs	r1, r2, r1
 800328a:	6139      	str	r1, [r7, #16]
 800328c:	4629      	mov	r1, r5
 800328e:	eb63 0301 	sbc.w	r3, r3, r1
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a0:	4659      	mov	r1, fp
 80032a2:	018b      	lsls	r3, r1, #6
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032aa:	4651      	mov	r1, sl
 80032ac:	018a      	lsls	r2, r1, #6
 80032ae:	4651      	mov	r1, sl
 80032b0:	ebb2 0801 	subs.w	r8, r2, r1
 80032b4:	4659      	mov	r1, fp
 80032b6:	eb63 0901 	sbc.w	r9, r3, r1
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ce:	4690      	mov	r8, r2
 80032d0:	4699      	mov	r9, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	eb18 0303 	adds.w	r3, r8, r3
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	462b      	mov	r3, r5
 80032dc:	eb49 0303 	adc.w	r3, r9, r3
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	f04f 0200 	mov.w	r2, #0
 80032e6:	f04f 0300 	mov.w	r3, #0
 80032ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ee:	4629      	mov	r1, r5
 80032f0:	024b      	lsls	r3, r1, #9
 80032f2:	4621      	mov	r1, r4
 80032f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f8:	4621      	mov	r1, r4
 80032fa:	024a      	lsls	r2, r1, #9
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
 8003300:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003302:	2200      	movs	r2, #0
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800330c:	f7fd fcd4 	bl	8000cb8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003318:	e058      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b38      	ldr	r3, [pc, #224]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	2200      	movs	r2, #0
 8003322:	4618      	mov	r0, r3
 8003324:	4611      	mov	r1, r2
 8003326:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800332a:	623b      	str	r3, [r7, #32]
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003330:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	f04f 0000 	mov.w	r0, #0
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	0159      	lsls	r1, r3, #5
 8003342:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003346:	0150      	lsls	r0, r2, #5
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4641      	mov	r1, r8
 800334e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003352:	4649      	mov	r1, r9
 8003354:	eb63 0b01 	sbc.w	fp, r3, r1
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003364:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003368:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800336c:	ebb2 040a 	subs.w	r4, r2, sl
 8003370:	eb63 050b 	sbc.w	r5, r3, fp
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	00eb      	lsls	r3, r5, #3
 800337e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003382:	00e2      	lsls	r2, r4, #3
 8003384:	4614      	mov	r4, r2
 8003386:	461d      	mov	r5, r3
 8003388:	4643      	mov	r3, r8
 800338a:	18e3      	adds	r3, r4, r3
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	464b      	mov	r3, r9
 8003390:	eb45 0303 	adc.w	r3, r5, r3
 8003394:	607b      	str	r3, [r7, #4]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f04f 0300 	mov.w	r3, #0
 800339e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033a2:	4629      	mov	r1, r5
 80033a4:	028b      	lsls	r3, r1, #10
 80033a6:	4621      	mov	r1, r4
 80033a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033ac:	4621      	mov	r1, r4
 80033ae:	028a      	lsls	r2, r1, #10
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033b6:	2200      	movs	r2, #0
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	61fa      	str	r2, [r7, #28]
 80033bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033c0:	f7fd fc7a 	bl	8000cb8 <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x200>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x204>)
 80033ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3750      	adds	r7, #80	@ 0x50
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800
 8003400:	00f42400 	.word	0x00f42400
 8003404:	007a1200 	.word	0x007a1200

08003408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800340c:	4b03      	ldr	r3, [pc, #12]	@ (800341c <HAL_RCC_GetHCLKFreq+0x14>)
 800340e:	681b      	ldr	r3, [r3, #0]
}
 8003410:	4618      	mov	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003424:	f7ff fff0 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4903      	ldr	r1, [pc, #12]	@ (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40023800 	.word	0x40023800
 8003444:	08009b24 	.word	0x08009b24

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800344c:	f7ff ffdc 	bl	8003408 <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0b5b      	lsrs	r3, r3, #13
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4903      	ldr	r1, [pc, #12]	@ (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40023800 	.word	0x40023800
 800346c:	08009b24 	.word	0x08009b24

08003470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d106      	bne.n	800349c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7fe fd2c 	bl	8001ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f000 faca 	bl	8003a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e03c      	b.n	80035a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1e      	ldr	r2, [pc, #120]	@ (80035b0 <HAL_TIM_Base_Start+0xa0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d018      	beq.n	800356c <HAL_TIM_Base_Start+0x5c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003542:	d013      	beq.n	800356c <HAL_TIM_Base_Start+0x5c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1a      	ldr	r2, [pc, #104]	@ (80035b4 <HAL_TIM_Base_Start+0xa4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00e      	beq.n	800356c <HAL_TIM_Base_Start+0x5c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_TIM_Base_Start+0xa8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d009      	beq.n	800356c <HAL_TIM_Base_Start+0x5c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <HAL_TIM_Base_Start+0xac>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d004      	beq.n	800356c <HAL_TIM_Base_Start+0x5c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	@ (80035c0 <HAL_TIM_Base_Start+0xb0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d111      	bne.n	8003590 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b06      	cmp	r3, #6
 800357c:	d010      	beq.n	80035a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800358e:	e007      	b.n	80035a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010000 	.word	0x40010000
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800
 80035bc:	40000c00 	.word	0x40000c00
 80035c0:	40014000 	.word	0x40014000

080035c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d001      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e044      	b.n	8003666 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2202      	movs	r2, #2
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_TIM_Base_Start_IT+0xb0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003606:	d013      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1a      	ldr	r2, [pc, #104]	@ (8003678 <HAL_TIM_Base_Start_IT+0xb4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a19      	ldr	r2, [pc, #100]	@ (800367c <HAL_TIM_Base_Start_IT+0xb8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <HAL_TIM_Base_Start_IT+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x6c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a16      	ldr	r2, [pc, #88]	@ (8003684 <HAL_TIM_Base_Start_IT+0xc0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d111      	bne.n	8003654 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b06      	cmp	r3, #6
 8003640:	d010      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003652:	e007      	b.n	8003664 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40014000 	.word	0x40014000

08003688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d020      	beq.n	80036ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01b      	beq.n	80036ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f06f 0202 	mvn.w	r2, #2
 80036bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 f999 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 80036d8:	e005      	b.n	80036e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 f98b 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f99c 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d020      	beq.n	8003738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01b      	beq.n	8003738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0204 	mvn.w	r2, #4
 8003708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2202      	movs	r2, #2
 800370e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f973 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 8003724:	e005      	b.n	8003732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f965 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f976 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d020      	beq.n	8003784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d01b      	beq.n	8003784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f06f 0208 	mvn.w	r2, #8
 8003754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2204      	movs	r2, #4
 800375a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f94d 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 8003770:	e005      	b.n	800377e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f93f 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f950 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d020      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f06f 0210 	mvn.w	r2, #16
 80037a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2208      	movs	r2, #8
 80037a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f927 	bl	8003a0a <HAL_TIM_IC_CaptureCallback>
 80037bc:	e005      	b.n	80037ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f919 	bl	80039f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f92a 	bl	8003a1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00c      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0201 	mvn.w	r2, #1
 80037ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fe fb26 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00c      	beq.n	8003818 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fab0 	bl	8003d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00c      	beq.n	800383c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8fb 	bl	8003a32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00c      	beq.n	8003860 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d007      	beq.n	8003860 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0220 	mvn.w	r2, #32
 8003858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa82 	bl	8003d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_TIM_ConfigClockSource+0x1c>
 8003880:	2302      	movs	r3, #2
 8003882:	e0b4      	b.n	80039ee <HAL_TIM_ConfigClockSource+0x186>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038bc:	d03e      	beq.n	800393c <HAL_TIM_ConfigClockSource+0xd4>
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c2:	f200 8087 	bhi.w	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ca:	f000 8086 	beq.w	80039da <HAL_TIM_ConfigClockSource+0x172>
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d2:	d87f      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b70      	cmp	r3, #112	@ 0x70
 80038d6:	d01a      	beq.n	800390e <HAL_TIM_ConfigClockSource+0xa6>
 80038d8:	2b70      	cmp	r3, #112	@ 0x70
 80038da:	d87b      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b60      	cmp	r3, #96	@ 0x60
 80038de:	d050      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x11a>
 80038e0:	2b60      	cmp	r3, #96	@ 0x60
 80038e2:	d877      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b50      	cmp	r3, #80	@ 0x50
 80038e6:	d03c      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0xfa>
 80038e8:	2b50      	cmp	r3, #80	@ 0x50
 80038ea:	d873      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b40      	cmp	r3, #64	@ 0x40
 80038ee:	d058      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x13a>
 80038f0:	2b40      	cmp	r3, #64	@ 0x40
 80038f2:	d86f      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b30      	cmp	r3, #48	@ 0x30
 80038f6:	d064      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x15a>
 80038f8:	2b30      	cmp	r3, #48	@ 0x30
 80038fa:	d86b      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d060      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003900:	2b20      	cmp	r3, #32
 8003902:	d867      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d05c      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	2b10      	cmp	r3, #16
 800390a:	d05a      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x15a>
 800390c:	e062      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391e:	f000 f993 	bl	8003c48 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003930:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	609a      	str	r2, [r3, #8]
      break;
 800393a:	e04f      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394c:	f000 f97c 	bl	8003c48 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800395e:	609a      	str	r2, [r3, #8]
      break;
 8003960:	e03c      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	461a      	mov	r2, r3
 8003970:	f000 f8f0 	bl	8003b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2150      	movs	r1, #80	@ 0x50
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f949 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 8003980:	e02c      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800398e:	461a      	mov	r2, r3
 8003990:	f000 f90f 	bl	8003bb2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2160      	movs	r1, #96	@ 0x60
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f939 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 80039a0:	e01c      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 f8d0 	bl	8003b54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	@ 0x40
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f929 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 80039c0:	e00c      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 f920 	bl	8003c12 <TIM_ITRx_SetConfig>
      break;
 80039d2:	e003      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e000      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
	...

08003a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a37      	ldr	r2, [pc, #220]	@ (8003b38 <TIM_Base_SetConfig+0xf0>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a66:	d00b      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a34      	ldr	r2, [pc, #208]	@ (8003b3c <TIM_Base_SetConfig+0xf4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a33      	ldr	r2, [pc, #204]	@ (8003b40 <TIM_Base_SetConfig+0xf8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_Base_SetConfig+0x38>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <TIM_Base_SetConfig+0xfc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d108      	bne.n	8003a92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a28      	ldr	r2, [pc, #160]	@ (8003b38 <TIM_Base_SetConfig+0xf0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa0:	d017      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a25      	ldr	r2, [pc, #148]	@ (8003b3c <TIM_Base_SetConfig+0xf4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a24      	ldr	r2, [pc, #144]	@ (8003b40 <TIM_Base_SetConfig+0xf8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00f      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a23      	ldr	r2, [pc, #140]	@ (8003b44 <TIM_Base_SetConfig+0xfc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a22      	ldr	r2, [pc, #136]	@ (8003b48 <TIM_Base_SetConfig+0x100>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <TIM_Base_SetConfig+0x104>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a20      	ldr	r2, [pc, #128]	@ (8003b50 <TIM_Base_SetConfig+0x108>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <TIM_Base_SetConfig+0xf0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d103      	bne.n	8003b12 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f043 0204 	orr.w	r2, r3, #4
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	601a      	str	r2, [r3, #0]
}
 8003b2a:	bf00      	nop
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40010000 	.word	0x40010000
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800
 8003b44:	40000c00 	.word	0x40000c00
 8003b48:	40014000 	.word	0x40014000
 8003b4c:	40014400 	.word	0x40014400
 8003b50:	40014800 	.word	0x40014800

08003b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f023 030a 	bic.w	r3, r3, #10
 8003b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	621a      	str	r2, [r3, #32]
}
 8003ba6:	bf00      	nop
 8003ba8:	371c      	adds	r7, #28
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b087      	sub	sp, #28
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	f023 0210 	bic.w	r2, r3, #16
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	621a      	str	r2, [r3, #32]
}
 8003c06:	bf00      	nop
 8003c08:	371c      	adds	r7, #28
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f043 0307 	orr.w	r3, r3, #7
 8003c34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	609a      	str	r2, [r3, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	021a      	lsls	r2, r3, #8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	609a      	str	r2, [r3, #8]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e050      	b.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1c      	ldr	r2, [pc, #112]	@ (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cec:	d013      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a18      	ldr	r2, [pc, #96]	@ (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a16      	ldr	r2, [pc, #88]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a15      	ldr	r2, [pc, #84]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a13      	ldr	r2, [pc, #76]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40014000 	.word	0x40014000

08003d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e042      	b.n	8003e24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe f8dc 	bl	8001f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	@ 0x24
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fdd3 	bl	800497c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	@ 0x28
 8003e30:	af02      	add	r7, sp, #8
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b20      	cmp	r3, #32
 8003e4a:	d175      	bne.n	8003f38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_UART_Transmit+0x2c>
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e06e      	b.n	8003f3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2221      	movs	r2, #33	@ 0x21
 8003e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e6a:	f7fe fac5 	bl	80023f8 <HAL_GetTick>
 8003e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	88fa      	ldrh	r2, [r7, #6]
 8003e74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	88fa      	ldrh	r2, [r7, #6]
 8003e7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e84:	d108      	bne.n	8003e98 <HAL_UART_Transmit+0x6c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d104      	bne.n	8003e98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	e003      	b.n	8003ea0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ea0:	e02e      	b.n	8003f00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2180      	movs	r1, #128	@ 0x80
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fb37 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e03a      	b.n	8003f3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ed8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	3302      	adds	r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]
 8003ee0:	e007      	b.n	8003ef2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1cb      	bne.n	8003ea2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	9300      	str	r3, [sp, #0]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2200      	movs	r2, #0
 8003f12:	2140      	movs	r1, #64	@ 0x40
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fb03 	bl	8004520 <UART_WaitOnFlagUntilTimeout>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e006      	b.n	8003f3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d112      	bne.n	8003f82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <HAL_UART_Receive_IT+0x26>
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e00b      	b.n	8003f84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	461a      	mov	r2, r3
 8003f76:	68b9      	ldr	r1, [r7, #8]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fb2a 	bl	80045d2 <UART_Start_Receive_IT>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	e000      	b.n	8003f84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
  }
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d009      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x66>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 fc07 	bl	80047fe <UART_Receive_IT>
      return;
 8003ff0:	e273      	b.n	80044da <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80de 	beq.w	80041b8 <HAL_UART_IRQHandler+0x22c>
 8003ffc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800400c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80d1 	beq.w	80041b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <HAL_UART_IRQHandler+0xae>
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f043 0201 	orr.w	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800403a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <HAL_UART_IRQHandler+0xd2>
 8004046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004056:	f043 0202 	orr.w	r2, r3, #2
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xf6>
 800406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0308 	and.w	r3, r3, #8
 800408a:	2b00      	cmp	r3, #0
 800408c:	d011      	beq.n	80040b2 <HAL_UART_IRQHandler+0x126>
 800408e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800409a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d005      	beq.n	80040b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0208 	orr.w	r2, r3, #8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 820a 	beq.w	80044d0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d008      	beq.n	80040da <HAL_UART_IRQHandler+0x14e>
 80040c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb92 	bl	80047fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e4:	2b40      	cmp	r3, #64	@ 0x40
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d103      	bne.n	8004106 <HAL_UART_IRQHandler+0x17a>
 80040fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04f      	beq.n	80041a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa9d 	bl	8004646 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004116:	2b40      	cmp	r3, #64	@ 0x40
 8004118:	d141      	bne.n	800419e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3314      	adds	r3, #20
 8004142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004146:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800414a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004156:	e841 2300 	strex	r3, r2, [r1]
 800415a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800415e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1d9      	bne.n	800411a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d013      	beq.n	8004196 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	4a8a      	ldr	r2, [pc, #552]	@ (800439c <HAL_UART_IRQHandler+0x410>)
 8004174:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe faed 	bl	800275a <HAL_DMA_Abort_IT>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d016      	beq.n	80041b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004190:	4610      	mov	r0, r2
 8004192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	e00e      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9ac 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	e00a      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f9a8 	bl	80044f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a4:	e006      	b.n	80041b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9a4 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041b2:	e18d      	b.n	80044d0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	bf00      	nop
    return;
 80041b6:	e18b      	b.n	80044d0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	2b01      	cmp	r3, #1
 80041be:	f040 8167 	bne.w	8004490 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 8160 	beq.w	8004490 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80041d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8159 	beq.w	8004490 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fe:	2b40      	cmp	r3, #64	@ 0x40
 8004200:	f040 80ce 	bne.w	80043a0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80a9 	beq.w	800436c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800421e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004222:	429a      	cmp	r2, r3
 8004224:	f080 80a2 	bcs.w	800436c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800422e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800423a:	f000 8088 	beq.w	800434e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004254:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004258:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800425c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	330c      	adds	r3, #12
 8004266:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800426a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800426e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004276:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1d9      	bne.n	800423e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800429a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800429c:	f023 0301 	bic.w	r3, r3, #1
 80042a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042ba:	e841 2300 	strex	r3, r2, [r1]
 80042be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1e1      	bne.n	800428a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	3314      	adds	r3, #20
 80042cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3314      	adds	r3, #20
 80042e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e3      	bne.n	80042c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800431c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431e:	f023 0310 	bic.w	r3, r3, #16
 8004322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004330:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004332:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004336:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800433e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe f996 	bl	800267a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800435c:	b29b      	uxth	r3, r3
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	b29b      	uxth	r3, r3
 8004362:	4619      	mov	r1, r3
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f8cf 	bl	8004508 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800436a:	e0b3      	b.n	80044d4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004370:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004374:	429a      	cmp	r2, r3
 8004376:	f040 80ad 	bne.w	80044d4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004384:	f040 80a6 	bne.w	80044d4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f8b7 	bl	8004508 <HAL_UARTEx_RxEventCallback>
      return;
 800439a:	e09b      	b.n	80044d4 <HAL_UART_IRQHandler+0x548>
 800439c:	0800470d 	.word	0x0800470d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 808e 	beq.w	80044d8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80043bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8089 	beq.w	80044d8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80043ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80043ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e3      	bne.n	80043c6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3314      	adds	r3, #20
 8004404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	623b      	str	r3, [r7, #32]
   return(result);
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004422:	633a      	str	r2, [r7, #48]	@ 0x30
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	e841 2300 	strex	r3, r2, [r1]
 800442e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1e3      	bne.n	80043fe <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60fb      	str	r3, [r7, #12]
   return(result);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004468:	61fa      	str	r2, [r7, #28]
 800446a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	e841 2300 	strex	r3, r2, [r1]
 8004474:	617b      	str	r3, [r7, #20]
   return(result);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1e3      	bne.n	8004444 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004482:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004486:	4619      	mov	r1, r3
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f83d 	bl	8004508 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800448e:	e023      	b.n	80044d8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_UART_IRQHandler+0x524>
 800449c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f940 	bl	800472e <UART_Transmit_IT>
    return;
 80044ae:	e014      	b.n	80044da <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00e      	beq.n	80044da <HAL_UART_IRQHandler+0x54e>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f980 	bl	80047ce <UART_EndTransmit_IT>
    return;
 80044ce:	e004      	b.n	80044da <HAL_UART_IRQHandler+0x54e>
    return;
 80044d0:	bf00      	nop
 80044d2:	e002      	b.n	80044da <HAL_UART_IRQHandler+0x54e>
      return;
 80044d4:	bf00      	nop
 80044d6:	e000      	b.n	80044da <HAL_UART_IRQHandler+0x54e>
      return;
 80044d8:	bf00      	nop
  }
}
 80044da:	37e8      	adds	r7, #232	@ 0xe8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	603b      	str	r3, [r7, #0]
 800452c:	4613      	mov	r3, r2
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	e03b      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d037      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800453a:	f7fd ff5d 	bl	80023f8 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <UART_WaitOnFlagUntilTimeout+0x30>
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e03a      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d023      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b80      	cmp	r3, #128	@ 0x80
 8004566:	d020      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d01d      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b08      	cmp	r3, #8
 800457a:	d116      	bne.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f857 	bl	8004646 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2208      	movs	r2, #8
 800459c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d0b4      	beq.n	8004532 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2222      	movs	r2, #34	@ 0x22
 80045fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d007      	beq.n	8004618 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004616:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004646:	b480      	push	{r7}
 8004648:	b095      	sub	sp, #84	@ 0x54
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	330c      	adds	r3, #12
 8004654:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004658:	e853 3f00 	ldrex	r3, [r3]
 800465c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004664:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800466e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004670:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004672:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004674:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004676:	e841 2300 	strex	r3, r2, [r1]
 800467a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1e5      	bne.n	800464e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	3314      	adds	r3, #20
 8004688:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	61fb      	str	r3, [r7, #28]
   return(result);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	64bb      	str	r3, [r7, #72]	@ 0x48
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d119      	bne.n	80046f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0310 	bic.w	r3, r3, #16
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046de:	61ba      	str	r2, [r7, #24]
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6979      	ldr	r1, [r7, #20]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	613b      	str	r3, [r7, #16]
   return(result);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004700:	bf00      	nop
 8004702:	3754      	adds	r7, #84	@ 0x54
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f7ff fee7 	bl	80044f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b21      	cmp	r3, #33	@ 0x21
 8004740:	d13e      	bne.n	80047c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474a:	d114      	bne.n	8004776 <UART_Transmit_IT+0x48>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d110      	bne.n	8004776 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	881b      	ldrh	r3, [r3, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	621a      	str	r2, [r3, #32]
 8004774:	e008      	b.n	8004788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	1c59      	adds	r1, r3, #1
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6211      	str	r1, [r2, #32]
 8004780:	781a      	ldrb	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800478c:	b29b      	uxth	r3, r3
 800478e:	3b01      	subs	r3, #1
 8004790:	b29b      	uxth	r3, r3
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	4619      	mov	r1, r3
 8004796:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68da      	ldr	r2, [r3, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7ff fe76 	bl	80044e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08c      	sub	sp, #48	@ 0x30
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004806:	2300      	movs	r3, #0
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b22      	cmp	r3, #34	@ 0x22
 8004818:	f040 80aa 	bne.w	8004970 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004824:	d115      	bne.n	8004852 <UART_Receive_IT+0x54>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d111      	bne.n	8004852 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004832:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	b29b      	uxth	r3, r3
 800483c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004840:	b29a      	uxth	r2, r3
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004850:	e024      	b.n	800489c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004860:	d007      	beq.n	8004872 <UART_Receive_IT+0x74>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <UART_Receive_IT+0x82>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	b2da      	uxtb	r2, r3
 800487a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e008      	b.n	8004892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488c:	b2da      	uxtb	r2, r3
 800488e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d15d      	bne.n	800496c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0220 	bic.w	r2, r2, #32
 80048be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0201 	bic.w	r2, r2, #1
 80048de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d135      	bne.n	8004962 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	330c      	adds	r3, #12
 8004902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	613b      	str	r3, [r7, #16]
   return(result);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	f023 0310 	bic.w	r3, r3, #16
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	330c      	adds	r3, #12
 800491a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800491c:	623a      	str	r2, [r7, #32]
 800491e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	69f9      	ldr	r1, [r7, #28]
 8004922:	6a3a      	ldr	r2, [r7, #32]
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	61bb      	str	r3, [r7, #24]
   return(result);
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e5      	bne.n	80048fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b10      	cmp	r3, #16
 800493c:	d10a      	bne.n	8004954 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fdd4 	bl	8004508 <HAL_UARTEx_RxEventCallback>
 8004960:	e002      	b.n	8004968 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc fd28 	bl	80013b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004968:	2300      	movs	r3, #0
 800496a:	e002      	b.n	8004972 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3730      	adds	r7, #48	@ 0x30
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
	...

0800497c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b0c0      	sub	sp, #256	@ 0x100
 8004982:	af00      	add	r7, sp, #0
 8004984:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004998:	68d9      	ldr	r1, [r3, #12]
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	ea40 0301 	orr.w	r3, r0, r1
 80049a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049d4:	f021 010c 	bic.w	r1, r1, #12
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049e2:	430b      	orrs	r3, r1
 80049e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80049f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	ea40 0301 	orr.w	r3, r0, r1
 8004a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b8f      	ldr	r3, [pc, #572]	@ (8004c48 <UART_SetConfig+0x2cc>)
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d005      	beq.n	8004a1c <UART_SetConfig+0xa0>
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	4b8d      	ldr	r3, [pc, #564]	@ (8004c4c <UART_SetConfig+0x2d0>)
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d104      	bne.n	8004a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a1c:	f7fe fd14 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8004a20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a24:	e003      	b.n	8004a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a26:	f7fe fcfb 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 8004a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a38:	f040 810c 	bne.w	8004c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a4e:	4622      	mov	r2, r4
 8004a50:	462b      	mov	r3, r5
 8004a52:	1891      	adds	r1, r2, r2
 8004a54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a56:	415b      	adcs	r3, r3
 8004a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a5e:	4621      	mov	r1, r4
 8004a60:	eb12 0801 	adds.w	r8, r2, r1
 8004a64:	4629      	mov	r1, r5
 8004a66:	eb43 0901 	adc.w	r9, r3, r1
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	f04f 0300 	mov.w	r3, #0
 8004a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a7e:	4690      	mov	r8, r2
 8004a80:	4699      	mov	r9, r3
 8004a82:	4623      	mov	r3, r4
 8004a84:	eb18 0303 	adds.w	r3, r8, r3
 8004a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	eb49 0303 	adc.w	r3, r9, r3
 8004a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004aaa:	460b      	mov	r3, r1
 8004aac:	18db      	adds	r3, r3, r3
 8004aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	eb42 0303 	adc.w	r3, r2, r3
 8004ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ac0:	f7fc f8fa 	bl	8000cb8 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4b61      	ldr	r3, [pc, #388]	@ (8004c50 <UART_SetConfig+0x2d4>)
 8004aca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	011c      	lsls	r4, r3, #4
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004adc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ae4:	4642      	mov	r2, r8
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	1891      	adds	r1, r2, r2
 8004aea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004aec:	415b      	adcs	r3, r3
 8004aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004af4:	4641      	mov	r1, r8
 8004af6:	eb12 0a01 	adds.w	sl, r2, r1
 8004afa:	4649      	mov	r1, r9
 8004afc:	eb43 0b01 	adc.w	fp, r3, r1
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	f04f 0300 	mov.w	r3, #0
 8004b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b14:	4692      	mov	sl, r2
 8004b16:	469b      	mov	fp, r3
 8004b18:	4643      	mov	r3, r8
 8004b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8004b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b22:	464b      	mov	r3, r9
 8004b24:	eb4b 0303 	adc.w	r3, fp, r3
 8004b28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b40:	460b      	mov	r3, r1
 8004b42:	18db      	adds	r3, r3, r3
 8004b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b46:	4613      	mov	r3, r2
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b56:	f7fc f8af 	bl	8000cb8 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4b3b      	ldr	r3, [pc, #236]	@ (8004c50 <UART_SetConfig+0x2d4>)
 8004b62:	fba3 2301 	umull	r2, r3, r3, r1
 8004b66:	095b      	lsrs	r3, r3, #5
 8004b68:	2264      	movs	r2, #100	@ 0x64
 8004b6a:	fb02 f303 	mul.w	r3, r2, r3
 8004b6e:	1acb      	subs	r3, r1, r3
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b76:	4b36      	ldr	r3, [pc, #216]	@ (8004c50 <UART_SetConfig+0x2d4>)
 8004b78:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b84:	441c      	add	r4, r3
 8004b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b98:	4642      	mov	r2, r8
 8004b9a:	464b      	mov	r3, r9
 8004b9c:	1891      	adds	r1, r2, r2
 8004b9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ba0:	415b      	adcs	r3, r3
 8004ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ba8:	4641      	mov	r1, r8
 8004baa:	1851      	adds	r1, r2, r1
 8004bac:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bae:	4649      	mov	r1, r9
 8004bb0:	414b      	adcs	r3, r1
 8004bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bc0:	4659      	mov	r1, fp
 8004bc2:	00cb      	lsls	r3, r1, #3
 8004bc4:	4651      	mov	r1, sl
 8004bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bca:	4651      	mov	r1, sl
 8004bcc:	00ca      	lsls	r2, r1, #3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bdc:	464b      	mov	r3, r9
 8004bde:	460a      	mov	r2, r1
 8004be0:	eb42 0303 	adc.w	r3, r2, r3
 8004be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	18db      	adds	r3, r3, r3
 8004c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c02:	4613      	mov	r3, r2
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c12:	f7fc f851 	bl	8000cb8 <__aeabi_uldivmod>
 8004c16:	4602      	mov	r2, r0
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <UART_SetConfig+0x2d4>)
 8004c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c20:	095b      	lsrs	r3, r3, #5
 8004c22:	2164      	movs	r1, #100	@ 0x64
 8004c24:	fb01 f303 	mul.w	r3, r1, r3
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	3332      	adds	r3, #50	@ 0x32
 8004c2e:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <UART_SetConfig+0x2d4>)
 8004c30:	fba2 2303 	umull	r2, r3, r2, r3
 8004c34:	095b      	lsrs	r3, r3, #5
 8004c36:	f003 0207 	and.w	r2, r3, #7
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4422      	add	r2, r4
 8004c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c44:	e106      	b.n	8004e54 <UART_SetConfig+0x4d8>
 8004c46:	bf00      	nop
 8004c48:	40011000 	.word	0x40011000
 8004c4c:	40011400 	.word	0x40011400
 8004c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c66:	4642      	mov	r2, r8
 8004c68:	464b      	mov	r3, r9
 8004c6a:	1891      	adds	r1, r2, r2
 8004c6c:	6239      	str	r1, [r7, #32]
 8004c6e:	415b      	adcs	r3, r3
 8004c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c76:	4641      	mov	r1, r8
 8004c78:	1854      	adds	r4, r2, r1
 8004c7a:	4649      	mov	r1, r9
 8004c7c:	eb43 0501 	adc.w	r5, r3, r1
 8004c80:	f04f 0200 	mov.w	r2, #0
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	00eb      	lsls	r3, r5, #3
 8004c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c8e:	00e2      	lsls	r2, r4, #3
 8004c90:	4614      	mov	r4, r2
 8004c92:	461d      	mov	r5, r3
 8004c94:	4643      	mov	r3, r8
 8004c96:	18e3      	adds	r3, r4, r3
 8004c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	008b      	lsls	r3, r1, #2
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ccc:	4621      	mov	r1, r4
 8004cce:	008a      	lsls	r2, r1, #2
 8004cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cd4:	f7fb fff0 	bl	8000cb8 <__aeabi_uldivmod>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4b60      	ldr	r3, [pc, #384]	@ (8004e60 <UART_SetConfig+0x4e4>)
 8004cde:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	011c      	lsls	r4, r3, #4
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	61b9      	str	r1, [r7, #24]
 8004d00:	415b      	adcs	r3, r3
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6139      	str	r1, [r7, #16]
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d60:	4649      	mov	r1, r9
 8004d62:	008b      	lsls	r3, r1, #2
 8004d64:	4641      	mov	r1, r8
 8004d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	008a      	lsls	r2, r1, #2
 8004d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d72:	f7fb ffa1 	bl	8000cb8 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4611      	mov	r1, r2
 8004d7c:	4b38      	ldr	r3, [pc, #224]	@ (8004e60 <UART_SetConfig+0x4e4>)
 8004d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	2264      	movs	r2, #100	@ 0x64
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	1acb      	subs	r3, r1, r3
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	3332      	adds	r3, #50	@ 0x32
 8004d90:	4a33      	ldr	r2, [pc, #204]	@ (8004e60 <UART_SetConfig+0x4e4>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d9c:	441c      	add	r4, r3
 8004d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da2:	2200      	movs	r2, #0
 8004da4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004da6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dac:	4642      	mov	r2, r8
 8004dae:	464b      	mov	r3, r9
 8004db0:	1891      	adds	r1, r2, r2
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	415b      	adcs	r3, r3
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dbc:	4641      	mov	r1, r8
 8004dbe:	1851      	adds	r1, r2, r1
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	414b      	adcs	r3, r1
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004dd4:	4659      	mov	r1, fp
 8004dd6:	00cb      	lsls	r3, r1, #3
 8004dd8:	4651      	mov	r1, sl
 8004dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dde:	4651      	mov	r1, sl
 8004de0:	00ca      	lsls	r2, r1, #3
 8004de2:	4610      	mov	r0, r2
 8004de4:	4619      	mov	r1, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	4642      	mov	r2, r8
 8004dea:	189b      	adds	r3, r3, r2
 8004dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dee:	464b      	mov	r3, r9
 8004df0:	460a      	mov	r2, r1
 8004df2:	eb42 0303 	adc.w	r3, r2, r3
 8004df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e02:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e10:	4649      	mov	r1, r9
 8004e12:	008b      	lsls	r3, r1, #2
 8004e14:	4641      	mov	r1, r8
 8004e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1a:	4641      	mov	r1, r8
 8004e1c:	008a      	lsls	r2, r1, #2
 8004e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e22:	f7fb ff49 	bl	8000cb8 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <UART_SetConfig+0x4e4>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	@ 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	3332      	adds	r3, #50	@ 0x32
 8004e3e:	4a08      	ldr	r2, [pc, #32]	@ (8004e60 <UART_SetConfig+0x4e4>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	f003 020f 	and.w	r2, r3, #15
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4422      	add	r2, r4
 8004e52:	609a      	str	r2, [r3, #8]
}
 8004e54:	bf00      	nop
 8004e56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e60:	51eb851f 	.word	0x51eb851f

08004e64 <__cvt>:
 8004e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	ec57 6b10 	vmov	r6, r7, d0
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	4619      	mov	r1, r3
 8004e72:	463b      	mov	r3, r7
 8004e74:	bfbb      	ittet	lt
 8004e76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004e7a:	461f      	movlt	r7, r3
 8004e7c:	2300      	movge	r3, #0
 8004e7e:	232d      	movlt	r3, #45	@ 0x2d
 8004e80:	700b      	strb	r3, [r1, #0]
 8004e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004e88:	4691      	mov	r9, r2
 8004e8a:	f023 0820 	bic.w	r8, r3, #32
 8004e8e:	bfbc      	itt	lt
 8004e90:	4632      	movlt	r2, r6
 8004e92:	4616      	movlt	r6, r2
 8004e94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e98:	d005      	beq.n	8004ea6 <__cvt+0x42>
 8004e9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e9e:	d100      	bne.n	8004ea2 <__cvt+0x3e>
 8004ea0:	3401      	adds	r4, #1
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	e000      	b.n	8004ea8 <__cvt+0x44>
 8004ea6:	2103      	movs	r1, #3
 8004ea8:	ab03      	add	r3, sp, #12
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	ab02      	add	r3, sp, #8
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	ec47 6b10 	vmov	d0, r6, r7
 8004eb4:	4653      	mov	r3, sl
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	f001 fa42 	bl	8006340 <_dtoa_r>
 8004ebc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	d119      	bne.n	8004ef8 <__cvt+0x94>
 8004ec4:	f019 0f01 	tst.w	r9, #1
 8004ec8:	d00e      	beq.n	8004ee8 <__cvt+0x84>
 8004eca:	eb00 0904 	add.w	r9, r0, r4
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4630      	mov	r0, r6
 8004ed4:	4639      	mov	r1, r7
 8004ed6:	f7fb fe0f 	bl	8000af8 <__aeabi_dcmpeq>
 8004eda:	b108      	cbz	r0, 8004ee0 <__cvt+0x7c>
 8004edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ee0:	2230      	movs	r2, #48	@ 0x30
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	454b      	cmp	r3, r9
 8004ee6:	d31e      	bcc.n	8004f26 <__cvt+0xc2>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004eec:	1b5b      	subs	r3, r3, r5
 8004eee:	4628      	mov	r0, r5
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	b004      	add	sp, #16
 8004ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004efc:	eb00 0904 	add.w	r9, r0, r4
 8004f00:	d1e5      	bne.n	8004ece <__cvt+0x6a>
 8004f02:	7803      	ldrb	r3, [r0, #0]
 8004f04:	2b30      	cmp	r3, #48	@ 0x30
 8004f06:	d10a      	bne.n	8004f1e <__cvt+0xba>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	4639      	mov	r1, r7
 8004f10:	f7fb fdf2 	bl	8000af8 <__aeabi_dcmpeq>
 8004f14:	b918      	cbnz	r0, 8004f1e <__cvt+0xba>
 8004f16:	f1c4 0401 	rsb	r4, r4, #1
 8004f1a:	f8ca 4000 	str.w	r4, [sl]
 8004f1e:	f8da 3000 	ldr.w	r3, [sl]
 8004f22:	4499      	add	r9, r3
 8004f24:	e7d3      	b.n	8004ece <__cvt+0x6a>
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	9103      	str	r1, [sp, #12]
 8004f2a:	701a      	strb	r2, [r3, #0]
 8004f2c:	e7d9      	b.n	8004ee2 <__cvt+0x7e>

08004f2e <__exponent>:
 8004f2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f30:	2900      	cmp	r1, #0
 8004f32:	bfba      	itte	lt
 8004f34:	4249      	neglt	r1, r1
 8004f36:	232d      	movlt	r3, #45	@ 0x2d
 8004f38:	232b      	movge	r3, #43	@ 0x2b
 8004f3a:	2909      	cmp	r1, #9
 8004f3c:	7002      	strb	r2, [r0, #0]
 8004f3e:	7043      	strb	r3, [r0, #1]
 8004f40:	dd29      	ble.n	8004f96 <__exponent+0x68>
 8004f42:	f10d 0307 	add.w	r3, sp, #7
 8004f46:	461d      	mov	r5, r3
 8004f48:	270a      	movs	r7, #10
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f50:	fb07 1416 	mls	r4, r7, r6, r1
 8004f54:	3430      	adds	r4, #48	@ 0x30
 8004f56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	2c63      	cmp	r4, #99	@ 0x63
 8004f5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f62:	4631      	mov	r1, r6
 8004f64:	dcf1      	bgt.n	8004f4a <__exponent+0x1c>
 8004f66:	3130      	adds	r1, #48	@ 0x30
 8004f68:	1e94      	subs	r4, r2, #2
 8004f6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f6e:	1c41      	adds	r1, r0, #1
 8004f70:	4623      	mov	r3, r4
 8004f72:	42ab      	cmp	r3, r5
 8004f74:	d30a      	bcc.n	8004f8c <__exponent+0x5e>
 8004f76:	f10d 0309 	add.w	r3, sp, #9
 8004f7a:	1a9b      	subs	r3, r3, r2
 8004f7c:	42ac      	cmp	r4, r5
 8004f7e:	bf88      	it	hi
 8004f80:	2300      	movhi	r3, #0
 8004f82:	3302      	adds	r3, #2
 8004f84:	4403      	add	r3, r0
 8004f86:	1a18      	subs	r0, r3, r0
 8004f88:	b003      	add	sp, #12
 8004f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f94:	e7ed      	b.n	8004f72 <__exponent+0x44>
 8004f96:	2330      	movs	r3, #48	@ 0x30
 8004f98:	3130      	adds	r1, #48	@ 0x30
 8004f9a:	7083      	strb	r3, [r0, #2]
 8004f9c:	70c1      	strb	r1, [r0, #3]
 8004f9e:	1d03      	adds	r3, r0, #4
 8004fa0:	e7f1      	b.n	8004f86 <__exponent+0x58>
	...

08004fa4 <_printf_float>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	b08d      	sub	sp, #52	@ 0x34
 8004faa:	460c      	mov	r4, r1
 8004fac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	461f      	mov	r7, r3
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	f001 f887 	bl	80060c8 <_localeconv_r>
 8004fba:	6803      	ldr	r3, [r0, #0]
 8004fbc:	9304      	str	r3, [sp, #16]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7fb f96e 	bl	80002a0 <strlen>
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fcc:	9005      	str	r0, [sp, #20]
 8004fce:	3307      	adds	r3, #7
 8004fd0:	f023 0307 	bic.w	r3, r3, #7
 8004fd4:	f103 0208 	add.w	r2, r3, #8
 8004fd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fdc:	f8d4 b000 	ldr.w	fp, [r4]
 8004fe0:	f8c8 2000 	str.w	r2, [r8]
 8004fe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fec:	9307      	str	r3, [sp, #28]
 8004fee:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800526c <_printf_float+0x2c8>)
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8005000:	f7fb fdac 	bl	8000b5c <__aeabi_dcmpun>
 8005004:	bb70      	cbnz	r0, 8005064 <_printf_float+0xc0>
 8005006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800500a:	4b98      	ldr	r3, [pc, #608]	@ (800526c <_printf_float+0x2c8>)
 800500c:	f04f 32ff 	mov.w	r2, #4294967295
 8005010:	f7fb fd86 	bl	8000b20 <__aeabi_dcmple>
 8005014:	bb30      	cbnz	r0, 8005064 <_printf_float+0xc0>
 8005016:	2200      	movs	r2, #0
 8005018:	2300      	movs	r3, #0
 800501a:	4640      	mov	r0, r8
 800501c:	4649      	mov	r1, r9
 800501e:	f7fb fd75 	bl	8000b0c <__aeabi_dcmplt>
 8005022:	b110      	cbz	r0, 800502a <_printf_float+0x86>
 8005024:	232d      	movs	r3, #45	@ 0x2d
 8005026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800502a:	4a91      	ldr	r2, [pc, #580]	@ (8005270 <_printf_float+0x2cc>)
 800502c:	4b91      	ldr	r3, [pc, #580]	@ (8005274 <_printf_float+0x2d0>)
 800502e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005032:	bf8c      	ite	hi
 8005034:	4690      	movhi	r8, r2
 8005036:	4698      	movls	r8, r3
 8005038:	2303      	movs	r3, #3
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	f02b 0304 	bic.w	r3, fp, #4
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	f04f 0900 	mov.w	r9, #0
 8005046:	9700      	str	r7, [sp, #0]
 8005048:	4633      	mov	r3, r6
 800504a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f9d2 	bl	80053f8 <_printf_common>
 8005054:	3001      	adds	r0, #1
 8005056:	f040 808d 	bne.w	8005174 <_printf_float+0x1d0>
 800505a:	f04f 30ff 	mov.w	r0, #4294967295
 800505e:	b00d      	add	sp, #52	@ 0x34
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	4642      	mov	r2, r8
 8005066:	464b      	mov	r3, r9
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb fd76 	bl	8000b5c <__aeabi_dcmpun>
 8005070:	b140      	cbz	r0, 8005084 <_printf_float+0xe0>
 8005072:	464b      	mov	r3, r9
 8005074:	2b00      	cmp	r3, #0
 8005076:	bfbc      	itt	lt
 8005078:	232d      	movlt	r3, #45	@ 0x2d
 800507a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800507e:	4a7e      	ldr	r2, [pc, #504]	@ (8005278 <_printf_float+0x2d4>)
 8005080:	4b7e      	ldr	r3, [pc, #504]	@ (800527c <_printf_float+0x2d8>)
 8005082:	e7d4      	b.n	800502e <_printf_float+0x8a>
 8005084:	6863      	ldr	r3, [r4, #4]
 8005086:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800508a:	9206      	str	r2, [sp, #24]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	d13b      	bne.n	8005108 <_printf_float+0x164>
 8005090:	2306      	movs	r3, #6
 8005092:	6063      	str	r3, [r4, #4]
 8005094:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005098:	2300      	movs	r3, #0
 800509a:	6022      	str	r2, [r4, #0]
 800509c:	9303      	str	r3, [sp, #12]
 800509e:	ab0a      	add	r3, sp, #40	@ 0x28
 80050a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050a4:	ab09      	add	r3, sp, #36	@ 0x24
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6861      	ldr	r1, [r4, #4]
 80050aa:	ec49 8b10 	vmov	d0, r8, r9
 80050ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050b2:	4628      	mov	r0, r5
 80050b4:	f7ff fed6 	bl	8004e64 <__cvt>
 80050b8:	9b06      	ldr	r3, [sp, #24]
 80050ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050bc:	2b47      	cmp	r3, #71	@ 0x47
 80050be:	4680      	mov	r8, r0
 80050c0:	d129      	bne.n	8005116 <_printf_float+0x172>
 80050c2:	1cc8      	adds	r0, r1, #3
 80050c4:	db02      	blt.n	80050cc <_printf_float+0x128>
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	4299      	cmp	r1, r3
 80050ca:	dd41      	ble.n	8005150 <_printf_float+0x1ac>
 80050cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80050d0:	fa5f fa8a 	uxtb.w	sl, sl
 80050d4:	3901      	subs	r1, #1
 80050d6:	4652      	mov	r2, sl
 80050d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80050de:	f7ff ff26 	bl	8004f2e <__exponent>
 80050e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050e4:	1813      	adds	r3, r2, r0
 80050e6:	2a01      	cmp	r2, #1
 80050e8:	4681      	mov	r9, r0
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	dc02      	bgt.n	80050f4 <_printf_float+0x150>
 80050ee:	6822      	ldr	r2, [r4, #0]
 80050f0:	07d2      	lsls	r2, r2, #31
 80050f2:	d501      	bpl.n	80050f8 <_printf_float+0x154>
 80050f4:	3301      	adds	r3, #1
 80050f6:	6123      	str	r3, [r4, #16]
 80050f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0a2      	beq.n	8005046 <_printf_float+0xa2>
 8005100:	232d      	movs	r3, #45	@ 0x2d
 8005102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005106:	e79e      	b.n	8005046 <_printf_float+0xa2>
 8005108:	9a06      	ldr	r2, [sp, #24]
 800510a:	2a47      	cmp	r2, #71	@ 0x47
 800510c:	d1c2      	bne.n	8005094 <_printf_float+0xf0>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1c0      	bne.n	8005094 <_printf_float+0xf0>
 8005112:	2301      	movs	r3, #1
 8005114:	e7bd      	b.n	8005092 <_printf_float+0xee>
 8005116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800511a:	d9db      	bls.n	80050d4 <_printf_float+0x130>
 800511c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005120:	d118      	bne.n	8005154 <_printf_float+0x1b0>
 8005122:	2900      	cmp	r1, #0
 8005124:	6863      	ldr	r3, [r4, #4]
 8005126:	dd0b      	ble.n	8005140 <_printf_float+0x19c>
 8005128:	6121      	str	r1, [r4, #16]
 800512a:	b913      	cbnz	r3, 8005132 <_printf_float+0x18e>
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	07d0      	lsls	r0, r2, #31
 8005130:	d502      	bpl.n	8005138 <_printf_float+0x194>
 8005132:	3301      	adds	r3, #1
 8005134:	440b      	add	r3, r1
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	65a1      	str	r1, [r4, #88]	@ 0x58
 800513a:	f04f 0900 	mov.w	r9, #0
 800513e:	e7db      	b.n	80050f8 <_printf_float+0x154>
 8005140:	b913      	cbnz	r3, 8005148 <_printf_float+0x1a4>
 8005142:	6822      	ldr	r2, [r4, #0]
 8005144:	07d2      	lsls	r2, r2, #31
 8005146:	d501      	bpl.n	800514c <_printf_float+0x1a8>
 8005148:	3302      	adds	r3, #2
 800514a:	e7f4      	b.n	8005136 <_printf_float+0x192>
 800514c:	2301      	movs	r3, #1
 800514e:	e7f2      	b.n	8005136 <_printf_float+0x192>
 8005150:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005156:	4299      	cmp	r1, r3
 8005158:	db05      	blt.n	8005166 <_printf_float+0x1c2>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	6121      	str	r1, [r4, #16]
 800515e:	07d8      	lsls	r0, r3, #31
 8005160:	d5ea      	bpl.n	8005138 <_printf_float+0x194>
 8005162:	1c4b      	adds	r3, r1, #1
 8005164:	e7e7      	b.n	8005136 <_printf_float+0x192>
 8005166:	2900      	cmp	r1, #0
 8005168:	bfd4      	ite	le
 800516a:	f1c1 0202 	rsble	r2, r1, #2
 800516e:	2201      	movgt	r2, #1
 8005170:	4413      	add	r3, r2
 8005172:	e7e0      	b.n	8005136 <_printf_float+0x192>
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	055a      	lsls	r2, r3, #21
 8005178:	d407      	bmi.n	800518a <_printf_float+0x1e6>
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	4642      	mov	r2, r8
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	47b8      	blx	r7
 8005184:	3001      	adds	r0, #1
 8005186:	d12b      	bne.n	80051e0 <_printf_float+0x23c>
 8005188:	e767      	b.n	800505a <_printf_float+0xb6>
 800518a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800518e:	f240 80dd 	bls.w	800534c <_printf_float+0x3a8>
 8005192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005196:	2200      	movs	r2, #0
 8005198:	2300      	movs	r3, #0
 800519a:	f7fb fcad 	bl	8000af8 <__aeabi_dcmpeq>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d033      	beq.n	800520a <_printf_float+0x266>
 80051a2:	4a37      	ldr	r2, [pc, #220]	@ (8005280 <_printf_float+0x2dc>)
 80051a4:	2301      	movs	r3, #1
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f af54 	beq.w	800505a <_printf_float+0xb6>
 80051b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051b6:	4543      	cmp	r3, r8
 80051b8:	db02      	blt.n	80051c0 <_printf_float+0x21c>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	07d8      	lsls	r0, r3, #31
 80051be:	d50f      	bpl.n	80051e0 <_printf_float+0x23c>
 80051c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f af45 	beq.w	800505a <_printf_float+0xb6>
 80051d0:	f04f 0900 	mov.w	r9, #0
 80051d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80051d8:	f104 0a1a 	add.w	sl, r4, #26
 80051dc:	45c8      	cmp	r8, r9
 80051de:	dc09      	bgt.n	80051f4 <_printf_float+0x250>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	079b      	lsls	r3, r3, #30
 80051e4:	f100 8103 	bmi.w	80053ee <_printf_float+0x44a>
 80051e8:	68e0      	ldr	r0, [r4, #12]
 80051ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ec:	4298      	cmp	r0, r3
 80051ee:	bfb8      	it	lt
 80051f0:	4618      	movlt	r0, r3
 80051f2:	e734      	b.n	800505e <_printf_float+0xba>
 80051f4:	2301      	movs	r3, #1
 80051f6:	4652      	mov	r2, sl
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f af2b 	beq.w	800505a <_printf_float+0xb6>
 8005204:	f109 0901 	add.w	r9, r9, #1
 8005208:	e7e8      	b.n	80051dc <_printf_float+0x238>
 800520a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc39      	bgt.n	8005284 <_printf_float+0x2e0>
 8005210:	4a1b      	ldr	r2, [pc, #108]	@ (8005280 <_printf_float+0x2dc>)
 8005212:	2301      	movs	r3, #1
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af1d 	beq.w	800505a <_printf_float+0xb6>
 8005220:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005224:	ea59 0303 	orrs.w	r3, r9, r3
 8005228:	d102      	bne.n	8005230 <_printf_float+0x28c>
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	07d9      	lsls	r1, r3, #31
 800522e:	d5d7      	bpl.n	80051e0 <_printf_float+0x23c>
 8005230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	47b8      	blx	r7
 800523a:	3001      	adds	r0, #1
 800523c:	f43f af0d 	beq.w	800505a <_printf_float+0xb6>
 8005240:	f04f 0a00 	mov.w	sl, #0
 8005244:	f104 0b1a 	add.w	fp, r4, #26
 8005248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800524a:	425b      	negs	r3, r3
 800524c:	4553      	cmp	r3, sl
 800524e:	dc01      	bgt.n	8005254 <_printf_float+0x2b0>
 8005250:	464b      	mov	r3, r9
 8005252:	e793      	b.n	800517c <_printf_float+0x1d8>
 8005254:	2301      	movs	r3, #1
 8005256:	465a      	mov	r2, fp
 8005258:	4631      	mov	r1, r6
 800525a:	4628      	mov	r0, r5
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	f43f aefb 	beq.w	800505a <_printf_float+0xb6>
 8005264:	f10a 0a01 	add.w	sl, sl, #1
 8005268:	e7ee      	b.n	8005248 <_printf_float+0x2a4>
 800526a:	bf00      	nop
 800526c:	7fefffff 	.word	0x7fefffff
 8005270:	08009b30 	.word	0x08009b30
 8005274:	08009b2c 	.word	0x08009b2c
 8005278:	08009b38 	.word	0x08009b38
 800527c:	08009b34 	.word	0x08009b34
 8005280:	08009b3c 	.word	0x08009b3c
 8005284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800528a:	4553      	cmp	r3, sl
 800528c:	bfa8      	it	ge
 800528e:	4653      	movge	r3, sl
 8005290:	2b00      	cmp	r3, #0
 8005292:	4699      	mov	r9, r3
 8005294:	dc36      	bgt.n	8005304 <_printf_float+0x360>
 8005296:	f04f 0b00 	mov.w	fp, #0
 800529a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529e:	f104 021a 	add.w	r2, r4, #26
 80052a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052a4:	9306      	str	r3, [sp, #24]
 80052a6:	eba3 0309 	sub.w	r3, r3, r9
 80052aa:	455b      	cmp	r3, fp
 80052ac:	dc31      	bgt.n	8005312 <_printf_float+0x36e>
 80052ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052b0:	459a      	cmp	sl, r3
 80052b2:	dc3a      	bgt.n	800532a <_printf_float+0x386>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	07da      	lsls	r2, r3, #31
 80052b8:	d437      	bmi.n	800532a <_printf_float+0x386>
 80052ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052bc:	ebaa 0903 	sub.w	r9, sl, r3
 80052c0:	9b06      	ldr	r3, [sp, #24]
 80052c2:	ebaa 0303 	sub.w	r3, sl, r3
 80052c6:	4599      	cmp	r9, r3
 80052c8:	bfa8      	it	ge
 80052ca:	4699      	movge	r9, r3
 80052cc:	f1b9 0f00 	cmp.w	r9, #0
 80052d0:	dc33      	bgt.n	800533a <_printf_float+0x396>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052da:	f104 0b1a 	add.w	fp, r4, #26
 80052de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e0:	ebaa 0303 	sub.w	r3, sl, r3
 80052e4:	eba3 0309 	sub.w	r3, r3, r9
 80052e8:	4543      	cmp	r3, r8
 80052ea:	f77f af79 	ble.w	80051e0 <_printf_float+0x23c>
 80052ee:	2301      	movs	r3, #1
 80052f0:	465a      	mov	r2, fp
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f aeae 	beq.w	800505a <_printf_float+0xb6>
 80052fe:	f108 0801 	add.w	r8, r8, #1
 8005302:	e7ec      	b.n	80052de <_printf_float+0x33a>
 8005304:	4642      	mov	r2, r8
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	d1c2      	bne.n	8005296 <_printf_float+0x2f2>
 8005310:	e6a3      	b.n	800505a <_printf_float+0xb6>
 8005312:	2301      	movs	r3, #1
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	9206      	str	r2, [sp, #24]
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f ae9c 	beq.w	800505a <_printf_float+0xb6>
 8005322:	9a06      	ldr	r2, [sp, #24]
 8005324:	f10b 0b01 	add.w	fp, fp, #1
 8005328:	e7bb      	b.n	80052a2 <_printf_float+0x2fe>
 800532a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d1c0      	bne.n	80052ba <_printf_float+0x316>
 8005338:	e68f      	b.n	800505a <_printf_float+0xb6>
 800533a:	9a06      	ldr	r2, [sp, #24]
 800533c:	464b      	mov	r3, r9
 800533e:	4442      	add	r2, r8
 8005340:	4631      	mov	r1, r6
 8005342:	4628      	mov	r0, r5
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	d1c3      	bne.n	80052d2 <_printf_float+0x32e>
 800534a:	e686      	b.n	800505a <_printf_float+0xb6>
 800534c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005350:	f1ba 0f01 	cmp.w	sl, #1
 8005354:	dc01      	bgt.n	800535a <_printf_float+0x3b6>
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d536      	bpl.n	80053c8 <_printf_float+0x424>
 800535a:	2301      	movs	r3, #1
 800535c:	4642      	mov	r2, r8
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae78 	beq.w	800505a <_printf_float+0xb6>
 800536a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	f43f ae70 	beq.w	800505a <_printf_float+0xb6>
 800537a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005386:	f7fb fbb7 	bl	8000af8 <__aeabi_dcmpeq>
 800538a:	b9c0      	cbnz	r0, 80053be <_printf_float+0x41a>
 800538c:	4653      	mov	r3, sl
 800538e:	f108 0201 	add.w	r2, r8, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d10c      	bne.n	80053b6 <_printf_float+0x412>
 800539c:	e65d      	b.n	800505a <_printf_float+0xb6>
 800539e:	2301      	movs	r3, #1
 80053a0:	465a      	mov	r2, fp
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae56 	beq.w	800505a <_printf_float+0xb6>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	45d0      	cmp	r8, sl
 80053b4:	dbf3      	blt.n	800539e <_printf_float+0x3fa>
 80053b6:	464b      	mov	r3, r9
 80053b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053bc:	e6df      	b.n	800517e <_printf_float+0x1da>
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	f104 0b1a 	add.w	fp, r4, #26
 80053c6:	e7f4      	b.n	80053b2 <_printf_float+0x40e>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4642      	mov	r2, r8
 80053cc:	e7e1      	b.n	8005392 <_printf_float+0x3ee>
 80053ce:	2301      	movs	r3, #1
 80053d0:	464a      	mov	r2, r9
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f ae3e 	beq.w	800505a <_printf_float+0xb6>
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	4543      	cmp	r3, r8
 80053ea:	dcf0      	bgt.n	80053ce <_printf_float+0x42a>
 80053ec:	e6fc      	b.n	80051e8 <_printf_float+0x244>
 80053ee:	f04f 0800 	mov.w	r8, #0
 80053f2:	f104 0919 	add.w	r9, r4, #25
 80053f6:	e7f4      	b.n	80053e2 <_printf_float+0x43e>

080053f8 <_printf_common>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	4698      	mov	r8, r3
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005408:	4293      	cmp	r3, r2
 800540a:	bfb8      	it	lt
 800540c:	4613      	movlt	r3, r2
 800540e:	6033      	str	r3, [r6, #0]
 8005410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005414:	4607      	mov	r7, r0
 8005416:	460c      	mov	r4, r1
 8005418:	b10a      	cbz	r2, 800541e <_printf_common+0x26>
 800541a:	3301      	adds	r3, #1
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0699      	lsls	r1, r3, #26
 8005422:	bf42      	ittt	mi
 8005424:	6833      	ldrmi	r3, [r6, #0]
 8005426:	3302      	addmi	r3, #2
 8005428:	6033      	strmi	r3, [r6, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	f015 0506 	ands.w	r5, r5, #6
 8005430:	d106      	bne.n	8005440 <_printf_common+0x48>
 8005432:	f104 0a19 	add.w	sl, r4, #25
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	6832      	ldr	r2, [r6, #0]
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ab      	cmp	r3, r5
 800543e:	dc26      	bgt.n	800548e <_printf_common+0x96>
 8005440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	3b00      	subs	r3, #0
 8005448:	bf18      	it	ne
 800544a:	2301      	movne	r3, #1
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d42b      	bmi.n	80054a8 <_printf_common+0xb0>
 8005450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005454:	4641      	mov	r1, r8
 8005456:	4638      	mov	r0, r7
 8005458:	47c8      	blx	r9
 800545a:	3001      	adds	r0, #1
 800545c:	d01e      	beq.n	800549c <_printf_common+0xa4>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	6922      	ldr	r2, [r4, #16]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf02      	ittt	eq
 800546a:	68e5      	ldreq	r5, [r4, #12]
 800546c:	6833      	ldreq	r3, [r6, #0]
 800546e:	1aed      	subeq	r5, r5, r3
 8005470:	68a3      	ldr	r3, [r4, #8]
 8005472:	bf0c      	ite	eq
 8005474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005478:	2500      	movne	r5, #0
 800547a:	4293      	cmp	r3, r2
 800547c:	bfc4      	itt	gt
 800547e:	1a9b      	subgt	r3, r3, r2
 8005480:	18ed      	addgt	r5, r5, r3
 8005482:	2600      	movs	r6, #0
 8005484:	341a      	adds	r4, #26
 8005486:	42b5      	cmp	r5, r6
 8005488:	d11a      	bne.n	80054c0 <_printf_common+0xc8>
 800548a:	2000      	movs	r0, #0
 800548c:	e008      	b.n	80054a0 <_printf_common+0xa8>
 800548e:	2301      	movs	r3, #1
 8005490:	4652      	mov	r2, sl
 8005492:	4641      	mov	r1, r8
 8005494:	4638      	mov	r0, r7
 8005496:	47c8      	blx	r9
 8005498:	3001      	adds	r0, #1
 800549a:	d103      	bne.n	80054a4 <_printf_common+0xac>
 800549c:	f04f 30ff 	mov.w	r0, #4294967295
 80054a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a4:	3501      	adds	r5, #1
 80054a6:	e7c6      	b.n	8005436 <_printf_common+0x3e>
 80054a8:	18e1      	adds	r1, r4, r3
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	2030      	movs	r0, #48	@ 0x30
 80054ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054b2:	4422      	add	r2, r4
 80054b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054bc:	3302      	adds	r3, #2
 80054be:	e7c7      	b.n	8005450 <_printf_common+0x58>
 80054c0:	2301      	movs	r3, #1
 80054c2:	4622      	mov	r2, r4
 80054c4:	4641      	mov	r1, r8
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c8      	blx	r9
 80054ca:	3001      	adds	r0, #1
 80054cc:	d0e6      	beq.n	800549c <_printf_common+0xa4>
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7d9      	b.n	8005486 <_printf_common+0x8e>
	...

080054d4 <_printf_i>:
 80054d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	7e0f      	ldrb	r7, [r1, #24]
 80054da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054dc:	2f78      	cmp	r7, #120	@ 0x78
 80054de:	4691      	mov	r9, r2
 80054e0:	4680      	mov	r8, r0
 80054e2:	460c      	mov	r4, r1
 80054e4:	469a      	mov	sl, r3
 80054e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054ea:	d807      	bhi.n	80054fc <_printf_i+0x28>
 80054ec:	2f62      	cmp	r7, #98	@ 0x62
 80054ee:	d80a      	bhi.n	8005506 <_printf_i+0x32>
 80054f0:	2f00      	cmp	r7, #0
 80054f2:	f000 80d1 	beq.w	8005698 <_printf_i+0x1c4>
 80054f6:	2f58      	cmp	r7, #88	@ 0x58
 80054f8:	f000 80b8 	beq.w	800566c <_printf_i+0x198>
 80054fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005504:	e03a      	b.n	800557c <_printf_i+0xa8>
 8005506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800550a:	2b15      	cmp	r3, #21
 800550c:	d8f6      	bhi.n	80054fc <_printf_i+0x28>
 800550e:	a101      	add	r1, pc, #4	@ (adr r1, 8005514 <_printf_i+0x40>)
 8005510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005514:	0800556d 	.word	0x0800556d
 8005518:	08005581 	.word	0x08005581
 800551c:	080054fd 	.word	0x080054fd
 8005520:	080054fd 	.word	0x080054fd
 8005524:	080054fd 	.word	0x080054fd
 8005528:	080054fd 	.word	0x080054fd
 800552c:	08005581 	.word	0x08005581
 8005530:	080054fd 	.word	0x080054fd
 8005534:	080054fd 	.word	0x080054fd
 8005538:	080054fd 	.word	0x080054fd
 800553c:	080054fd 	.word	0x080054fd
 8005540:	0800567f 	.word	0x0800567f
 8005544:	080055ab 	.word	0x080055ab
 8005548:	08005639 	.word	0x08005639
 800554c:	080054fd 	.word	0x080054fd
 8005550:	080054fd 	.word	0x080054fd
 8005554:	080056a1 	.word	0x080056a1
 8005558:	080054fd 	.word	0x080054fd
 800555c:	080055ab 	.word	0x080055ab
 8005560:	080054fd 	.word	0x080054fd
 8005564:	080054fd 	.word	0x080054fd
 8005568:	08005641 	.word	0x08005641
 800556c:	6833      	ldr	r3, [r6, #0]
 800556e:	1d1a      	adds	r2, r3, #4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6032      	str	r2, [r6, #0]
 8005574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800557c:	2301      	movs	r3, #1
 800557e:	e09c      	b.n	80056ba <_printf_i+0x1e6>
 8005580:	6833      	ldr	r3, [r6, #0]
 8005582:	6820      	ldr	r0, [r4, #0]
 8005584:	1d19      	adds	r1, r3, #4
 8005586:	6031      	str	r1, [r6, #0]
 8005588:	0606      	lsls	r6, r0, #24
 800558a:	d501      	bpl.n	8005590 <_printf_i+0xbc>
 800558c:	681d      	ldr	r5, [r3, #0]
 800558e:	e003      	b.n	8005598 <_printf_i+0xc4>
 8005590:	0645      	lsls	r5, r0, #25
 8005592:	d5fb      	bpl.n	800558c <_printf_i+0xb8>
 8005594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005598:	2d00      	cmp	r5, #0
 800559a:	da03      	bge.n	80055a4 <_printf_i+0xd0>
 800559c:	232d      	movs	r3, #45	@ 0x2d
 800559e:	426d      	negs	r5, r5
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a4:	4858      	ldr	r0, [pc, #352]	@ (8005708 <_printf_i+0x234>)
 80055a6:	230a      	movs	r3, #10
 80055a8:	e011      	b.n	80055ce <_printf_i+0xfa>
 80055aa:	6821      	ldr	r1, [r4, #0]
 80055ac:	6833      	ldr	r3, [r6, #0]
 80055ae:	0608      	lsls	r0, r1, #24
 80055b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80055b4:	d402      	bmi.n	80055bc <_printf_i+0xe8>
 80055b6:	0649      	lsls	r1, r1, #25
 80055b8:	bf48      	it	mi
 80055ba:	b2ad      	uxthmi	r5, r5
 80055bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80055be:	4852      	ldr	r0, [pc, #328]	@ (8005708 <_printf_i+0x234>)
 80055c0:	6033      	str	r3, [r6, #0]
 80055c2:	bf14      	ite	ne
 80055c4:	230a      	movne	r3, #10
 80055c6:	2308      	moveq	r3, #8
 80055c8:	2100      	movs	r1, #0
 80055ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055ce:	6866      	ldr	r6, [r4, #4]
 80055d0:	60a6      	str	r6, [r4, #8]
 80055d2:	2e00      	cmp	r6, #0
 80055d4:	db05      	blt.n	80055e2 <_printf_i+0x10e>
 80055d6:	6821      	ldr	r1, [r4, #0]
 80055d8:	432e      	orrs	r6, r5
 80055da:	f021 0104 	bic.w	r1, r1, #4
 80055de:	6021      	str	r1, [r4, #0]
 80055e0:	d04b      	beq.n	800567a <_printf_i+0x1a6>
 80055e2:	4616      	mov	r6, r2
 80055e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80055e8:	fb03 5711 	mls	r7, r3, r1, r5
 80055ec:	5dc7      	ldrb	r7, [r0, r7]
 80055ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055f2:	462f      	mov	r7, r5
 80055f4:	42bb      	cmp	r3, r7
 80055f6:	460d      	mov	r5, r1
 80055f8:	d9f4      	bls.n	80055e4 <_printf_i+0x110>
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d10b      	bne.n	8005616 <_printf_i+0x142>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	07df      	lsls	r7, r3, #31
 8005602:	d508      	bpl.n	8005616 <_printf_i+0x142>
 8005604:	6923      	ldr	r3, [r4, #16]
 8005606:	6861      	ldr	r1, [r4, #4]
 8005608:	4299      	cmp	r1, r3
 800560a:	bfde      	ittt	le
 800560c:	2330      	movle	r3, #48	@ 0x30
 800560e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005612:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005616:	1b92      	subs	r2, r2, r6
 8005618:	6122      	str	r2, [r4, #16]
 800561a:	f8cd a000 	str.w	sl, [sp]
 800561e:	464b      	mov	r3, r9
 8005620:	aa03      	add	r2, sp, #12
 8005622:	4621      	mov	r1, r4
 8005624:	4640      	mov	r0, r8
 8005626:	f7ff fee7 	bl	80053f8 <_printf_common>
 800562a:	3001      	adds	r0, #1
 800562c:	d14a      	bne.n	80056c4 <_printf_i+0x1f0>
 800562e:	f04f 30ff 	mov.w	r0, #4294967295
 8005632:	b004      	add	sp, #16
 8005634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	f043 0320 	orr.w	r3, r3, #32
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	4832      	ldr	r0, [pc, #200]	@ (800570c <_printf_i+0x238>)
 8005642:	2778      	movs	r7, #120	@ 0x78
 8005644:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	6831      	ldr	r1, [r6, #0]
 800564c:	061f      	lsls	r7, r3, #24
 800564e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005652:	d402      	bmi.n	800565a <_printf_i+0x186>
 8005654:	065f      	lsls	r7, r3, #25
 8005656:	bf48      	it	mi
 8005658:	b2ad      	uxthmi	r5, r5
 800565a:	6031      	str	r1, [r6, #0]
 800565c:	07d9      	lsls	r1, r3, #31
 800565e:	bf44      	itt	mi
 8005660:	f043 0320 	orrmi.w	r3, r3, #32
 8005664:	6023      	strmi	r3, [r4, #0]
 8005666:	b11d      	cbz	r5, 8005670 <_printf_i+0x19c>
 8005668:	2310      	movs	r3, #16
 800566a:	e7ad      	b.n	80055c8 <_printf_i+0xf4>
 800566c:	4826      	ldr	r0, [pc, #152]	@ (8005708 <_printf_i+0x234>)
 800566e:	e7e9      	b.n	8005644 <_printf_i+0x170>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f023 0320 	bic.w	r3, r3, #32
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	e7f6      	b.n	8005668 <_printf_i+0x194>
 800567a:	4616      	mov	r6, r2
 800567c:	e7bd      	b.n	80055fa <_printf_i+0x126>
 800567e:	6833      	ldr	r3, [r6, #0]
 8005680:	6825      	ldr	r5, [r4, #0]
 8005682:	6961      	ldr	r1, [r4, #20]
 8005684:	1d18      	adds	r0, r3, #4
 8005686:	6030      	str	r0, [r6, #0]
 8005688:	062e      	lsls	r6, r5, #24
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	d501      	bpl.n	8005692 <_printf_i+0x1be>
 800568e:	6019      	str	r1, [r3, #0]
 8005690:	e002      	b.n	8005698 <_printf_i+0x1c4>
 8005692:	0668      	lsls	r0, r5, #25
 8005694:	d5fb      	bpl.n	800568e <_printf_i+0x1ba>
 8005696:	8019      	strh	r1, [r3, #0]
 8005698:	2300      	movs	r3, #0
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	4616      	mov	r6, r2
 800569e:	e7bc      	b.n	800561a <_printf_i+0x146>
 80056a0:	6833      	ldr	r3, [r6, #0]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	6032      	str	r2, [r6, #0]
 80056a6:	681e      	ldr	r6, [r3, #0]
 80056a8:	6862      	ldr	r2, [r4, #4]
 80056aa:	2100      	movs	r1, #0
 80056ac:	4630      	mov	r0, r6
 80056ae:	f7fa fda7 	bl	8000200 <memchr>
 80056b2:	b108      	cbz	r0, 80056b8 <_printf_i+0x1e4>
 80056b4:	1b80      	subs	r0, r0, r6
 80056b6:	6060      	str	r0, [r4, #4]
 80056b8:	6863      	ldr	r3, [r4, #4]
 80056ba:	6123      	str	r3, [r4, #16]
 80056bc:	2300      	movs	r3, #0
 80056be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c2:	e7aa      	b.n	800561a <_printf_i+0x146>
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	4632      	mov	r2, r6
 80056c8:	4649      	mov	r1, r9
 80056ca:	4640      	mov	r0, r8
 80056cc:	47d0      	blx	sl
 80056ce:	3001      	adds	r0, #1
 80056d0:	d0ad      	beq.n	800562e <_printf_i+0x15a>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	079b      	lsls	r3, r3, #30
 80056d6:	d413      	bmi.n	8005700 <_printf_i+0x22c>
 80056d8:	68e0      	ldr	r0, [r4, #12]
 80056da:	9b03      	ldr	r3, [sp, #12]
 80056dc:	4298      	cmp	r0, r3
 80056de:	bfb8      	it	lt
 80056e0:	4618      	movlt	r0, r3
 80056e2:	e7a6      	b.n	8005632 <_printf_i+0x15e>
 80056e4:	2301      	movs	r3, #1
 80056e6:	4632      	mov	r2, r6
 80056e8:	4649      	mov	r1, r9
 80056ea:	4640      	mov	r0, r8
 80056ec:	47d0      	blx	sl
 80056ee:	3001      	adds	r0, #1
 80056f0:	d09d      	beq.n	800562e <_printf_i+0x15a>
 80056f2:	3501      	adds	r5, #1
 80056f4:	68e3      	ldr	r3, [r4, #12]
 80056f6:	9903      	ldr	r1, [sp, #12]
 80056f8:	1a5b      	subs	r3, r3, r1
 80056fa:	42ab      	cmp	r3, r5
 80056fc:	dcf2      	bgt.n	80056e4 <_printf_i+0x210>
 80056fe:	e7eb      	b.n	80056d8 <_printf_i+0x204>
 8005700:	2500      	movs	r5, #0
 8005702:	f104 0619 	add.w	r6, r4, #25
 8005706:	e7f5      	b.n	80056f4 <_printf_i+0x220>
 8005708:	08009b3e 	.word	0x08009b3e
 800570c:	08009b4f 	.word	0x08009b4f

08005710 <_scanf_float>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	b087      	sub	sp, #28
 8005716:	4691      	mov	r9, r2
 8005718:	9303      	str	r3, [sp, #12]
 800571a:	688b      	ldr	r3, [r1, #8]
 800571c:	1e5a      	subs	r2, r3, #1
 800571e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005722:	bf81      	itttt	hi
 8005724:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005728:	eb03 0b05 	addhi.w	fp, r3, r5
 800572c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005730:	608b      	strhi	r3, [r1, #8]
 8005732:	680b      	ldr	r3, [r1, #0]
 8005734:	460a      	mov	r2, r1
 8005736:	f04f 0500 	mov.w	r5, #0
 800573a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800573e:	f842 3b1c 	str.w	r3, [r2], #28
 8005742:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005746:	4680      	mov	r8, r0
 8005748:	460c      	mov	r4, r1
 800574a:	bf98      	it	ls
 800574c:	f04f 0b00 	movls.w	fp, #0
 8005750:	9201      	str	r2, [sp, #4]
 8005752:	4616      	mov	r6, r2
 8005754:	46aa      	mov	sl, r5
 8005756:	462f      	mov	r7, r5
 8005758:	9502      	str	r5, [sp, #8]
 800575a:	68a2      	ldr	r2, [r4, #8]
 800575c:	b15a      	cbz	r2, 8005776 <_scanf_float+0x66>
 800575e:	f8d9 3000 	ldr.w	r3, [r9]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b4e      	cmp	r3, #78	@ 0x4e
 8005766:	d863      	bhi.n	8005830 <_scanf_float+0x120>
 8005768:	2b40      	cmp	r3, #64	@ 0x40
 800576a:	d83b      	bhi.n	80057e4 <_scanf_float+0xd4>
 800576c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005770:	b2c8      	uxtb	r0, r1
 8005772:	280e      	cmp	r0, #14
 8005774:	d939      	bls.n	80057ea <_scanf_float+0xda>
 8005776:	b11f      	cbz	r7, 8005780 <_scanf_float+0x70>
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800577e:	6023      	str	r3, [r4, #0]
 8005780:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005784:	f1ba 0f01 	cmp.w	sl, #1
 8005788:	f200 8114 	bhi.w	80059b4 <_scanf_float+0x2a4>
 800578c:	9b01      	ldr	r3, [sp, #4]
 800578e:	429e      	cmp	r6, r3
 8005790:	f200 8105 	bhi.w	800599e <_scanf_float+0x28e>
 8005794:	2001      	movs	r0, #1
 8005796:	b007      	add	sp, #28
 8005798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80057a0:	2a0d      	cmp	r2, #13
 80057a2:	d8e8      	bhi.n	8005776 <_scanf_float+0x66>
 80057a4:	a101      	add	r1, pc, #4	@ (adr r1, 80057ac <_scanf_float+0x9c>)
 80057a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080058f5 	.word	0x080058f5
 80057b0:	08005777 	.word	0x08005777
 80057b4:	08005777 	.word	0x08005777
 80057b8:	08005777 	.word	0x08005777
 80057bc:	08005951 	.word	0x08005951
 80057c0:	0800592b 	.word	0x0800592b
 80057c4:	08005777 	.word	0x08005777
 80057c8:	08005777 	.word	0x08005777
 80057cc:	08005903 	.word	0x08005903
 80057d0:	08005777 	.word	0x08005777
 80057d4:	08005777 	.word	0x08005777
 80057d8:	08005777 	.word	0x08005777
 80057dc:	08005777 	.word	0x08005777
 80057e0:	080058bf 	.word	0x080058bf
 80057e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80057e8:	e7da      	b.n	80057a0 <_scanf_float+0x90>
 80057ea:	290e      	cmp	r1, #14
 80057ec:	d8c3      	bhi.n	8005776 <_scanf_float+0x66>
 80057ee:	a001      	add	r0, pc, #4	@ (adr r0, 80057f4 <_scanf_float+0xe4>)
 80057f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057f4:	080058af 	.word	0x080058af
 80057f8:	08005777 	.word	0x08005777
 80057fc:	080058af 	.word	0x080058af
 8005800:	0800593f 	.word	0x0800593f
 8005804:	08005777 	.word	0x08005777
 8005808:	08005851 	.word	0x08005851
 800580c:	08005895 	.word	0x08005895
 8005810:	08005895 	.word	0x08005895
 8005814:	08005895 	.word	0x08005895
 8005818:	08005895 	.word	0x08005895
 800581c:	08005895 	.word	0x08005895
 8005820:	08005895 	.word	0x08005895
 8005824:	08005895 	.word	0x08005895
 8005828:	08005895 	.word	0x08005895
 800582c:	08005895 	.word	0x08005895
 8005830:	2b6e      	cmp	r3, #110	@ 0x6e
 8005832:	d809      	bhi.n	8005848 <_scanf_float+0x138>
 8005834:	2b60      	cmp	r3, #96	@ 0x60
 8005836:	d8b1      	bhi.n	800579c <_scanf_float+0x8c>
 8005838:	2b54      	cmp	r3, #84	@ 0x54
 800583a:	d07b      	beq.n	8005934 <_scanf_float+0x224>
 800583c:	2b59      	cmp	r3, #89	@ 0x59
 800583e:	d19a      	bne.n	8005776 <_scanf_float+0x66>
 8005840:	2d07      	cmp	r5, #7
 8005842:	d198      	bne.n	8005776 <_scanf_float+0x66>
 8005844:	2508      	movs	r5, #8
 8005846:	e02f      	b.n	80058a8 <_scanf_float+0x198>
 8005848:	2b74      	cmp	r3, #116	@ 0x74
 800584a:	d073      	beq.n	8005934 <_scanf_float+0x224>
 800584c:	2b79      	cmp	r3, #121	@ 0x79
 800584e:	e7f6      	b.n	800583e <_scanf_float+0x12e>
 8005850:	6821      	ldr	r1, [r4, #0]
 8005852:	05c8      	lsls	r0, r1, #23
 8005854:	d51e      	bpl.n	8005894 <_scanf_float+0x184>
 8005856:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800585a:	6021      	str	r1, [r4, #0]
 800585c:	3701      	adds	r7, #1
 800585e:	f1bb 0f00 	cmp.w	fp, #0
 8005862:	d003      	beq.n	800586c <_scanf_float+0x15c>
 8005864:	3201      	adds	r2, #1
 8005866:	f10b 3bff 	add.w	fp, fp, #4294967295
 800586a:	60a2      	str	r2, [r4, #8]
 800586c:	68a3      	ldr	r3, [r4, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	6923      	ldr	r3, [r4, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800587c:	3b01      	subs	r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	f8c9 3004 	str.w	r3, [r9, #4]
 8005884:	f340 8082 	ble.w	800598c <_scanf_float+0x27c>
 8005888:	f8d9 3000 	ldr.w	r3, [r9]
 800588c:	3301      	adds	r3, #1
 800588e:	f8c9 3000 	str.w	r3, [r9]
 8005892:	e762      	b.n	800575a <_scanf_float+0x4a>
 8005894:	eb1a 0105 	adds.w	r1, sl, r5
 8005898:	f47f af6d 	bne.w	8005776 <_scanf_float+0x66>
 800589c:	6822      	ldr	r2, [r4, #0]
 800589e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80058a2:	6022      	str	r2, [r4, #0]
 80058a4:	460d      	mov	r5, r1
 80058a6:	468a      	mov	sl, r1
 80058a8:	f806 3b01 	strb.w	r3, [r6], #1
 80058ac:	e7de      	b.n	800586c <_scanf_float+0x15c>
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	0610      	lsls	r0, r2, #24
 80058b2:	f57f af60 	bpl.w	8005776 <_scanf_float+0x66>
 80058b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058ba:	6022      	str	r2, [r4, #0]
 80058bc:	e7f4      	b.n	80058a8 <_scanf_float+0x198>
 80058be:	f1ba 0f00 	cmp.w	sl, #0
 80058c2:	d10c      	bne.n	80058de <_scanf_float+0x1ce>
 80058c4:	b977      	cbnz	r7, 80058e4 <_scanf_float+0x1d4>
 80058c6:	6822      	ldr	r2, [r4, #0]
 80058c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80058d0:	d108      	bne.n	80058e4 <_scanf_float+0x1d4>
 80058d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058d6:	6022      	str	r2, [r4, #0]
 80058d8:	f04f 0a01 	mov.w	sl, #1
 80058dc:	e7e4      	b.n	80058a8 <_scanf_float+0x198>
 80058de:	f1ba 0f02 	cmp.w	sl, #2
 80058e2:	d050      	beq.n	8005986 <_scanf_float+0x276>
 80058e4:	2d01      	cmp	r5, #1
 80058e6:	d002      	beq.n	80058ee <_scanf_float+0x1de>
 80058e8:	2d04      	cmp	r5, #4
 80058ea:	f47f af44 	bne.w	8005776 <_scanf_float+0x66>
 80058ee:	3501      	adds	r5, #1
 80058f0:	b2ed      	uxtb	r5, r5
 80058f2:	e7d9      	b.n	80058a8 <_scanf_float+0x198>
 80058f4:	f1ba 0f01 	cmp.w	sl, #1
 80058f8:	f47f af3d 	bne.w	8005776 <_scanf_float+0x66>
 80058fc:	f04f 0a02 	mov.w	sl, #2
 8005900:	e7d2      	b.n	80058a8 <_scanf_float+0x198>
 8005902:	b975      	cbnz	r5, 8005922 <_scanf_float+0x212>
 8005904:	2f00      	cmp	r7, #0
 8005906:	f47f af37 	bne.w	8005778 <_scanf_float+0x68>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005910:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005914:	f040 8103 	bne.w	8005b1e <_scanf_float+0x40e>
 8005918:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800591c:	6022      	str	r2, [r4, #0]
 800591e:	2501      	movs	r5, #1
 8005920:	e7c2      	b.n	80058a8 <_scanf_float+0x198>
 8005922:	2d03      	cmp	r5, #3
 8005924:	d0e3      	beq.n	80058ee <_scanf_float+0x1de>
 8005926:	2d05      	cmp	r5, #5
 8005928:	e7df      	b.n	80058ea <_scanf_float+0x1da>
 800592a:	2d02      	cmp	r5, #2
 800592c:	f47f af23 	bne.w	8005776 <_scanf_float+0x66>
 8005930:	2503      	movs	r5, #3
 8005932:	e7b9      	b.n	80058a8 <_scanf_float+0x198>
 8005934:	2d06      	cmp	r5, #6
 8005936:	f47f af1e 	bne.w	8005776 <_scanf_float+0x66>
 800593a:	2507      	movs	r5, #7
 800593c:	e7b4      	b.n	80058a8 <_scanf_float+0x198>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	0591      	lsls	r1, r2, #22
 8005942:	f57f af18 	bpl.w	8005776 <_scanf_float+0x66>
 8005946:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800594a:	6022      	str	r2, [r4, #0]
 800594c:	9702      	str	r7, [sp, #8]
 800594e:	e7ab      	b.n	80058a8 <_scanf_float+0x198>
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005956:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800595a:	d005      	beq.n	8005968 <_scanf_float+0x258>
 800595c:	0550      	lsls	r0, r2, #21
 800595e:	f57f af0a 	bpl.w	8005776 <_scanf_float+0x66>
 8005962:	2f00      	cmp	r7, #0
 8005964:	f000 80db 	beq.w	8005b1e <_scanf_float+0x40e>
 8005968:	0591      	lsls	r1, r2, #22
 800596a:	bf58      	it	pl
 800596c:	9902      	ldrpl	r1, [sp, #8]
 800596e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005972:	bf58      	it	pl
 8005974:	1a79      	subpl	r1, r7, r1
 8005976:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800597a:	bf58      	it	pl
 800597c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005980:	6022      	str	r2, [r4, #0]
 8005982:	2700      	movs	r7, #0
 8005984:	e790      	b.n	80058a8 <_scanf_float+0x198>
 8005986:	f04f 0a03 	mov.w	sl, #3
 800598a:	e78d      	b.n	80058a8 <_scanf_float+0x198>
 800598c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005990:	4649      	mov	r1, r9
 8005992:	4640      	mov	r0, r8
 8005994:	4798      	blx	r3
 8005996:	2800      	cmp	r0, #0
 8005998:	f43f aedf 	beq.w	800575a <_scanf_float+0x4a>
 800599c:	e6eb      	b.n	8005776 <_scanf_float+0x66>
 800599e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059a6:	464a      	mov	r2, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	4798      	blx	r3
 80059ac:	6923      	ldr	r3, [r4, #16]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	6123      	str	r3, [r4, #16]
 80059b2:	e6eb      	b.n	800578c <_scanf_float+0x7c>
 80059b4:	1e6b      	subs	r3, r5, #1
 80059b6:	2b06      	cmp	r3, #6
 80059b8:	d824      	bhi.n	8005a04 <_scanf_float+0x2f4>
 80059ba:	2d02      	cmp	r5, #2
 80059bc:	d836      	bhi.n	8005a2c <_scanf_float+0x31c>
 80059be:	9b01      	ldr	r3, [sp, #4]
 80059c0:	429e      	cmp	r6, r3
 80059c2:	f67f aee7 	bls.w	8005794 <_scanf_float+0x84>
 80059c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059ce:	464a      	mov	r2, r9
 80059d0:	4640      	mov	r0, r8
 80059d2:	4798      	blx	r3
 80059d4:	6923      	ldr	r3, [r4, #16]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	6123      	str	r3, [r4, #16]
 80059da:	e7f0      	b.n	80059be <_scanf_float+0x2ae>
 80059dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80059e4:	464a      	mov	r2, r9
 80059e6:	4640      	mov	r0, r8
 80059e8:	4798      	blx	r3
 80059ea:	6923      	ldr	r3, [r4, #16]
 80059ec:	3b01      	subs	r3, #1
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059f4:	fa5f fa8a 	uxtb.w	sl, sl
 80059f8:	f1ba 0f02 	cmp.w	sl, #2
 80059fc:	d1ee      	bne.n	80059dc <_scanf_float+0x2cc>
 80059fe:	3d03      	subs	r5, #3
 8005a00:	b2ed      	uxtb	r5, r5
 8005a02:	1b76      	subs	r6, r6, r5
 8005a04:	6823      	ldr	r3, [r4, #0]
 8005a06:	05da      	lsls	r2, r3, #23
 8005a08:	d530      	bpl.n	8005a6c <_scanf_float+0x35c>
 8005a0a:	055b      	lsls	r3, r3, #21
 8005a0c:	d511      	bpl.n	8005a32 <_scanf_float+0x322>
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	429e      	cmp	r6, r3
 8005a12:	f67f aebf 	bls.w	8005794 <_scanf_float+0x84>
 8005a16:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a1a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005a1e:	464a      	mov	r2, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	4798      	blx	r3
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6123      	str	r3, [r4, #16]
 8005a2a:	e7f0      	b.n	8005a0e <_scanf_float+0x2fe>
 8005a2c:	46aa      	mov	sl, r5
 8005a2e:	46b3      	mov	fp, r6
 8005a30:	e7de      	b.n	80059f0 <_scanf_float+0x2e0>
 8005a32:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	2965      	cmp	r1, #101	@ 0x65
 8005a3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a3e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	d00c      	beq.n	8005a60 <_scanf_float+0x350>
 8005a46:	2945      	cmp	r1, #69	@ 0x45
 8005a48:	d00a      	beq.n	8005a60 <_scanf_float+0x350>
 8005a4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a4e:	464a      	mov	r2, r9
 8005a50:	4640      	mov	r0, r8
 8005a52:	4798      	blx	r3
 8005a54:	6923      	ldr	r3, [r4, #16]
 8005a56:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	1eb5      	subs	r5, r6, #2
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a64:	464a      	mov	r2, r9
 8005a66:	4640      	mov	r0, r8
 8005a68:	4798      	blx	r3
 8005a6a:	462e      	mov	r6, r5
 8005a6c:	6822      	ldr	r2, [r4, #0]
 8005a6e:	f012 0210 	ands.w	r2, r2, #16
 8005a72:	d001      	beq.n	8005a78 <_scanf_float+0x368>
 8005a74:	2000      	movs	r0, #0
 8005a76:	e68e      	b.n	8005796 <_scanf_float+0x86>
 8005a78:	7032      	strb	r2, [r6, #0]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a84:	d125      	bne.n	8005ad2 <_scanf_float+0x3c2>
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	429f      	cmp	r7, r3
 8005a8a:	d00a      	beq.n	8005aa2 <_scanf_float+0x392>
 8005a8c:	1bda      	subs	r2, r3, r7
 8005a8e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a92:	429e      	cmp	r6, r3
 8005a94:	bf28      	it	cs
 8005a96:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a9a:	4922      	ldr	r1, [pc, #136]	@ (8005b24 <_scanf_float+0x414>)
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f000 f97f 	bl	8005da0 <siprintf>
 8005aa2:	9901      	ldr	r1, [sp, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	f002 fdc6 	bl	8008638 <_strtod_r>
 8005aac:	9b03      	ldr	r3, [sp, #12]
 8005aae:	6821      	ldr	r1, [r4, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f011 0f02 	tst.w	r1, #2
 8005ab6:	ec57 6b10 	vmov	r6, r7, d0
 8005aba:	f103 0204 	add.w	r2, r3, #4
 8005abe:	d015      	beq.n	8005aec <_scanf_float+0x3dc>
 8005ac0:	9903      	ldr	r1, [sp, #12]
 8005ac2:	600a      	str	r2, [r1, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	e9c3 6700 	strd	r6, r7, [r3]
 8005aca:	68e3      	ldr	r3, [r4, #12]
 8005acc:	3301      	adds	r3, #1
 8005ace:	60e3      	str	r3, [r4, #12]
 8005ad0:	e7d0      	b.n	8005a74 <_scanf_float+0x364>
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0e4      	beq.n	8005aa2 <_scanf_float+0x392>
 8005ad8:	9905      	ldr	r1, [sp, #20]
 8005ada:	230a      	movs	r3, #10
 8005adc:	3101      	adds	r1, #1
 8005ade:	4640      	mov	r0, r8
 8005ae0:	f002 fe2a 	bl	8008738 <_strtol_r>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	9e05      	ldr	r6, [sp, #20]
 8005ae8:	1ac2      	subs	r2, r0, r3
 8005aea:	e7d0      	b.n	8005a8e <_scanf_float+0x37e>
 8005aec:	f011 0f04 	tst.w	r1, #4
 8005af0:	9903      	ldr	r1, [sp, #12]
 8005af2:	600a      	str	r2, [r1, #0]
 8005af4:	d1e6      	bne.n	8005ac4 <_scanf_float+0x3b4>
 8005af6:	681d      	ldr	r5, [r3, #0]
 8005af8:	4632      	mov	r2, r6
 8005afa:	463b      	mov	r3, r7
 8005afc:	4630      	mov	r0, r6
 8005afe:	4639      	mov	r1, r7
 8005b00:	f7fb f82c 	bl	8000b5c <__aeabi_dcmpun>
 8005b04:	b128      	cbz	r0, 8005b12 <_scanf_float+0x402>
 8005b06:	4808      	ldr	r0, [pc, #32]	@ (8005b28 <_scanf_float+0x418>)
 8005b08:	f000 fb6c 	bl	80061e4 <nanf>
 8005b0c:	ed85 0a00 	vstr	s0, [r5]
 8005b10:	e7db      	b.n	8005aca <_scanf_float+0x3ba>
 8005b12:	4630      	mov	r0, r6
 8005b14:	4639      	mov	r1, r7
 8005b16:	f7fb f87f 	bl	8000c18 <__aeabi_d2f>
 8005b1a:	6028      	str	r0, [r5, #0]
 8005b1c:	e7d5      	b.n	8005aca <_scanf_float+0x3ba>
 8005b1e:	2700      	movs	r7, #0
 8005b20:	e62e      	b.n	8005780 <_scanf_float+0x70>
 8005b22:	bf00      	nop
 8005b24:	08009b60 	.word	0x08009b60
 8005b28:	08009c11 	.word	0x08009c11

08005b2c <std>:
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	b510      	push	{r4, lr}
 8005b30:	4604      	mov	r4, r0
 8005b32:	e9c0 3300 	strd	r3, r3, [r0]
 8005b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b3a:	6083      	str	r3, [r0, #8]
 8005b3c:	8181      	strh	r1, [r0, #12]
 8005b3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b40:	81c2      	strh	r2, [r0, #14]
 8005b42:	6183      	str	r3, [r0, #24]
 8005b44:	4619      	mov	r1, r3
 8005b46:	2208      	movs	r2, #8
 8005b48:	305c      	adds	r0, #92	@ 0x5c
 8005b4a:	f000 fa23 	bl	8005f94 <memset>
 8005b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b84 <std+0x58>)
 8005b50:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b52:	4b0d      	ldr	r3, [pc, #52]	@ (8005b88 <std+0x5c>)
 8005b54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <std+0x60>)
 8005b58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <std+0x64>)
 8005b5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b94 <std+0x68>)
 8005b60:	6224      	str	r4, [r4, #32]
 8005b62:	429c      	cmp	r4, r3
 8005b64:	d006      	beq.n	8005b74 <std+0x48>
 8005b66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b6a:	4294      	cmp	r4, r2
 8005b6c:	d002      	beq.n	8005b74 <std+0x48>
 8005b6e:	33d0      	adds	r3, #208	@ 0xd0
 8005b70:	429c      	cmp	r4, r3
 8005b72:	d105      	bne.n	8005b80 <std+0x54>
 8005b74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b7c:	f000 bb18 	b.w	80061b0 <__retarget_lock_init_recursive>
 8005b80:	bd10      	pop	{r4, pc}
 8005b82:	bf00      	nop
 8005b84:	08005de5 	.word	0x08005de5
 8005b88:	08005e07 	.word	0x08005e07
 8005b8c:	08005e3f 	.word	0x08005e3f
 8005b90:	08005e63 	.word	0x08005e63
 8005b94:	20000bcc 	.word	0x20000bcc

08005b98 <stdio_exit_handler>:
 8005b98:	4a02      	ldr	r2, [pc, #8]	@ (8005ba4 <stdio_exit_handler+0xc>)
 8005b9a:	4903      	ldr	r1, [pc, #12]	@ (8005ba8 <stdio_exit_handler+0x10>)
 8005b9c:	4803      	ldr	r0, [pc, #12]	@ (8005bac <stdio_exit_handler+0x14>)
 8005b9e:	f000 b869 	b.w	8005c74 <_fwalk_sglue>
 8005ba2:	bf00      	nop
 8005ba4:	20000010 	.word	0x20000010
 8005ba8:	08008d79 	.word	0x08008d79
 8005bac:	20000020 	.word	0x20000020

08005bb0 <cleanup_stdio>:
 8005bb0:	6841      	ldr	r1, [r0, #4]
 8005bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005be4 <cleanup_stdio+0x34>)
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	4604      	mov	r4, r0
 8005bba:	d001      	beq.n	8005bc0 <cleanup_stdio+0x10>
 8005bbc:	f003 f8dc 	bl	8008d78 <_fflush_r>
 8005bc0:	68a1      	ldr	r1, [r4, #8]
 8005bc2:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <cleanup_stdio+0x38>)
 8005bc4:	4299      	cmp	r1, r3
 8005bc6:	d002      	beq.n	8005bce <cleanup_stdio+0x1e>
 8005bc8:	4620      	mov	r0, r4
 8005bca:	f003 f8d5 	bl	8008d78 <_fflush_r>
 8005bce:	68e1      	ldr	r1, [r4, #12]
 8005bd0:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <cleanup_stdio+0x3c>)
 8005bd2:	4299      	cmp	r1, r3
 8005bd4:	d004      	beq.n	8005be0 <cleanup_stdio+0x30>
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bdc:	f003 b8cc 	b.w	8008d78 <_fflush_r>
 8005be0:	bd10      	pop	{r4, pc}
 8005be2:	bf00      	nop
 8005be4:	20000bcc 	.word	0x20000bcc
 8005be8:	20000c34 	.word	0x20000c34
 8005bec:	20000c9c 	.word	0x20000c9c

08005bf0 <global_stdio_init.part.0>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <global_stdio_init.part.0+0x30>)
 8005bf4:	4c0b      	ldr	r4, [pc, #44]	@ (8005c24 <global_stdio_init.part.0+0x34>)
 8005bf6:	4a0c      	ldr	r2, [pc, #48]	@ (8005c28 <global_stdio_init.part.0+0x38>)
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2104      	movs	r1, #4
 8005c00:	f7ff ff94 	bl	8005b2c <std>
 8005c04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005c08:	2201      	movs	r2, #1
 8005c0a:	2109      	movs	r1, #9
 8005c0c:	f7ff ff8e 	bl	8005b2c <std>
 8005c10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005c14:	2202      	movs	r2, #2
 8005c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c1a:	2112      	movs	r1, #18
 8005c1c:	f7ff bf86 	b.w	8005b2c <std>
 8005c20:	20000d04 	.word	0x20000d04
 8005c24:	20000bcc 	.word	0x20000bcc
 8005c28:	08005b99 	.word	0x08005b99

08005c2c <__sfp_lock_acquire>:
 8005c2c:	4801      	ldr	r0, [pc, #4]	@ (8005c34 <__sfp_lock_acquire+0x8>)
 8005c2e:	f000 bac0 	b.w	80061b2 <__retarget_lock_acquire_recursive>
 8005c32:	bf00      	nop
 8005c34:	20000d0d 	.word	0x20000d0d

08005c38 <__sfp_lock_release>:
 8005c38:	4801      	ldr	r0, [pc, #4]	@ (8005c40 <__sfp_lock_release+0x8>)
 8005c3a:	f000 babb 	b.w	80061b4 <__retarget_lock_release_recursive>
 8005c3e:	bf00      	nop
 8005c40:	20000d0d 	.word	0x20000d0d

08005c44 <__sinit>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	4604      	mov	r4, r0
 8005c48:	f7ff fff0 	bl	8005c2c <__sfp_lock_acquire>
 8005c4c:	6a23      	ldr	r3, [r4, #32]
 8005c4e:	b11b      	cbz	r3, 8005c58 <__sinit+0x14>
 8005c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c54:	f7ff bff0 	b.w	8005c38 <__sfp_lock_release>
 8005c58:	4b04      	ldr	r3, [pc, #16]	@ (8005c6c <__sinit+0x28>)
 8005c5a:	6223      	str	r3, [r4, #32]
 8005c5c:	4b04      	ldr	r3, [pc, #16]	@ (8005c70 <__sinit+0x2c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f5      	bne.n	8005c50 <__sinit+0xc>
 8005c64:	f7ff ffc4 	bl	8005bf0 <global_stdio_init.part.0>
 8005c68:	e7f2      	b.n	8005c50 <__sinit+0xc>
 8005c6a:	bf00      	nop
 8005c6c:	08005bb1 	.word	0x08005bb1
 8005c70:	20000d04 	.word	0x20000d04

08005c74 <_fwalk_sglue>:
 8005c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	2600      	movs	r6, #0
 8005c80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c84:	f1b9 0901 	subs.w	r9, r9, #1
 8005c88:	d505      	bpl.n	8005c96 <_fwalk_sglue+0x22>
 8005c8a:	6824      	ldr	r4, [r4, #0]
 8005c8c:	2c00      	cmp	r4, #0
 8005c8e:	d1f7      	bne.n	8005c80 <_fwalk_sglue+0xc>
 8005c90:	4630      	mov	r0, r6
 8005c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c96:	89ab      	ldrh	r3, [r5, #12]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d907      	bls.n	8005cac <_fwalk_sglue+0x38>
 8005c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	d003      	beq.n	8005cac <_fwalk_sglue+0x38>
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c0      	blx	r8
 8005caa:	4306      	orrs	r6, r0
 8005cac:	3568      	adds	r5, #104	@ 0x68
 8005cae:	e7e9      	b.n	8005c84 <_fwalk_sglue+0x10>

08005cb0 <iprintf>:
 8005cb0:	b40f      	push	{r0, r1, r2, r3}
 8005cb2:	b507      	push	{r0, r1, r2, lr}
 8005cb4:	4906      	ldr	r1, [pc, #24]	@ (8005cd0 <iprintf+0x20>)
 8005cb6:	ab04      	add	r3, sp, #16
 8005cb8:	6808      	ldr	r0, [r1, #0]
 8005cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cbe:	6881      	ldr	r1, [r0, #8]
 8005cc0:	9301      	str	r3, [sp, #4]
 8005cc2:	f002 febd 	bl	8008a40 <_vfiprintf_r>
 8005cc6:	b003      	add	sp, #12
 8005cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ccc:	b004      	add	sp, #16
 8005cce:	4770      	bx	lr
 8005cd0:	2000001c 	.word	0x2000001c

08005cd4 <putchar>:
 8005cd4:	4b02      	ldr	r3, [pc, #8]	@ (8005ce0 <putchar+0xc>)
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	6882      	ldr	r2, [r0, #8]
 8005cdc:	f003 b8e8 	b.w	8008eb0 <_putc_r>
 8005ce0:	2000001c 	.word	0x2000001c

08005ce4 <_puts_r>:
 8005ce4:	6a03      	ldr	r3, [r0, #32]
 8005ce6:	b570      	push	{r4, r5, r6, lr}
 8005ce8:	6884      	ldr	r4, [r0, #8]
 8005cea:	4605      	mov	r5, r0
 8005cec:	460e      	mov	r6, r1
 8005cee:	b90b      	cbnz	r3, 8005cf4 <_puts_r+0x10>
 8005cf0:	f7ff ffa8 	bl	8005c44 <__sinit>
 8005cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005cf6:	07db      	lsls	r3, r3, #31
 8005cf8:	d405      	bmi.n	8005d06 <_puts_r+0x22>
 8005cfa:	89a3      	ldrh	r3, [r4, #12]
 8005cfc:	0598      	lsls	r0, r3, #22
 8005cfe:	d402      	bmi.n	8005d06 <_puts_r+0x22>
 8005d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d02:	f000 fa56 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8005d06:	89a3      	ldrh	r3, [r4, #12]
 8005d08:	0719      	lsls	r1, r3, #28
 8005d0a:	d502      	bpl.n	8005d12 <_puts_r+0x2e>
 8005d0c:	6923      	ldr	r3, [r4, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d135      	bne.n	8005d7e <_puts_r+0x9a>
 8005d12:	4621      	mov	r1, r4
 8005d14:	4628      	mov	r0, r5
 8005d16:	f000 f8e7 	bl	8005ee8 <__swsetup_r>
 8005d1a:	b380      	cbz	r0, 8005d7e <_puts_r+0x9a>
 8005d1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005d20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d22:	07da      	lsls	r2, r3, #31
 8005d24:	d405      	bmi.n	8005d32 <_puts_r+0x4e>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	059b      	lsls	r3, r3, #22
 8005d2a:	d402      	bmi.n	8005d32 <_puts_r+0x4e>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d2e:	f000 fa41 	bl	80061b4 <__retarget_lock_release_recursive>
 8005d32:	4628      	mov	r0, r5
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da04      	bge.n	8005d44 <_puts_r+0x60>
 8005d3a:	69a2      	ldr	r2, [r4, #24]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	dc17      	bgt.n	8005d70 <_puts_r+0x8c>
 8005d40:	290a      	cmp	r1, #10
 8005d42:	d015      	beq.n	8005d70 <_puts_r+0x8c>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	6022      	str	r2, [r4, #0]
 8005d4a:	7019      	strb	r1, [r3, #0]
 8005d4c:	68a3      	ldr	r3, [r4, #8]
 8005d4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d52:	3b01      	subs	r3, #1
 8005d54:	60a3      	str	r3, [r4, #8]
 8005d56:	2900      	cmp	r1, #0
 8005d58:	d1ed      	bne.n	8005d36 <_puts_r+0x52>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	da11      	bge.n	8005d82 <_puts_r+0x9e>
 8005d5e:	4622      	mov	r2, r4
 8005d60:	210a      	movs	r1, #10
 8005d62:	4628      	mov	r0, r5
 8005d64:	f000 f881 	bl	8005e6a <__swbuf_r>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d0d7      	beq.n	8005d1c <_puts_r+0x38>
 8005d6c:	250a      	movs	r5, #10
 8005d6e:	e7d7      	b.n	8005d20 <_puts_r+0x3c>
 8005d70:	4622      	mov	r2, r4
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 f879 	bl	8005e6a <__swbuf_r>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d1e7      	bne.n	8005d4c <_puts_r+0x68>
 8005d7c:	e7ce      	b.n	8005d1c <_puts_r+0x38>
 8005d7e:	3e01      	subs	r6, #1
 8005d80:	e7e4      	b.n	8005d4c <_puts_r+0x68>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	6022      	str	r2, [r4, #0]
 8005d88:	220a      	movs	r2, #10
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e7ee      	b.n	8005d6c <_puts_r+0x88>
	...

08005d90 <puts>:
 8005d90:	4b02      	ldr	r3, [pc, #8]	@ (8005d9c <puts+0xc>)
 8005d92:	4601      	mov	r1, r0
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f7ff bfa5 	b.w	8005ce4 <_puts_r>
 8005d9a:	bf00      	nop
 8005d9c:	2000001c 	.word	0x2000001c

08005da0 <siprintf>:
 8005da0:	b40e      	push	{r1, r2, r3}
 8005da2:	b510      	push	{r4, lr}
 8005da4:	b09d      	sub	sp, #116	@ 0x74
 8005da6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005da8:	9002      	str	r0, [sp, #8]
 8005daa:	9006      	str	r0, [sp, #24]
 8005dac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005db0:	480a      	ldr	r0, [pc, #40]	@ (8005ddc <siprintf+0x3c>)
 8005db2:	9107      	str	r1, [sp, #28]
 8005db4:	9104      	str	r1, [sp, #16]
 8005db6:	490a      	ldr	r1, [pc, #40]	@ (8005de0 <siprintf+0x40>)
 8005db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dbc:	9105      	str	r1, [sp, #20]
 8005dbe:	2400      	movs	r4, #0
 8005dc0:	a902      	add	r1, sp, #8
 8005dc2:	6800      	ldr	r0, [r0, #0]
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005dc8:	f002 fd14 	bl	80087f4 <_svfiprintf_r>
 8005dcc:	9b02      	ldr	r3, [sp, #8]
 8005dce:	701c      	strb	r4, [r3, #0]
 8005dd0:	b01d      	add	sp, #116	@ 0x74
 8005dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd6:	b003      	add	sp, #12
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	2000001c 	.word	0x2000001c
 8005de0:	ffff0208 	.word	0xffff0208

08005de4 <__sread>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	460c      	mov	r4, r1
 8005de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dec:	f000 f992 	bl	8006114 <_read_r>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	bfab      	itete	ge
 8005df4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005df6:	89a3      	ldrhlt	r3, [r4, #12]
 8005df8:	181b      	addge	r3, r3, r0
 8005dfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005dfe:	bfac      	ite	ge
 8005e00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e02:	81a3      	strhlt	r3, [r4, #12]
 8005e04:	bd10      	pop	{r4, pc}

08005e06 <__swrite>:
 8005e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0a:	461f      	mov	r7, r3
 8005e0c:	898b      	ldrh	r3, [r1, #12]
 8005e0e:	05db      	lsls	r3, r3, #23
 8005e10:	4605      	mov	r5, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	4616      	mov	r6, r2
 8005e16:	d505      	bpl.n	8005e24 <__swrite+0x1e>
 8005e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f000 f966 	bl	80060f0 <_lseek_r>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	4632      	mov	r2, r6
 8005e32:	463b      	mov	r3, r7
 8005e34:	4628      	mov	r0, r5
 8005e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e3a:	f000 b97d 	b.w	8006138 <_write_r>

08005e3e <__sseek>:
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	460c      	mov	r4, r1
 8005e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e46:	f000 f953 	bl	80060f0 <_lseek_r>
 8005e4a:	1c43      	adds	r3, r0, #1
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	bf15      	itete	ne
 8005e50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005e52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005e56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005e5a:	81a3      	strheq	r3, [r4, #12]
 8005e5c:	bf18      	it	ne
 8005e5e:	81a3      	strhne	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__sclose>:
 8005e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e66:	f000 b933 	b.w	80060d0 <_close_r>

08005e6a <__swbuf_r>:
 8005e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	4614      	mov	r4, r2
 8005e70:	4605      	mov	r5, r0
 8005e72:	b118      	cbz	r0, 8005e7c <__swbuf_r+0x12>
 8005e74:	6a03      	ldr	r3, [r0, #32]
 8005e76:	b90b      	cbnz	r3, 8005e7c <__swbuf_r+0x12>
 8005e78:	f7ff fee4 	bl	8005c44 <__sinit>
 8005e7c:	69a3      	ldr	r3, [r4, #24]
 8005e7e:	60a3      	str	r3, [r4, #8]
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	071a      	lsls	r2, r3, #28
 8005e84:	d501      	bpl.n	8005e8a <__swbuf_r+0x20>
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b943      	cbnz	r3, 8005e9c <__swbuf_r+0x32>
 8005e8a:	4621      	mov	r1, r4
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f000 f82b 	bl	8005ee8 <__swsetup_r>
 8005e92:	b118      	cbz	r0, 8005e9c <__swbuf_r+0x32>
 8005e94:	f04f 37ff 	mov.w	r7, #4294967295
 8005e98:	4638      	mov	r0, r7
 8005e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	1a98      	subs	r0, r3, r2
 8005ea2:	6963      	ldr	r3, [r4, #20]
 8005ea4:	b2f6      	uxtb	r6, r6
 8005ea6:	4283      	cmp	r3, r0
 8005ea8:	4637      	mov	r7, r6
 8005eaa:	dc05      	bgt.n	8005eb8 <__swbuf_r+0x4e>
 8005eac:	4621      	mov	r1, r4
 8005eae:	4628      	mov	r0, r5
 8005eb0:	f002 ff62 	bl	8008d78 <_fflush_r>
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d1ed      	bne.n	8005e94 <__swbuf_r+0x2a>
 8005eb8:	68a3      	ldr	r3, [r4, #8]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	60a3      	str	r3, [r4, #8]
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	6022      	str	r2, [r4, #0]
 8005ec4:	701e      	strb	r6, [r3, #0]
 8005ec6:	6962      	ldr	r2, [r4, #20]
 8005ec8:	1c43      	adds	r3, r0, #1
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d004      	beq.n	8005ed8 <__swbuf_r+0x6e>
 8005ece:	89a3      	ldrh	r3, [r4, #12]
 8005ed0:	07db      	lsls	r3, r3, #31
 8005ed2:	d5e1      	bpl.n	8005e98 <__swbuf_r+0x2e>
 8005ed4:	2e0a      	cmp	r6, #10
 8005ed6:	d1df      	bne.n	8005e98 <__swbuf_r+0x2e>
 8005ed8:	4621      	mov	r1, r4
 8005eda:	4628      	mov	r0, r5
 8005edc:	f002 ff4c 	bl	8008d78 <_fflush_r>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d0d9      	beq.n	8005e98 <__swbuf_r+0x2e>
 8005ee4:	e7d6      	b.n	8005e94 <__swbuf_r+0x2a>
	...

08005ee8 <__swsetup_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4b29      	ldr	r3, [pc, #164]	@ (8005f90 <__swsetup_r+0xa8>)
 8005eec:	4605      	mov	r5, r0
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	b118      	cbz	r0, 8005efc <__swsetup_r+0x14>
 8005ef4:	6a03      	ldr	r3, [r0, #32]
 8005ef6:	b90b      	cbnz	r3, 8005efc <__swsetup_r+0x14>
 8005ef8:	f7ff fea4 	bl	8005c44 <__sinit>
 8005efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f00:	0719      	lsls	r1, r3, #28
 8005f02:	d422      	bmi.n	8005f4a <__swsetup_r+0x62>
 8005f04:	06da      	lsls	r2, r3, #27
 8005f06:	d407      	bmi.n	8005f18 <__swsetup_r+0x30>
 8005f08:	2209      	movs	r2, #9
 8005f0a:	602a      	str	r2, [r5, #0]
 8005f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	f04f 30ff 	mov.w	r0, #4294967295
 8005f16:	e033      	b.n	8005f80 <__swsetup_r+0x98>
 8005f18:	0758      	lsls	r0, r3, #29
 8005f1a:	d512      	bpl.n	8005f42 <__swsetup_r+0x5a>
 8005f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f1e:	b141      	cbz	r1, 8005f32 <__swsetup_r+0x4a>
 8005f20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d002      	beq.n	8005f2e <__swsetup_r+0x46>
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f000 ffd9 	bl	8006ee0 <_free_r>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f32:	89a3      	ldrh	r3, [r4, #12]
 8005f34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f38:	81a3      	strh	r3, [r4, #12]
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	6063      	str	r3, [r4, #4]
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	f043 0308 	orr.w	r3, r3, #8
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	b94b      	cbnz	r3, 8005f62 <__swsetup_r+0x7a>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f58:	d003      	beq.n	8005f62 <__swsetup_r+0x7a>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f002 ff6b 	bl	8008e38 <__smakebuf_r>
 8005f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f66:	f013 0201 	ands.w	r2, r3, #1
 8005f6a:	d00a      	beq.n	8005f82 <__swsetup_r+0x9a>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	60a2      	str	r2, [r4, #8]
 8005f70:	6962      	ldr	r2, [r4, #20]
 8005f72:	4252      	negs	r2, r2
 8005f74:	61a2      	str	r2, [r4, #24]
 8005f76:	6922      	ldr	r2, [r4, #16]
 8005f78:	b942      	cbnz	r2, 8005f8c <__swsetup_r+0xa4>
 8005f7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005f7e:	d1c5      	bne.n	8005f0c <__swsetup_r+0x24>
 8005f80:	bd38      	pop	{r3, r4, r5, pc}
 8005f82:	0799      	lsls	r1, r3, #30
 8005f84:	bf58      	it	pl
 8005f86:	6962      	ldrpl	r2, [r4, #20]
 8005f88:	60a2      	str	r2, [r4, #8]
 8005f8a:	e7f4      	b.n	8005f76 <__swsetup_r+0x8e>
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e7f7      	b.n	8005f80 <__swsetup_r+0x98>
 8005f90:	2000001c 	.word	0x2000001c

08005f94 <memset>:
 8005f94:	4402      	add	r2, r0
 8005f96:	4603      	mov	r3, r0
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <strchr>:
 8005fa4:	b2c9      	uxtb	r1, r1
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fae:	b112      	cbz	r2, 8005fb6 <strchr+0x12>
 8005fb0:	428a      	cmp	r2, r1
 8005fb2:	d1f9      	bne.n	8005fa8 <strchr+0x4>
 8005fb4:	4770      	bx	lr
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	bf18      	it	ne
 8005fba:	2000      	movne	r0, #0
 8005fbc:	4770      	bx	lr

08005fbe <strncmp>:
 8005fbe:	b510      	push	{r4, lr}
 8005fc0:	b16a      	cbz	r2, 8005fde <strncmp+0x20>
 8005fc2:	3901      	subs	r1, #1
 8005fc4:	1884      	adds	r4, r0, r2
 8005fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fca:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d103      	bne.n	8005fda <strncmp+0x1c>
 8005fd2:	42a0      	cmp	r0, r4
 8005fd4:	d001      	beq.n	8005fda <strncmp+0x1c>
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	d1f5      	bne.n	8005fc6 <strncmp+0x8>
 8005fda:	1ad0      	subs	r0, r2, r3
 8005fdc:	bd10      	pop	{r4, pc}
 8005fde:	4610      	mov	r0, r2
 8005fe0:	e7fc      	b.n	8005fdc <strncmp+0x1e>
	...

08005fe4 <strtok>:
 8005fe4:	4b16      	ldr	r3, [pc, #88]	@ (8006040 <strtok+0x5c>)
 8005fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	681f      	ldr	r7, [r3, #0]
 8005fec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005fee:	4605      	mov	r5, r0
 8005ff0:	460e      	mov	r6, r1
 8005ff2:	b9ec      	cbnz	r4, 8006030 <strtok+0x4c>
 8005ff4:	2050      	movs	r0, #80	@ 0x50
 8005ff6:	f000 ffbd 	bl	8006f74 <malloc>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ffe:	b920      	cbnz	r0, 800600a <strtok+0x26>
 8006000:	4b10      	ldr	r3, [pc, #64]	@ (8006044 <strtok+0x60>)
 8006002:	4811      	ldr	r0, [pc, #68]	@ (8006048 <strtok+0x64>)
 8006004:	215b      	movs	r1, #91	@ 0x5b
 8006006:	f000 f8f3 	bl	80061f0 <__assert_func>
 800600a:	e9c0 4400 	strd	r4, r4, [r0]
 800600e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006012:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006016:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800601a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800601e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006022:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006026:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800602a:	6184      	str	r4, [r0, #24]
 800602c:	7704      	strb	r4, [r0, #28]
 800602e:	6244      	str	r4, [r0, #36]	@ 0x24
 8006030:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	2301      	movs	r3, #1
 8006038:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800603c:	f000 b806 	b.w	800604c <__strtok_r>
 8006040:	2000001c 	.word	0x2000001c
 8006044:	08009b65 	.word	0x08009b65
 8006048:	08009b7c 	.word	0x08009b7c

0800604c <__strtok_r>:
 800604c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	b908      	cbnz	r0, 8006056 <__strtok_r+0xa>
 8006052:	6814      	ldr	r4, [r2, #0]
 8006054:	b144      	cbz	r4, 8006068 <__strtok_r+0x1c>
 8006056:	4620      	mov	r0, r4
 8006058:	f814 5b01 	ldrb.w	r5, [r4], #1
 800605c:	460f      	mov	r7, r1
 800605e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006062:	b91e      	cbnz	r6, 800606c <__strtok_r+0x20>
 8006064:	b965      	cbnz	r5, 8006080 <__strtok_r+0x34>
 8006066:	6015      	str	r5, [r2, #0]
 8006068:	2000      	movs	r0, #0
 800606a:	e005      	b.n	8006078 <__strtok_r+0x2c>
 800606c:	42b5      	cmp	r5, r6
 800606e:	d1f6      	bne.n	800605e <__strtok_r+0x12>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f0      	bne.n	8006056 <__strtok_r+0xa>
 8006074:	6014      	str	r4, [r2, #0]
 8006076:	7003      	strb	r3, [r0, #0]
 8006078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800607a:	461c      	mov	r4, r3
 800607c:	e00c      	b.n	8006098 <__strtok_r+0x4c>
 800607e:	b91d      	cbnz	r5, 8006088 <__strtok_r+0x3c>
 8006080:	4627      	mov	r7, r4
 8006082:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006086:	460e      	mov	r6, r1
 8006088:	f816 5b01 	ldrb.w	r5, [r6], #1
 800608c:	42ab      	cmp	r3, r5
 800608e:	d1f6      	bne.n	800607e <__strtok_r+0x32>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f2      	beq.n	800607a <__strtok_r+0x2e>
 8006094:	2300      	movs	r3, #0
 8006096:	703b      	strb	r3, [r7, #0]
 8006098:	6014      	str	r4, [r2, #0]
 800609a:	e7ed      	b.n	8006078 <__strtok_r+0x2c>

0800609c <strstr>:
 800609c:	780a      	ldrb	r2, [r1, #0]
 800609e:	b570      	push	{r4, r5, r6, lr}
 80060a0:	b96a      	cbnz	r2, 80060be <strstr+0x22>
 80060a2:	bd70      	pop	{r4, r5, r6, pc}
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d109      	bne.n	80060bc <strstr+0x20>
 80060a8:	460c      	mov	r4, r1
 80060aa:	4605      	mov	r5, r0
 80060ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0f6      	beq.n	80060a2 <strstr+0x6>
 80060b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80060b8:	429e      	cmp	r6, r3
 80060ba:	d0f7      	beq.n	80060ac <strstr+0x10>
 80060bc:	3001      	adds	r0, #1
 80060be:	7803      	ldrb	r3, [r0, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1ef      	bne.n	80060a4 <strstr+0x8>
 80060c4:	4618      	mov	r0, r3
 80060c6:	e7ec      	b.n	80060a2 <strstr+0x6>

080060c8 <_localeconv_r>:
 80060c8:	4800      	ldr	r0, [pc, #0]	@ (80060cc <_localeconv_r+0x4>)
 80060ca:	4770      	bx	lr
 80060cc:	2000015c 	.word	0x2000015c

080060d0 <_close_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	@ (80060ec <_close_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fc f880 	bl	80021e0 <_close>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_close_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_close_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	20000d08 	.word	0x20000d08

080060f0 <_lseek_r>:
 80060f0:	b538      	push	{r3, r4, r5, lr}
 80060f2:	4d07      	ldr	r5, [pc, #28]	@ (8006110 <_lseek_r+0x20>)
 80060f4:	4604      	mov	r4, r0
 80060f6:	4608      	mov	r0, r1
 80060f8:	4611      	mov	r1, r2
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	f7fc f895 	bl	800222e <_lseek>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_lseek_r+0x1e>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_lseek_r+0x1e>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20000d08 	.word	0x20000d08

08006114 <_read_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	@ (8006134 <_read_r+0x20>)
 8006118:	4604      	mov	r4, r0
 800611a:	4608      	mov	r0, r1
 800611c:	4611      	mov	r1, r2
 800611e:	2200      	movs	r2, #0
 8006120:	602a      	str	r2, [r5, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	f7fc f823 	bl	800216e <_read>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_read_r+0x1e>
 800612c:	682b      	ldr	r3, [r5, #0]
 800612e:	b103      	cbz	r3, 8006132 <_read_r+0x1e>
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	20000d08 	.word	0x20000d08

08006138 <_write_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	@ (8006158 <_write_r+0x20>)
 800613c:	4604      	mov	r4, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	602a      	str	r2, [r5, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fc f82e 	bl	80021a8 <_write>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_write_r+0x1e>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_write_r+0x1e>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	20000d08 	.word	0x20000d08

0800615c <__errno>:
 800615c:	4b01      	ldr	r3, [pc, #4]	@ (8006164 <__errno+0x8>)
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	2000001c 	.word	0x2000001c

08006168 <__libc_init_array>:
 8006168:	b570      	push	{r4, r5, r6, lr}
 800616a:	4d0d      	ldr	r5, [pc, #52]	@ (80061a0 <__libc_init_array+0x38>)
 800616c:	4c0d      	ldr	r4, [pc, #52]	@ (80061a4 <__libc_init_array+0x3c>)
 800616e:	1b64      	subs	r4, r4, r5
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	2600      	movs	r6, #0
 8006174:	42a6      	cmp	r6, r4
 8006176:	d109      	bne.n	800618c <__libc_init_array+0x24>
 8006178:	4d0b      	ldr	r5, [pc, #44]	@ (80061a8 <__libc_init_array+0x40>)
 800617a:	4c0c      	ldr	r4, [pc, #48]	@ (80061ac <__libc_init_array+0x44>)
 800617c:	f003 fb0c 	bl	8009798 <_init>
 8006180:	1b64      	subs	r4, r4, r5
 8006182:	10a4      	asrs	r4, r4, #2
 8006184:	2600      	movs	r6, #0
 8006186:	42a6      	cmp	r6, r4
 8006188:	d105      	bne.n	8006196 <__libc_init_array+0x2e>
 800618a:	bd70      	pop	{r4, r5, r6, pc}
 800618c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006190:	4798      	blx	r3
 8006192:	3601      	adds	r6, #1
 8006194:	e7ee      	b.n	8006174 <__libc_init_array+0xc>
 8006196:	f855 3b04 	ldr.w	r3, [r5], #4
 800619a:	4798      	blx	r3
 800619c:	3601      	adds	r6, #1
 800619e:	e7f2      	b.n	8006186 <__libc_init_array+0x1e>
 80061a0:	08009fb4 	.word	0x08009fb4
 80061a4:	08009fb4 	.word	0x08009fb4
 80061a8:	08009fb4 	.word	0x08009fb4
 80061ac:	08009fb8 	.word	0x08009fb8

080061b0 <__retarget_lock_init_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <__retarget_lock_acquire_recursive>:
 80061b2:	4770      	bx	lr

080061b4 <__retarget_lock_release_recursive>:
 80061b4:	4770      	bx	lr

080061b6 <strcpy>:
 80061b6:	4603      	mov	r3, r0
 80061b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061bc:	f803 2b01 	strb.w	r2, [r3], #1
 80061c0:	2a00      	cmp	r2, #0
 80061c2:	d1f9      	bne.n	80061b8 <strcpy+0x2>
 80061c4:	4770      	bx	lr

080061c6 <memcpy>:
 80061c6:	440a      	add	r2, r1
 80061c8:	4291      	cmp	r1, r2
 80061ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80061ce:	d100      	bne.n	80061d2 <memcpy+0xc>
 80061d0:	4770      	bx	lr
 80061d2:	b510      	push	{r4, lr}
 80061d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061dc:	4291      	cmp	r1, r2
 80061de:	d1f9      	bne.n	80061d4 <memcpy+0xe>
 80061e0:	bd10      	pop	{r4, pc}
	...

080061e4 <nanf>:
 80061e4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80061ec <nanf+0x8>
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	7fc00000 	.word	0x7fc00000

080061f0 <__assert_func>:
 80061f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061f2:	4614      	mov	r4, r2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b09      	ldr	r3, [pc, #36]	@ (800621c <__assert_func+0x2c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4605      	mov	r5, r0
 80061fc:	68d8      	ldr	r0, [r3, #12]
 80061fe:	b14c      	cbz	r4, 8006214 <__assert_func+0x24>
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <__assert_func+0x30>)
 8006202:	9100      	str	r1, [sp, #0]
 8006204:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006208:	4906      	ldr	r1, [pc, #24]	@ (8006224 <__assert_func+0x34>)
 800620a:	462b      	mov	r3, r5
 800620c:	f002 fddc 	bl	8008dc8 <fiprintf>
 8006210:	f002 fed6 	bl	8008fc0 <abort>
 8006214:	4b04      	ldr	r3, [pc, #16]	@ (8006228 <__assert_func+0x38>)
 8006216:	461c      	mov	r4, r3
 8006218:	e7f3      	b.n	8006202 <__assert_func+0x12>
 800621a:	bf00      	nop
 800621c:	2000001c 	.word	0x2000001c
 8006220:	08009bd6 	.word	0x08009bd6
 8006224:	08009be3 	.word	0x08009be3
 8006228:	08009c11 	.word	0x08009c11

0800622c <quorem>:
 800622c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	6903      	ldr	r3, [r0, #16]
 8006232:	690c      	ldr	r4, [r1, #16]
 8006234:	42a3      	cmp	r3, r4
 8006236:	4607      	mov	r7, r0
 8006238:	db7e      	blt.n	8006338 <quorem+0x10c>
 800623a:	3c01      	subs	r4, #1
 800623c:	f101 0814 	add.w	r8, r1, #20
 8006240:	00a3      	lsls	r3, r4, #2
 8006242:	f100 0514 	add.w	r5, r0, #20
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006252:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006256:	3301      	adds	r3, #1
 8006258:	429a      	cmp	r2, r3
 800625a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800625e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006262:	d32e      	bcc.n	80062c2 <quorem+0x96>
 8006264:	f04f 0a00 	mov.w	sl, #0
 8006268:	46c4      	mov	ip, r8
 800626a:	46ae      	mov	lr, r5
 800626c:	46d3      	mov	fp, sl
 800626e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006272:	b298      	uxth	r0, r3
 8006274:	fb06 a000 	mla	r0, r6, r0, sl
 8006278:	0c02      	lsrs	r2, r0, #16
 800627a:	0c1b      	lsrs	r3, r3, #16
 800627c:	fb06 2303 	mla	r3, r6, r3, r2
 8006280:	f8de 2000 	ldr.w	r2, [lr]
 8006284:	b280      	uxth	r0, r0
 8006286:	b292      	uxth	r2, r2
 8006288:	1a12      	subs	r2, r2, r0
 800628a:	445a      	add	r2, fp
 800628c:	f8de 0000 	ldr.w	r0, [lr]
 8006290:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006294:	b29b      	uxth	r3, r3
 8006296:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800629a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800629e:	b292      	uxth	r2, r2
 80062a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80062a4:	45e1      	cmp	r9, ip
 80062a6:	f84e 2b04 	str.w	r2, [lr], #4
 80062aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80062ae:	d2de      	bcs.n	800626e <quorem+0x42>
 80062b0:	9b00      	ldr	r3, [sp, #0]
 80062b2:	58eb      	ldr	r3, [r5, r3]
 80062b4:	b92b      	cbnz	r3, 80062c2 <quorem+0x96>
 80062b6:	9b01      	ldr	r3, [sp, #4]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	429d      	cmp	r5, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	d32f      	bcc.n	8006320 <quorem+0xf4>
 80062c0:	613c      	str	r4, [r7, #16]
 80062c2:	4638      	mov	r0, r7
 80062c4:	f001 f9c8 	bl	8007658 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	db25      	blt.n	8006318 <quorem+0xec>
 80062cc:	4629      	mov	r1, r5
 80062ce:	2000      	movs	r0, #0
 80062d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80062d4:	f8d1 c000 	ldr.w	ip, [r1]
 80062d8:	fa1f fe82 	uxth.w	lr, r2
 80062dc:	fa1f f38c 	uxth.w	r3, ip
 80062e0:	eba3 030e 	sub.w	r3, r3, lr
 80062e4:	4403      	add	r3, r0
 80062e6:	0c12      	lsrs	r2, r2, #16
 80062e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80062ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062f6:	45c1      	cmp	r9, r8
 80062f8:	f841 3b04 	str.w	r3, [r1], #4
 80062fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006300:	d2e6      	bcs.n	80062d0 <quorem+0xa4>
 8006302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800630a:	b922      	cbnz	r2, 8006316 <quorem+0xea>
 800630c:	3b04      	subs	r3, #4
 800630e:	429d      	cmp	r5, r3
 8006310:	461a      	mov	r2, r3
 8006312:	d30b      	bcc.n	800632c <quorem+0x100>
 8006314:	613c      	str	r4, [r7, #16]
 8006316:	3601      	adds	r6, #1
 8006318:	4630      	mov	r0, r6
 800631a:	b003      	add	sp, #12
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	3b04      	subs	r3, #4
 8006324:	2a00      	cmp	r2, #0
 8006326:	d1cb      	bne.n	80062c0 <quorem+0x94>
 8006328:	3c01      	subs	r4, #1
 800632a:	e7c6      	b.n	80062ba <quorem+0x8e>
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	3b04      	subs	r3, #4
 8006330:	2a00      	cmp	r2, #0
 8006332:	d1ef      	bne.n	8006314 <quorem+0xe8>
 8006334:	3c01      	subs	r4, #1
 8006336:	e7ea      	b.n	800630e <quorem+0xe2>
 8006338:	2000      	movs	r0, #0
 800633a:	e7ee      	b.n	800631a <quorem+0xee>
 800633c:	0000      	movs	r0, r0
	...

08006340 <_dtoa_r>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	69c7      	ldr	r7, [r0, #28]
 8006346:	b097      	sub	sp, #92	@ 0x5c
 8006348:	ed8d 0b04 	vstr	d0, [sp, #16]
 800634c:	ec55 4b10 	vmov	r4, r5, d0
 8006350:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006352:	9107      	str	r1, [sp, #28]
 8006354:	4681      	mov	r9, r0
 8006356:	920c      	str	r2, [sp, #48]	@ 0x30
 8006358:	9311      	str	r3, [sp, #68]	@ 0x44
 800635a:	b97f      	cbnz	r7, 800637c <_dtoa_r+0x3c>
 800635c:	2010      	movs	r0, #16
 800635e:	f000 fe09 	bl	8006f74 <malloc>
 8006362:	4602      	mov	r2, r0
 8006364:	f8c9 001c 	str.w	r0, [r9, #28]
 8006368:	b920      	cbnz	r0, 8006374 <_dtoa_r+0x34>
 800636a:	4ba9      	ldr	r3, [pc, #676]	@ (8006610 <_dtoa_r+0x2d0>)
 800636c:	21ef      	movs	r1, #239	@ 0xef
 800636e:	48a9      	ldr	r0, [pc, #676]	@ (8006614 <_dtoa_r+0x2d4>)
 8006370:	f7ff ff3e 	bl	80061f0 <__assert_func>
 8006374:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006378:	6007      	str	r7, [r0, #0]
 800637a:	60c7      	str	r7, [r0, #12]
 800637c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006380:	6819      	ldr	r1, [r3, #0]
 8006382:	b159      	cbz	r1, 800639c <_dtoa_r+0x5c>
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	604a      	str	r2, [r1, #4]
 8006388:	2301      	movs	r3, #1
 800638a:	4093      	lsls	r3, r2
 800638c:	608b      	str	r3, [r1, #8]
 800638e:	4648      	mov	r0, r9
 8006390:	f000 fee6 	bl	8007160 <_Bfree>
 8006394:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	1e2b      	subs	r3, r5, #0
 800639e:	bfb9      	ittee	lt
 80063a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80063a4:	9305      	strlt	r3, [sp, #20]
 80063a6:	2300      	movge	r3, #0
 80063a8:	6033      	strge	r3, [r6, #0]
 80063aa:	9f05      	ldr	r7, [sp, #20]
 80063ac:	4b9a      	ldr	r3, [pc, #616]	@ (8006618 <_dtoa_r+0x2d8>)
 80063ae:	bfbc      	itt	lt
 80063b0:	2201      	movlt	r2, #1
 80063b2:	6032      	strlt	r2, [r6, #0]
 80063b4:	43bb      	bics	r3, r7
 80063b6:	d112      	bne.n	80063de <_dtoa_r+0x9e>
 80063b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80063ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063c4:	4323      	orrs	r3, r4
 80063c6:	f000 855a 	beq.w	8006e7e <_dtoa_r+0xb3e>
 80063ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800662c <_dtoa_r+0x2ec>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 855c 	beq.w	8006e8e <_dtoa_r+0xb4e>
 80063d6:	f10a 0303 	add.w	r3, sl, #3
 80063da:	f000 bd56 	b.w	8006e8a <_dtoa_r+0xb4a>
 80063de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80063e2:	2200      	movs	r2, #0
 80063e4:	ec51 0b17 	vmov	r0, r1, d7
 80063e8:	2300      	movs	r3, #0
 80063ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80063ee:	f7fa fb83 	bl	8000af8 <__aeabi_dcmpeq>
 80063f2:	4680      	mov	r8, r0
 80063f4:	b158      	cbz	r0, 800640e <_dtoa_r+0xce>
 80063f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80063f8:	2301      	movs	r3, #1
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063fe:	b113      	cbz	r3, 8006406 <_dtoa_r+0xc6>
 8006400:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006402:	4b86      	ldr	r3, [pc, #536]	@ (800661c <_dtoa_r+0x2dc>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006630 <_dtoa_r+0x2f0>
 800640a:	f000 bd40 	b.w	8006e8e <_dtoa_r+0xb4e>
 800640e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006412:	aa14      	add	r2, sp, #80	@ 0x50
 8006414:	a915      	add	r1, sp, #84	@ 0x54
 8006416:	4648      	mov	r0, r9
 8006418:	f001 fa3e 	bl	8007898 <__d2b>
 800641c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006420:	9002      	str	r0, [sp, #8]
 8006422:	2e00      	cmp	r6, #0
 8006424:	d078      	beq.n	8006518 <_dtoa_r+0x1d8>
 8006426:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006428:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800642c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006430:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006434:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006438:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800643c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006440:	4619      	mov	r1, r3
 8006442:	2200      	movs	r2, #0
 8006444:	4b76      	ldr	r3, [pc, #472]	@ (8006620 <_dtoa_r+0x2e0>)
 8006446:	f7f9 ff37 	bl	80002b8 <__aeabi_dsub>
 800644a:	a36b      	add	r3, pc, #428	@ (adr r3, 80065f8 <_dtoa_r+0x2b8>)
 800644c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006450:	f7fa f8ea 	bl	8000628 <__aeabi_dmul>
 8006454:	a36a      	add	r3, pc, #424	@ (adr r3, 8006600 <_dtoa_r+0x2c0>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7f9 ff2f 	bl	80002bc <__adddf3>
 800645e:	4604      	mov	r4, r0
 8006460:	4630      	mov	r0, r6
 8006462:	460d      	mov	r5, r1
 8006464:	f7fa f876 	bl	8000554 <__aeabi_i2d>
 8006468:	a367      	add	r3, pc, #412	@ (adr r3, 8006608 <_dtoa_r+0x2c8>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f8db 	bl	8000628 <__aeabi_dmul>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4620      	mov	r0, r4
 8006478:	4629      	mov	r1, r5
 800647a:	f7f9 ff1f 	bl	80002bc <__adddf3>
 800647e:	4604      	mov	r4, r0
 8006480:	460d      	mov	r5, r1
 8006482:	f7fa fb81 	bl	8000b88 <__aeabi_d2iz>
 8006486:	2200      	movs	r2, #0
 8006488:	4607      	mov	r7, r0
 800648a:	2300      	movs	r3, #0
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7fa fb3c 	bl	8000b0c <__aeabi_dcmplt>
 8006494:	b140      	cbz	r0, 80064a8 <_dtoa_r+0x168>
 8006496:	4638      	mov	r0, r7
 8006498:	f7fa f85c 	bl	8000554 <__aeabi_i2d>
 800649c:	4622      	mov	r2, r4
 800649e:	462b      	mov	r3, r5
 80064a0:	f7fa fb2a 	bl	8000af8 <__aeabi_dcmpeq>
 80064a4:	b900      	cbnz	r0, 80064a8 <_dtoa_r+0x168>
 80064a6:	3f01      	subs	r7, #1
 80064a8:	2f16      	cmp	r7, #22
 80064aa:	d852      	bhi.n	8006552 <_dtoa_r+0x212>
 80064ac:	4b5d      	ldr	r3, [pc, #372]	@ (8006624 <_dtoa_r+0x2e4>)
 80064ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80064b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064ba:	f7fa fb27 	bl	8000b0c <__aeabi_dcmplt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	d049      	beq.n	8006556 <_dtoa_r+0x216>
 80064c2:	3f01      	subs	r7, #1
 80064c4:	2300      	movs	r3, #0
 80064c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80064c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80064ca:	1b9b      	subs	r3, r3, r6
 80064cc:	1e5a      	subs	r2, r3, #1
 80064ce:	bf45      	ittet	mi
 80064d0:	f1c3 0301 	rsbmi	r3, r3, #1
 80064d4:	9300      	strmi	r3, [sp, #0]
 80064d6:	2300      	movpl	r3, #0
 80064d8:	2300      	movmi	r3, #0
 80064da:	9206      	str	r2, [sp, #24]
 80064dc:	bf54      	ite	pl
 80064de:	9300      	strpl	r3, [sp, #0]
 80064e0:	9306      	strmi	r3, [sp, #24]
 80064e2:	2f00      	cmp	r7, #0
 80064e4:	db39      	blt.n	800655a <_dtoa_r+0x21a>
 80064e6:	9b06      	ldr	r3, [sp, #24]
 80064e8:	970d      	str	r7, [sp, #52]	@ 0x34
 80064ea:	443b      	add	r3, r7
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	2300      	movs	r3, #0
 80064f0:	9308      	str	r3, [sp, #32]
 80064f2:	9b07      	ldr	r3, [sp, #28]
 80064f4:	2b09      	cmp	r3, #9
 80064f6:	d863      	bhi.n	80065c0 <_dtoa_r+0x280>
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	bfc4      	itt	gt
 80064fc:	3b04      	subgt	r3, #4
 80064fe:	9307      	strgt	r3, [sp, #28]
 8006500:	9b07      	ldr	r3, [sp, #28]
 8006502:	f1a3 0302 	sub.w	r3, r3, #2
 8006506:	bfcc      	ite	gt
 8006508:	2400      	movgt	r4, #0
 800650a:	2401      	movle	r4, #1
 800650c:	2b03      	cmp	r3, #3
 800650e:	d863      	bhi.n	80065d8 <_dtoa_r+0x298>
 8006510:	e8df f003 	tbb	[pc, r3]
 8006514:	2b375452 	.word	0x2b375452
 8006518:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800651c:	441e      	add	r6, r3
 800651e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006522:	2b20      	cmp	r3, #32
 8006524:	bfc1      	itttt	gt
 8006526:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800652a:	409f      	lslgt	r7, r3
 800652c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006530:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006534:	bfd6      	itet	le
 8006536:	f1c3 0320 	rsble	r3, r3, #32
 800653a:	ea47 0003 	orrgt.w	r0, r7, r3
 800653e:	fa04 f003 	lslle.w	r0, r4, r3
 8006542:	f7f9 fff7 	bl	8000534 <__aeabi_ui2d>
 8006546:	2201      	movs	r2, #1
 8006548:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800654c:	3e01      	subs	r6, #1
 800654e:	9212      	str	r2, [sp, #72]	@ 0x48
 8006550:	e776      	b.n	8006440 <_dtoa_r+0x100>
 8006552:	2301      	movs	r3, #1
 8006554:	e7b7      	b.n	80064c6 <_dtoa_r+0x186>
 8006556:	9010      	str	r0, [sp, #64]	@ 0x40
 8006558:	e7b6      	b.n	80064c8 <_dtoa_r+0x188>
 800655a:	9b00      	ldr	r3, [sp, #0]
 800655c:	1bdb      	subs	r3, r3, r7
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	427b      	negs	r3, r7
 8006562:	9308      	str	r3, [sp, #32]
 8006564:	2300      	movs	r3, #0
 8006566:	930d      	str	r3, [sp, #52]	@ 0x34
 8006568:	e7c3      	b.n	80064f2 <_dtoa_r+0x1b2>
 800656a:	2301      	movs	r3, #1
 800656c:	9309      	str	r3, [sp, #36]	@ 0x24
 800656e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006570:	eb07 0b03 	add.w	fp, r7, r3
 8006574:	f10b 0301 	add.w	r3, fp, #1
 8006578:	2b01      	cmp	r3, #1
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	bfb8      	it	lt
 800657e:	2301      	movlt	r3, #1
 8006580:	e006      	b.n	8006590 <_dtoa_r+0x250>
 8006582:	2301      	movs	r3, #1
 8006584:	9309      	str	r3, [sp, #36]	@ 0x24
 8006586:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006588:	2b00      	cmp	r3, #0
 800658a:	dd28      	ble.n	80065de <_dtoa_r+0x29e>
 800658c:	469b      	mov	fp, r3
 800658e:	9303      	str	r3, [sp, #12]
 8006590:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006594:	2100      	movs	r1, #0
 8006596:	2204      	movs	r2, #4
 8006598:	f102 0514 	add.w	r5, r2, #20
 800659c:	429d      	cmp	r5, r3
 800659e:	d926      	bls.n	80065ee <_dtoa_r+0x2ae>
 80065a0:	6041      	str	r1, [r0, #4]
 80065a2:	4648      	mov	r0, r9
 80065a4:	f000 fd9c 	bl	80070e0 <_Balloc>
 80065a8:	4682      	mov	sl, r0
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d142      	bne.n	8006634 <_dtoa_r+0x2f4>
 80065ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <_dtoa_r+0x2e8>)
 80065b0:	4602      	mov	r2, r0
 80065b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80065b6:	e6da      	b.n	800636e <_dtoa_r+0x2e>
 80065b8:	2300      	movs	r3, #0
 80065ba:	e7e3      	b.n	8006584 <_dtoa_r+0x244>
 80065bc:	2300      	movs	r3, #0
 80065be:	e7d5      	b.n	800656c <_dtoa_r+0x22c>
 80065c0:	2401      	movs	r4, #1
 80065c2:	2300      	movs	r3, #0
 80065c4:	9307      	str	r3, [sp, #28]
 80065c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80065c8:	f04f 3bff 	mov.w	fp, #4294967295
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80065d2:	2312      	movs	r3, #18
 80065d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80065d6:	e7db      	b.n	8006590 <_dtoa_r+0x250>
 80065d8:	2301      	movs	r3, #1
 80065da:	9309      	str	r3, [sp, #36]	@ 0x24
 80065dc:	e7f4      	b.n	80065c8 <_dtoa_r+0x288>
 80065de:	f04f 0b01 	mov.w	fp, #1
 80065e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80065e6:	465b      	mov	r3, fp
 80065e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80065ec:	e7d0      	b.n	8006590 <_dtoa_r+0x250>
 80065ee:	3101      	adds	r1, #1
 80065f0:	0052      	lsls	r2, r2, #1
 80065f2:	e7d1      	b.n	8006598 <_dtoa_r+0x258>
 80065f4:	f3af 8000 	nop.w
 80065f8:	636f4361 	.word	0x636f4361
 80065fc:	3fd287a7 	.word	0x3fd287a7
 8006600:	8b60c8b3 	.word	0x8b60c8b3
 8006604:	3fc68a28 	.word	0x3fc68a28
 8006608:	509f79fb 	.word	0x509f79fb
 800660c:	3fd34413 	.word	0x3fd34413
 8006610:	08009b65 	.word	0x08009b65
 8006614:	08009c1f 	.word	0x08009c1f
 8006618:	7ff00000 	.word	0x7ff00000
 800661c:	08009b3d 	.word	0x08009b3d
 8006620:	3ff80000 	.word	0x3ff80000
 8006624:	08009d90 	.word	0x08009d90
 8006628:	08009c77 	.word	0x08009c77
 800662c:	08009c1b 	.word	0x08009c1b
 8006630:	08009b3c 	.word	0x08009b3c
 8006634:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006638:	6018      	str	r0, [r3, #0]
 800663a:	9b03      	ldr	r3, [sp, #12]
 800663c:	2b0e      	cmp	r3, #14
 800663e:	f200 80a1 	bhi.w	8006784 <_dtoa_r+0x444>
 8006642:	2c00      	cmp	r4, #0
 8006644:	f000 809e 	beq.w	8006784 <_dtoa_r+0x444>
 8006648:	2f00      	cmp	r7, #0
 800664a:	dd33      	ble.n	80066b4 <_dtoa_r+0x374>
 800664c:	4b9c      	ldr	r3, [pc, #624]	@ (80068c0 <_dtoa_r+0x580>)
 800664e:	f007 020f 	and.w	r2, r7, #15
 8006652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006656:	ed93 7b00 	vldr	d7, [r3]
 800665a:	05f8      	lsls	r0, r7, #23
 800665c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006660:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006664:	d516      	bpl.n	8006694 <_dtoa_r+0x354>
 8006666:	4b97      	ldr	r3, [pc, #604]	@ (80068c4 <_dtoa_r+0x584>)
 8006668:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800666c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006670:	f7fa f904 	bl	800087c <__aeabi_ddiv>
 8006674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006678:	f004 040f 	and.w	r4, r4, #15
 800667c:	2603      	movs	r6, #3
 800667e:	4d91      	ldr	r5, [pc, #580]	@ (80068c4 <_dtoa_r+0x584>)
 8006680:	b954      	cbnz	r4, 8006698 <_dtoa_r+0x358>
 8006682:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668a:	f7fa f8f7 	bl	800087c <__aeabi_ddiv>
 800668e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006692:	e028      	b.n	80066e6 <_dtoa_r+0x3a6>
 8006694:	2602      	movs	r6, #2
 8006696:	e7f2      	b.n	800667e <_dtoa_r+0x33e>
 8006698:	07e1      	lsls	r1, r4, #31
 800669a:	d508      	bpl.n	80066ae <_dtoa_r+0x36e>
 800669c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80066a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066a4:	f7f9 ffc0 	bl	8000628 <__aeabi_dmul>
 80066a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066ac:	3601      	adds	r6, #1
 80066ae:	1064      	asrs	r4, r4, #1
 80066b0:	3508      	adds	r5, #8
 80066b2:	e7e5      	b.n	8006680 <_dtoa_r+0x340>
 80066b4:	f000 80af 	beq.w	8006816 <_dtoa_r+0x4d6>
 80066b8:	427c      	negs	r4, r7
 80066ba:	4b81      	ldr	r3, [pc, #516]	@ (80068c0 <_dtoa_r+0x580>)
 80066bc:	4d81      	ldr	r5, [pc, #516]	@ (80068c4 <_dtoa_r+0x584>)
 80066be:	f004 020f 	and.w	r2, r4, #15
 80066c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ce:	f7f9 ffab 	bl	8000628 <__aeabi_dmul>
 80066d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d6:	1124      	asrs	r4, r4, #4
 80066d8:	2300      	movs	r3, #0
 80066da:	2602      	movs	r6, #2
 80066dc:	2c00      	cmp	r4, #0
 80066de:	f040 808f 	bne.w	8006800 <_dtoa_r+0x4c0>
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d3      	bne.n	800668e <_dtoa_r+0x34e>
 80066e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80066e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f000 8094 	beq.w	800681a <_dtoa_r+0x4da>
 80066f2:	4b75      	ldr	r3, [pc, #468]	@ (80068c8 <_dtoa_r+0x588>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7fa fa07 	bl	8000b0c <__aeabi_dcmplt>
 80066fe:	2800      	cmp	r0, #0
 8006700:	f000 808b 	beq.w	800681a <_dtoa_r+0x4da>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 8087 	beq.w	800681a <_dtoa_r+0x4da>
 800670c:	f1bb 0f00 	cmp.w	fp, #0
 8006710:	dd34      	ble.n	800677c <_dtoa_r+0x43c>
 8006712:	4620      	mov	r0, r4
 8006714:	4b6d      	ldr	r3, [pc, #436]	@ (80068cc <_dtoa_r+0x58c>)
 8006716:	2200      	movs	r2, #0
 8006718:	4629      	mov	r1, r5
 800671a:	f7f9 ff85 	bl	8000628 <__aeabi_dmul>
 800671e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006722:	f107 38ff 	add.w	r8, r7, #4294967295
 8006726:	3601      	adds	r6, #1
 8006728:	465c      	mov	r4, fp
 800672a:	4630      	mov	r0, r6
 800672c:	f7f9 ff12 	bl	8000554 <__aeabi_i2d>
 8006730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006734:	f7f9 ff78 	bl	8000628 <__aeabi_dmul>
 8006738:	4b65      	ldr	r3, [pc, #404]	@ (80068d0 <_dtoa_r+0x590>)
 800673a:	2200      	movs	r2, #0
 800673c:	f7f9 fdbe 	bl	80002bc <__adddf3>
 8006740:	4605      	mov	r5, r0
 8006742:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006746:	2c00      	cmp	r4, #0
 8006748:	d16a      	bne.n	8006820 <_dtoa_r+0x4e0>
 800674a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800674e:	4b61      	ldr	r3, [pc, #388]	@ (80068d4 <_dtoa_r+0x594>)
 8006750:	2200      	movs	r2, #0
 8006752:	f7f9 fdb1 	bl	80002b8 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800675e:	462a      	mov	r2, r5
 8006760:	4633      	mov	r3, r6
 8006762:	f7fa f9f1 	bl	8000b48 <__aeabi_dcmpgt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8298 	bne.w	8006c9c <_dtoa_r+0x95c>
 800676c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006770:	462a      	mov	r2, r5
 8006772:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006776:	f7fa f9c9 	bl	8000b0c <__aeabi_dcmplt>
 800677a:	bb38      	cbnz	r0, 80067cc <_dtoa_r+0x48c>
 800677c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006780:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006784:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006786:	2b00      	cmp	r3, #0
 8006788:	f2c0 8157 	blt.w	8006a3a <_dtoa_r+0x6fa>
 800678c:	2f0e      	cmp	r7, #14
 800678e:	f300 8154 	bgt.w	8006a3a <_dtoa_r+0x6fa>
 8006792:	4b4b      	ldr	r3, [pc, #300]	@ (80068c0 <_dtoa_r+0x580>)
 8006794:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006798:	ed93 7b00 	vldr	d7, [r3]
 800679c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800679e:	2b00      	cmp	r3, #0
 80067a0:	ed8d 7b00 	vstr	d7, [sp]
 80067a4:	f280 80e5 	bge.w	8006972 <_dtoa_r+0x632>
 80067a8:	9b03      	ldr	r3, [sp, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f300 80e1 	bgt.w	8006972 <_dtoa_r+0x632>
 80067b0:	d10c      	bne.n	80067cc <_dtoa_r+0x48c>
 80067b2:	4b48      	ldr	r3, [pc, #288]	@ (80068d4 <_dtoa_r+0x594>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	ec51 0b17 	vmov	r0, r1, d7
 80067ba:	f7f9 ff35 	bl	8000628 <__aeabi_dmul>
 80067be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c2:	f7fa f9b7 	bl	8000b34 <__aeabi_dcmpge>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f000 8266 	beq.w	8006c98 <_dtoa_r+0x958>
 80067cc:	2400      	movs	r4, #0
 80067ce:	4625      	mov	r5, r4
 80067d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067d2:	4656      	mov	r6, sl
 80067d4:	ea6f 0803 	mvn.w	r8, r3
 80067d8:	2700      	movs	r7, #0
 80067da:	4621      	mov	r1, r4
 80067dc:	4648      	mov	r0, r9
 80067de:	f000 fcbf 	bl	8007160 <_Bfree>
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	f000 80bd 	beq.w	8006962 <_dtoa_r+0x622>
 80067e8:	b12f      	cbz	r7, 80067f6 <_dtoa_r+0x4b6>
 80067ea:	42af      	cmp	r7, r5
 80067ec:	d003      	beq.n	80067f6 <_dtoa_r+0x4b6>
 80067ee:	4639      	mov	r1, r7
 80067f0:	4648      	mov	r0, r9
 80067f2:	f000 fcb5 	bl	8007160 <_Bfree>
 80067f6:	4629      	mov	r1, r5
 80067f8:	4648      	mov	r0, r9
 80067fa:	f000 fcb1 	bl	8007160 <_Bfree>
 80067fe:	e0b0      	b.n	8006962 <_dtoa_r+0x622>
 8006800:	07e2      	lsls	r2, r4, #31
 8006802:	d505      	bpl.n	8006810 <_dtoa_r+0x4d0>
 8006804:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006808:	f7f9 ff0e 	bl	8000628 <__aeabi_dmul>
 800680c:	3601      	adds	r6, #1
 800680e:	2301      	movs	r3, #1
 8006810:	1064      	asrs	r4, r4, #1
 8006812:	3508      	adds	r5, #8
 8006814:	e762      	b.n	80066dc <_dtoa_r+0x39c>
 8006816:	2602      	movs	r6, #2
 8006818:	e765      	b.n	80066e6 <_dtoa_r+0x3a6>
 800681a:	9c03      	ldr	r4, [sp, #12]
 800681c:	46b8      	mov	r8, r7
 800681e:	e784      	b.n	800672a <_dtoa_r+0x3ea>
 8006820:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <_dtoa_r+0x580>)
 8006822:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006824:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006828:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800682c:	4454      	add	r4, sl
 800682e:	2900      	cmp	r1, #0
 8006830:	d054      	beq.n	80068dc <_dtoa_r+0x59c>
 8006832:	4929      	ldr	r1, [pc, #164]	@ (80068d8 <_dtoa_r+0x598>)
 8006834:	2000      	movs	r0, #0
 8006836:	f7fa f821 	bl	800087c <__aeabi_ddiv>
 800683a:	4633      	mov	r3, r6
 800683c:	462a      	mov	r2, r5
 800683e:	f7f9 fd3b 	bl	80002b8 <__aeabi_dsub>
 8006842:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006846:	4656      	mov	r6, sl
 8006848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800684c:	f7fa f99c 	bl	8000b88 <__aeabi_d2iz>
 8006850:	4605      	mov	r5, r0
 8006852:	f7f9 fe7f 	bl	8000554 <__aeabi_i2d>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800685e:	f7f9 fd2b 	bl	80002b8 <__aeabi_dsub>
 8006862:	3530      	adds	r5, #48	@ 0x30
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800686c:	f806 5b01 	strb.w	r5, [r6], #1
 8006870:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006874:	f7fa f94a 	bl	8000b0c <__aeabi_dcmplt>
 8006878:	2800      	cmp	r0, #0
 800687a:	d172      	bne.n	8006962 <_dtoa_r+0x622>
 800687c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006880:	4911      	ldr	r1, [pc, #68]	@ (80068c8 <_dtoa_r+0x588>)
 8006882:	2000      	movs	r0, #0
 8006884:	f7f9 fd18 	bl	80002b8 <__aeabi_dsub>
 8006888:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800688c:	f7fa f93e 	bl	8000b0c <__aeabi_dcmplt>
 8006890:	2800      	cmp	r0, #0
 8006892:	f040 80b4 	bne.w	80069fe <_dtoa_r+0x6be>
 8006896:	42a6      	cmp	r6, r4
 8006898:	f43f af70 	beq.w	800677c <_dtoa_r+0x43c>
 800689c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80068a0:	4b0a      	ldr	r3, [pc, #40]	@ (80068cc <_dtoa_r+0x58c>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	f7f9 fec0 	bl	8000628 <__aeabi_dmul>
 80068a8:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <_dtoa_r+0x58c>)
 80068aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068ae:	2200      	movs	r2, #0
 80068b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b4:	f7f9 feb8 	bl	8000628 <__aeabi_dmul>
 80068b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068bc:	e7c4      	b.n	8006848 <_dtoa_r+0x508>
 80068be:	bf00      	nop
 80068c0:	08009d90 	.word	0x08009d90
 80068c4:	08009d68 	.word	0x08009d68
 80068c8:	3ff00000 	.word	0x3ff00000
 80068cc:	40240000 	.word	0x40240000
 80068d0:	401c0000 	.word	0x401c0000
 80068d4:	40140000 	.word	0x40140000
 80068d8:	3fe00000 	.word	0x3fe00000
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	f7f9 fea2 	bl	8000628 <__aeabi_dmul>
 80068e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80068e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80068ea:	4656      	mov	r6, sl
 80068ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068f0:	f7fa f94a 	bl	8000b88 <__aeabi_d2iz>
 80068f4:	4605      	mov	r5, r0
 80068f6:	f7f9 fe2d 	bl	8000554 <__aeabi_i2d>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006902:	f7f9 fcd9 	bl	80002b8 <__aeabi_dsub>
 8006906:	3530      	adds	r5, #48	@ 0x30
 8006908:	f806 5b01 	strb.w	r5, [r6], #1
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	42a6      	cmp	r6, r4
 8006912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	d124      	bne.n	8006966 <_dtoa_r+0x626>
 800691c:	4baf      	ldr	r3, [pc, #700]	@ (8006bdc <_dtoa_r+0x89c>)
 800691e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006922:	f7f9 fccb 	bl	80002bc <__adddf3>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800692e:	f7fa f90b 	bl	8000b48 <__aeabi_dcmpgt>
 8006932:	2800      	cmp	r0, #0
 8006934:	d163      	bne.n	80069fe <_dtoa_r+0x6be>
 8006936:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800693a:	49a8      	ldr	r1, [pc, #672]	@ (8006bdc <_dtoa_r+0x89c>)
 800693c:	2000      	movs	r0, #0
 800693e:	f7f9 fcbb 	bl	80002b8 <__aeabi_dsub>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800694a:	f7fa f8df 	bl	8000b0c <__aeabi_dcmplt>
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f af14 	beq.w	800677c <_dtoa_r+0x43c>
 8006954:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006956:	1e73      	subs	r3, r6, #1
 8006958:	9313      	str	r3, [sp, #76]	@ 0x4c
 800695a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800695e:	2b30      	cmp	r3, #48	@ 0x30
 8006960:	d0f8      	beq.n	8006954 <_dtoa_r+0x614>
 8006962:	4647      	mov	r7, r8
 8006964:	e03b      	b.n	80069de <_dtoa_r+0x69e>
 8006966:	4b9e      	ldr	r3, [pc, #632]	@ (8006be0 <_dtoa_r+0x8a0>)
 8006968:	f7f9 fe5e 	bl	8000628 <__aeabi_dmul>
 800696c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006970:	e7bc      	b.n	80068ec <_dtoa_r+0x5ac>
 8006972:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006976:	4656      	mov	r6, sl
 8006978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 ff7c 	bl	800087c <__aeabi_ddiv>
 8006984:	f7fa f900 	bl	8000b88 <__aeabi_d2iz>
 8006988:	4680      	mov	r8, r0
 800698a:	f7f9 fde3 	bl	8000554 <__aeabi_i2d>
 800698e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006992:	f7f9 fe49 	bl	8000628 <__aeabi_dmul>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	4620      	mov	r0, r4
 800699c:	4629      	mov	r1, r5
 800699e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069a2:	f7f9 fc89 	bl	80002b8 <__aeabi_dsub>
 80069a6:	f806 4b01 	strb.w	r4, [r6], #1
 80069aa:	9d03      	ldr	r5, [sp, #12]
 80069ac:	eba6 040a 	sub.w	r4, r6, sl
 80069b0:	42a5      	cmp	r5, r4
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	d133      	bne.n	8006a20 <_dtoa_r+0x6e0>
 80069b8:	f7f9 fc80 	bl	80002bc <__adddf3>
 80069bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	f7fa f8c0 	bl	8000b48 <__aeabi_dcmpgt>
 80069c8:	b9c0      	cbnz	r0, 80069fc <_dtoa_r+0x6bc>
 80069ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7fa f891 	bl	8000af8 <__aeabi_dcmpeq>
 80069d6:	b110      	cbz	r0, 80069de <_dtoa_r+0x69e>
 80069d8:	f018 0f01 	tst.w	r8, #1
 80069dc:	d10e      	bne.n	80069fc <_dtoa_r+0x6bc>
 80069de:	9902      	ldr	r1, [sp, #8]
 80069e0:	4648      	mov	r0, r9
 80069e2:	f000 fbbd 	bl	8007160 <_Bfree>
 80069e6:	2300      	movs	r3, #0
 80069e8:	7033      	strb	r3, [r6, #0]
 80069ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80069ec:	3701      	adds	r7, #1
 80069ee:	601f      	str	r7, [r3, #0]
 80069f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	f000 824b 	beq.w	8006e8e <_dtoa_r+0xb4e>
 80069f8:	601e      	str	r6, [r3, #0]
 80069fa:	e248      	b.n	8006e8e <_dtoa_r+0xb4e>
 80069fc:	46b8      	mov	r8, r7
 80069fe:	4633      	mov	r3, r6
 8006a00:	461e      	mov	r6, r3
 8006a02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a06:	2a39      	cmp	r2, #57	@ 0x39
 8006a08:	d106      	bne.n	8006a18 <_dtoa_r+0x6d8>
 8006a0a:	459a      	cmp	sl, r3
 8006a0c:	d1f8      	bne.n	8006a00 <_dtoa_r+0x6c0>
 8006a0e:	2230      	movs	r2, #48	@ 0x30
 8006a10:	f108 0801 	add.w	r8, r8, #1
 8006a14:	f88a 2000 	strb.w	r2, [sl]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	3201      	adds	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e7a0      	b.n	8006962 <_dtoa_r+0x622>
 8006a20:	4b6f      	ldr	r3, [pc, #444]	@ (8006be0 <_dtoa_r+0x8a0>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	f7f9 fe00 	bl	8000628 <__aeabi_dmul>
 8006a28:	2200      	movs	r2, #0
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	4604      	mov	r4, r0
 8006a2e:	460d      	mov	r5, r1
 8006a30:	f7fa f862 	bl	8000af8 <__aeabi_dcmpeq>
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d09f      	beq.n	8006978 <_dtoa_r+0x638>
 8006a38:	e7d1      	b.n	80069de <_dtoa_r+0x69e>
 8006a3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a3c:	2a00      	cmp	r2, #0
 8006a3e:	f000 80ea 	beq.w	8006c16 <_dtoa_r+0x8d6>
 8006a42:	9a07      	ldr	r2, [sp, #28]
 8006a44:	2a01      	cmp	r2, #1
 8006a46:	f300 80cd 	bgt.w	8006be4 <_dtoa_r+0x8a4>
 8006a4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a4c:	2a00      	cmp	r2, #0
 8006a4e:	f000 80c1 	beq.w	8006bd4 <_dtoa_r+0x894>
 8006a52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a56:	9c08      	ldr	r4, [sp, #32]
 8006a58:	9e00      	ldr	r6, [sp, #0]
 8006a5a:	9a00      	ldr	r2, [sp, #0]
 8006a5c:	441a      	add	r2, r3
 8006a5e:	9200      	str	r2, [sp, #0]
 8006a60:	9a06      	ldr	r2, [sp, #24]
 8006a62:	2101      	movs	r1, #1
 8006a64:	441a      	add	r2, r3
 8006a66:	4648      	mov	r0, r9
 8006a68:	9206      	str	r2, [sp, #24]
 8006a6a:	f000 fc77 	bl	800735c <__i2b>
 8006a6e:	4605      	mov	r5, r0
 8006a70:	b166      	cbz	r6, 8006a8c <_dtoa_r+0x74c>
 8006a72:	9b06      	ldr	r3, [sp, #24]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd09      	ble.n	8006a8c <_dtoa_r+0x74c>
 8006a78:	42b3      	cmp	r3, r6
 8006a7a:	9a00      	ldr	r2, [sp, #0]
 8006a7c:	bfa8      	it	ge
 8006a7e:	4633      	movge	r3, r6
 8006a80:	1ad2      	subs	r2, r2, r3
 8006a82:	9200      	str	r2, [sp, #0]
 8006a84:	9a06      	ldr	r2, [sp, #24]
 8006a86:	1af6      	subs	r6, r6, r3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	9306      	str	r3, [sp, #24]
 8006a8c:	9b08      	ldr	r3, [sp, #32]
 8006a8e:	b30b      	cbz	r3, 8006ad4 <_dtoa_r+0x794>
 8006a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80c6 	beq.w	8006c24 <_dtoa_r+0x8e4>
 8006a98:	2c00      	cmp	r4, #0
 8006a9a:	f000 80c0 	beq.w	8006c1e <_dtoa_r+0x8de>
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4648      	mov	r0, r9
 8006aa4:	f000 fd12 	bl	80074cc <__pow5mult>
 8006aa8:	9a02      	ldr	r2, [sp, #8]
 8006aaa:	4601      	mov	r1, r0
 8006aac:	4605      	mov	r5, r0
 8006aae:	4648      	mov	r0, r9
 8006ab0:	f000 fc6a 	bl	8007388 <__multiply>
 8006ab4:	9902      	ldr	r1, [sp, #8]
 8006ab6:	4680      	mov	r8, r0
 8006ab8:	4648      	mov	r0, r9
 8006aba:	f000 fb51 	bl	8007160 <_Bfree>
 8006abe:	9b08      	ldr	r3, [sp, #32]
 8006ac0:	1b1b      	subs	r3, r3, r4
 8006ac2:	9308      	str	r3, [sp, #32]
 8006ac4:	f000 80b1 	beq.w	8006c2a <_dtoa_r+0x8ea>
 8006ac8:	9a08      	ldr	r2, [sp, #32]
 8006aca:	4641      	mov	r1, r8
 8006acc:	4648      	mov	r0, r9
 8006ace:	f000 fcfd 	bl	80074cc <__pow5mult>
 8006ad2:	9002      	str	r0, [sp, #8]
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	4648      	mov	r0, r9
 8006ad8:	f000 fc40 	bl	800735c <__i2b>
 8006adc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ade:	4604      	mov	r4, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 81d8 	beq.w	8006e96 <_dtoa_r+0xb56>
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4601      	mov	r1, r0
 8006aea:	4648      	mov	r0, r9
 8006aec:	f000 fcee 	bl	80074cc <__pow5mult>
 8006af0:	9b07      	ldr	r3, [sp, #28]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	4604      	mov	r4, r0
 8006af6:	f300 809f 	bgt.w	8006c38 <_dtoa_r+0x8f8>
 8006afa:	9b04      	ldr	r3, [sp, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f040 8097 	bne.w	8006c30 <_dtoa_r+0x8f0>
 8006b02:	9b05      	ldr	r3, [sp, #20]
 8006b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 8093 	bne.w	8006c34 <_dtoa_r+0x8f4>
 8006b0e:	9b05      	ldr	r3, [sp, #20]
 8006b10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b14:	0d1b      	lsrs	r3, r3, #20
 8006b16:	051b      	lsls	r3, r3, #20
 8006b18:	b133      	cbz	r3, 8006b28 <_dtoa_r+0x7e8>
 8006b1a:	9b00      	ldr	r3, [sp, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	9b06      	ldr	r3, [sp, #24]
 8006b22:	3301      	adds	r3, #1
 8006b24:	9306      	str	r3, [sp, #24]
 8006b26:	2301      	movs	r3, #1
 8006b28:	9308      	str	r3, [sp, #32]
 8006b2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 81b8 	beq.w	8006ea2 <_dtoa_r+0xb62>
 8006b32:	6923      	ldr	r3, [r4, #16]
 8006b34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b38:	6918      	ldr	r0, [r3, #16]
 8006b3a:	f000 fbc3 	bl	80072c4 <__hi0bits>
 8006b3e:	f1c0 0020 	rsb	r0, r0, #32
 8006b42:	9b06      	ldr	r3, [sp, #24]
 8006b44:	4418      	add	r0, r3
 8006b46:	f010 001f 	ands.w	r0, r0, #31
 8006b4a:	f000 8082 	beq.w	8006c52 <_dtoa_r+0x912>
 8006b4e:	f1c0 0320 	rsb	r3, r0, #32
 8006b52:	2b04      	cmp	r3, #4
 8006b54:	dd73      	ble.n	8006c3e <_dtoa_r+0x8fe>
 8006b56:	9b00      	ldr	r3, [sp, #0]
 8006b58:	f1c0 001c 	rsb	r0, r0, #28
 8006b5c:	4403      	add	r3, r0
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	4403      	add	r3, r0
 8006b64:	4406      	add	r6, r0
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	9b00      	ldr	r3, [sp, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	dd05      	ble.n	8006b7a <_dtoa_r+0x83a>
 8006b6e:	9902      	ldr	r1, [sp, #8]
 8006b70:	461a      	mov	r2, r3
 8006b72:	4648      	mov	r0, r9
 8006b74:	f000 fd04 	bl	8007580 <__lshift>
 8006b78:	9002      	str	r0, [sp, #8]
 8006b7a:	9b06      	ldr	r3, [sp, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	dd05      	ble.n	8006b8c <_dtoa_r+0x84c>
 8006b80:	4621      	mov	r1, r4
 8006b82:	461a      	mov	r2, r3
 8006b84:	4648      	mov	r0, r9
 8006b86:	f000 fcfb 	bl	8007580 <__lshift>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d061      	beq.n	8006c56 <_dtoa_r+0x916>
 8006b92:	9802      	ldr	r0, [sp, #8]
 8006b94:	4621      	mov	r1, r4
 8006b96:	f000 fd5f 	bl	8007658 <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	da5b      	bge.n	8006c56 <_dtoa_r+0x916>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9902      	ldr	r1, [sp, #8]
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	4648      	mov	r0, r9
 8006ba6:	f000 fafd 	bl	80071a4 <__multadd>
 8006baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bac:	9002      	str	r0, [sp, #8]
 8006bae:	f107 38ff 	add.w	r8, r7, #4294967295
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	f000 8177 	beq.w	8006ea6 <_dtoa_r+0xb66>
 8006bb8:	4629      	mov	r1, r5
 8006bba:	2300      	movs	r3, #0
 8006bbc:	220a      	movs	r2, #10
 8006bbe:	4648      	mov	r0, r9
 8006bc0:	f000 faf0 	bl	80071a4 <__multadd>
 8006bc4:	f1bb 0f00 	cmp.w	fp, #0
 8006bc8:	4605      	mov	r5, r0
 8006bca:	dc6f      	bgt.n	8006cac <_dtoa_r+0x96c>
 8006bcc:	9b07      	ldr	r3, [sp, #28]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	dc49      	bgt.n	8006c66 <_dtoa_r+0x926>
 8006bd2:	e06b      	b.n	8006cac <_dtoa_r+0x96c>
 8006bd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006bd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006bda:	e73c      	b.n	8006a56 <_dtoa_r+0x716>
 8006bdc:	3fe00000 	.word	0x3fe00000
 8006be0:	40240000 	.word	0x40240000
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	1e5c      	subs	r4, r3, #1
 8006be8:	9b08      	ldr	r3, [sp, #32]
 8006bea:	42a3      	cmp	r3, r4
 8006bec:	db09      	blt.n	8006c02 <_dtoa_r+0x8c2>
 8006bee:	1b1c      	subs	r4, r3, r4
 8006bf0:	9b03      	ldr	r3, [sp, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f6bf af30 	bge.w	8006a58 <_dtoa_r+0x718>
 8006bf8:	9b00      	ldr	r3, [sp, #0]
 8006bfa:	9a03      	ldr	r2, [sp, #12]
 8006bfc:	1a9e      	subs	r6, r3, r2
 8006bfe:	2300      	movs	r3, #0
 8006c00:	e72b      	b.n	8006a5a <_dtoa_r+0x71a>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006c06:	9408      	str	r4, [sp, #32]
 8006c08:	1ae3      	subs	r3, r4, r3
 8006c0a:	441a      	add	r2, r3
 8006c0c:	9e00      	ldr	r6, [sp, #0]
 8006c0e:	9b03      	ldr	r3, [sp, #12]
 8006c10:	920d      	str	r2, [sp, #52]	@ 0x34
 8006c12:	2400      	movs	r4, #0
 8006c14:	e721      	b.n	8006a5a <_dtoa_r+0x71a>
 8006c16:	9c08      	ldr	r4, [sp, #32]
 8006c18:	9e00      	ldr	r6, [sp, #0]
 8006c1a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006c1c:	e728      	b.n	8006a70 <_dtoa_r+0x730>
 8006c1e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006c22:	e751      	b.n	8006ac8 <_dtoa_r+0x788>
 8006c24:	9a08      	ldr	r2, [sp, #32]
 8006c26:	9902      	ldr	r1, [sp, #8]
 8006c28:	e750      	b.n	8006acc <_dtoa_r+0x78c>
 8006c2a:	f8cd 8008 	str.w	r8, [sp, #8]
 8006c2e:	e751      	b.n	8006ad4 <_dtoa_r+0x794>
 8006c30:	2300      	movs	r3, #0
 8006c32:	e779      	b.n	8006b28 <_dtoa_r+0x7e8>
 8006c34:	9b04      	ldr	r3, [sp, #16]
 8006c36:	e777      	b.n	8006b28 <_dtoa_r+0x7e8>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9308      	str	r3, [sp, #32]
 8006c3c:	e779      	b.n	8006b32 <_dtoa_r+0x7f2>
 8006c3e:	d093      	beq.n	8006b68 <_dtoa_r+0x828>
 8006c40:	9a00      	ldr	r2, [sp, #0]
 8006c42:	331c      	adds	r3, #28
 8006c44:	441a      	add	r2, r3
 8006c46:	9200      	str	r2, [sp, #0]
 8006c48:	9a06      	ldr	r2, [sp, #24]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	441e      	add	r6, r3
 8006c4e:	9206      	str	r2, [sp, #24]
 8006c50:	e78a      	b.n	8006b68 <_dtoa_r+0x828>
 8006c52:	4603      	mov	r3, r0
 8006c54:	e7f4      	b.n	8006c40 <_dtoa_r+0x900>
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	46b8      	mov	r8, r7
 8006c5c:	dc20      	bgt.n	8006ca0 <_dtoa_r+0x960>
 8006c5e:	469b      	mov	fp, r3
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	dd1e      	ble.n	8006ca4 <_dtoa_r+0x964>
 8006c66:	f1bb 0f00 	cmp.w	fp, #0
 8006c6a:	f47f adb1 	bne.w	80067d0 <_dtoa_r+0x490>
 8006c6e:	4621      	mov	r1, r4
 8006c70:	465b      	mov	r3, fp
 8006c72:	2205      	movs	r2, #5
 8006c74:	4648      	mov	r0, r9
 8006c76:	f000 fa95 	bl	80071a4 <__multadd>
 8006c7a:	4601      	mov	r1, r0
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	9802      	ldr	r0, [sp, #8]
 8006c80:	f000 fcea 	bl	8007658 <__mcmp>
 8006c84:	2800      	cmp	r0, #0
 8006c86:	f77f ada3 	ble.w	80067d0 <_dtoa_r+0x490>
 8006c8a:	4656      	mov	r6, sl
 8006c8c:	2331      	movs	r3, #49	@ 0x31
 8006c8e:	f806 3b01 	strb.w	r3, [r6], #1
 8006c92:	f108 0801 	add.w	r8, r8, #1
 8006c96:	e59f      	b.n	80067d8 <_dtoa_r+0x498>
 8006c98:	9c03      	ldr	r4, [sp, #12]
 8006c9a:	46b8      	mov	r8, r7
 8006c9c:	4625      	mov	r5, r4
 8006c9e:	e7f4      	b.n	8006c8a <_dtoa_r+0x94a>
 8006ca0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006ca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8101 	beq.w	8006eae <_dtoa_r+0xb6e>
 8006cac:	2e00      	cmp	r6, #0
 8006cae:	dd05      	ble.n	8006cbc <_dtoa_r+0x97c>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4632      	mov	r2, r6
 8006cb4:	4648      	mov	r0, r9
 8006cb6:	f000 fc63 	bl	8007580 <__lshift>
 8006cba:	4605      	mov	r5, r0
 8006cbc:	9b08      	ldr	r3, [sp, #32]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d05c      	beq.n	8006d7c <_dtoa_r+0xa3c>
 8006cc2:	6869      	ldr	r1, [r5, #4]
 8006cc4:	4648      	mov	r0, r9
 8006cc6:	f000 fa0b 	bl	80070e0 <_Balloc>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b928      	cbnz	r0, 8006cda <_dtoa_r+0x99a>
 8006cce:	4b82      	ldr	r3, [pc, #520]	@ (8006ed8 <_dtoa_r+0xb98>)
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006cd6:	f7ff bb4a 	b.w	800636e <_dtoa_r+0x2e>
 8006cda:	692a      	ldr	r2, [r5, #16]
 8006cdc:	3202      	adds	r2, #2
 8006cde:	0092      	lsls	r2, r2, #2
 8006ce0:	f105 010c 	add.w	r1, r5, #12
 8006ce4:	300c      	adds	r0, #12
 8006ce6:	f7ff fa6e 	bl	80061c6 <memcpy>
 8006cea:	2201      	movs	r2, #1
 8006cec:	4631      	mov	r1, r6
 8006cee:	4648      	mov	r0, r9
 8006cf0:	f000 fc46 	bl	8007580 <__lshift>
 8006cf4:	f10a 0301 	add.w	r3, sl, #1
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	eb0a 030b 	add.w	r3, sl, fp
 8006cfe:	9308      	str	r3, [sp, #32]
 8006d00:	9b04      	ldr	r3, [sp, #16]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	462f      	mov	r7, r5
 8006d08:	9306      	str	r3, [sp, #24]
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	9b00      	ldr	r3, [sp, #0]
 8006d0e:	9802      	ldr	r0, [sp, #8]
 8006d10:	4621      	mov	r1, r4
 8006d12:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d16:	f7ff fa89 	bl	800622c <quorem>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	3330      	adds	r3, #48	@ 0x30
 8006d1e:	9003      	str	r0, [sp, #12]
 8006d20:	4639      	mov	r1, r7
 8006d22:	9802      	ldr	r0, [sp, #8]
 8006d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d26:	f000 fc97 	bl	8007658 <__mcmp>
 8006d2a:	462a      	mov	r2, r5
 8006d2c:	9004      	str	r0, [sp, #16]
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4648      	mov	r0, r9
 8006d32:	f000 fcad 	bl	8007690 <__mdiff>
 8006d36:	68c2      	ldr	r2, [r0, #12]
 8006d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d3a:	4606      	mov	r6, r0
 8006d3c:	bb02      	cbnz	r2, 8006d80 <_dtoa_r+0xa40>
 8006d3e:	4601      	mov	r1, r0
 8006d40:	9802      	ldr	r0, [sp, #8]
 8006d42:	f000 fc89 	bl	8007658 <__mcmp>
 8006d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d48:	4602      	mov	r2, r0
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4648      	mov	r0, r9
 8006d4e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d52:	f000 fa05 	bl	8007160 <_Bfree>
 8006d56:	9b07      	ldr	r3, [sp, #28]
 8006d58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006d5a:	9e00      	ldr	r6, [sp, #0]
 8006d5c:	ea42 0103 	orr.w	r1, r2, r3
 8006d60:	9b06      	ldr	r3, [sp, #24]
 8006d62:	4319      	orrs	r1, r3
 8006d64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d66:	d10d      	bne.n	8006d84 <_dtoa_r+0xa44>
 8006d68:	2b39      	cmp	r3, #57	@ 0x39
 8006d6a:	d027      	beq.n	8006dbc <_dtoa_r+0xa7c>
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	2a00      	cmp	r2, #0
 8006d70:	dd01      	ble.n	8006d76 <_dtoa_r+0xa36>
 8006d72:	9b03      	ldr	r3, [sp, #12]
 8006d74:	3331      	adds	r3, #49	@ 0x31
 8006d76:	f88b 3000 	strb.w	r3, [fp]
 8006d7a:	e52e      	b.n	80067da <_dtoa_r+0x49a>
 8006d7c:	4628      	mov	r0, r5
 8006d7e:	e7b9      	b.n	8006cf4 <_dtoa_r+0x9b4>
 8006d80:	2201      	movs	r2, #1
 8006d82:	e7e2      	b.n	8006d4a <_dtoa_r+0xa0a>
 8006d84:	9904      	ldr	r1, [sp, #16]
 8006d86:	2900      	cmp	r1, #0
 8006d88:	db04      	blt.n	8006d94 <_dtoa_r+0xa54>
 8006d8a:	9807      	ldr	r0, [sp, #28]
 8006d8c:	4301      	orrs	r1, r0
 8006d8e:	9806      	ldr	r0, [sp, #24]
 8006d90:	4301      	orrs	r1, r0
 8006d92:	d120      	bne.n	8006dd6 <_dtoa_r+0xa96>
 8006d94:	2a00      	cmp	r2, #0
 8006d96:	ddee      	ble.n	8006d76 <_dtoa_r+0xa36>
 8006d98:	9902      	ldr	r1, [sp, #8]
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f000 fbee 	bl	8007580 <__lshift>
 8006da4:	4621      	mov	r1, r4
 8006da6:	9002      	str	r0, [sp, #8]
 8006da8:	f000 fc56 	bl	8007658 <__mcmp>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	9b00      	ldr	r3, [sp, #0]
 8006db0:	dc02      	bgt.n	8006db8 <_dtoa_r+0xa78>
 8006db2:	d1e0      	bne.n	8006d76 <_dtoa_r+0xa36>
 8006db4:	07da      	lsls	r2, r3, #31
 8006db6:	d5de      	bpl.n	8006d76 <_dtoa_r+0xa36>
 8006db8:	2b39      	cmp	r3, #57	@ 0x39
 8006dba:	d1da      	bne.n	8006d72 <_dtoa_r+0xa32>
 8006dbc:	2339      	movs	r3, #57	@ 0x39
 8006dbe:	f88b 3000 	strb.w	r3, [fp]
 8006dc2:	4633      	mov	r3, r6
 8006dc4:	461e      	mov	r6, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006dcc:	2a39      	cmp	r2, #57	@ 0x39
 8006dce:	d04e      	beq.n	8006e6e <_dtoa_r+0xb2e>
 8006dd0:	3201      	adds	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
 8006dd4:	e501      	b.n	80067da <_dtoa_r+0x49a>
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	dd03      	ble.n	8006de2 <_dtoa_r+0xaa2>
 8006dda:	2b39      	cmp	r3, #57	@ 0x39
 8006ddc:	d0ee      	beq.n	8006dbc <_dtoa_r+0xa7c>
 8006dde:	3301      	adds	r3, #1
 8006de0:	e7c9      	b.n	8006d76 <_dtoa_r+0xa36>
 8006de2:	9a00      	ldr	r2, [sp, #0]
 8006de4:	9908      	ldr	r1, [sp, #32]
 8006de6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dea:	428a      	cmp	r2, r1
 8006dec:	d028      	beq.n	8006e40 <_dtoa_r+0xb00>
 8006dee:	9902      	ldr	r1, [sp, #8]
 8006df0:	2300      	movs	r3, #0
 8006df2:	220a      	movs	r2, #10
 8006df4:	4648      	mov	r0, r9
 8006df6:	f000 f9d5 	bl	80071a4 <__multadd>
 8006dfa:	42af      	cmp	r7, r5
 8006dfc:	9002      	str	r0, [sp, #8]
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	f04f 020a 	mov.w	r2, #10
 8006e06:	4639      	mov	r1, r7
 8006e08:	4648      	mov	r0, r9
 8006e0a:	d107      	bne.n	8006e1c <_dtoa_r+0xadc>
 8006e0c:	f000 f9ca 	bl	80071a4 <__multadd>
 8006e10:	4607      	mov	r7, r0
 8006e12:	4605      	mov	r5, r0
 8006e14:	9b00      	ldr	r3, [sp, #0]
 8006e16:	3301      	adds	r3, #1
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	e777      	b.n	8006d0c <_dtoa_r+0x9cc>
 8006e1c:	f000 f9c2 	bl	80071a4 <__multadd>
 8006e20:	4629      	mov	r1, r5
 8006e22:	4607      	mov	r7, r0
 8006e24:	2300      	movs	r3, #0
 8006e26:	220a      	movs	r2, #10
 8006e28:	4648      	mov	r0, r9
 8006e2a:	f000 f9bb 	bl	80071a4 <__multadd>
 8006e2e:	4605      	mov	r5, r0
 8006e30:	e7f0      	b.n	8006e14 <_dtoa_r+0xad4>
 8006e32:	f1bb 0f00 	cmp.w	fp, #0
 8006e36:	bfcc      	ite	gt
 8006e38:	465e      	movgt	r6, fp
 8006e3a:	2601      	movle	r6, #1
 8006e3c:	4456      	add	r6, sl
 8006e3e:	2700      	movs	r7, #0
 8006e40:	9902      	ldr	r1, [sp, #8]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	2201      	movs	r2, #1
 8006e46:	4648      	mov	r0, r9
 8006e48:	f000 fb9a 	bl	8007580 <__lshift>
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	9002      	str	r0, [sp, #8]
 8006e50:	f000 fc02 	bl	8007658 <__mcmp>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	dcb4      	bgt.n	8006dc2 <_dtoa_r+0xa82>
 8006e58:	d102      	bne.n	8006e60 <_dtoa_r+0xb20>
 8006e5a:	9b00      	ldr	r3, [sp, #0]
 8006e5c:	07db      	lsls	r3, r3, #31
 8006e5e:	d4b0      	bmi.n	8006dc2 <_dtoa_r+0xa82>
 8006e60:	4633      	mov	r3, r6
 8006e62:	461e      	mov	r6, r3
 8006e64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e68:	2a30      	cmp	r2, #48	@ 0x30
 8006e6a:	d0fa      	beq.n	8006e62 <_dtoa_r+0xb22>
 8006e6c:	e4b5      	b.n	80067da <_dtoa_r+0x49a>
 8006e6e:	459a      	cmp	sl, r3
 8006e70:	d1a8      	bne.n	8006dc4 <_dtoa_r+0xa84>
 8006e72:	2331      	movs	r3, #49	@ 0x31
 8006e74:	f108 0801 	add.w	r8, r8, #1
 8006e78:	f88a 3000 	strb.w	r3, [sl]
 8006e7c:	e4ad      	b.n	80067da <_dtoa_r+0x49a>
 8006e7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006edc <_dtoa_r+0xb9c>
 8006e84:	b11b      	cbz	r3, 8006e8e <_dtoa_r+0xb4e>
 8006e86:	f10a 0308 	add.w	r3, sl, #8
 8006e8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4650      	mov	r0, sl
 8006e90:	b017      	add	sp, #92	@ 0x5c
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	9b07      	ldr	r3, [sp, #28]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	f77f ae2e 	ble.w	8006afa <_dtoa_r+0x7ba>
 8006e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ea0:	9308      	str	r3, [sp, #32]
 8006ea2:	2001      	movs	r0, #1
 8006ea4:	e64d      	b.n	8006b42 <_dtoa_r+0x802>
 8006ea6:	f1bb 0f00 	cmp.w	fp, #0
 8006eaa:	f77f aed9 	ble.w	8006c60 <_dtoa_r+0x920>
 8006eae:	4656      	mov	r6, sl
 8006eb0:	9802      	ldr	r0, [sp, #8]
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	f7ff f9ba 	bl	800622c <quorem>
 8006eb8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ec0:	eba6 020a 	sub.w	r2, r6, sl
 8006ec4:	4593      	cmp	fp, r2
 8006ec6:	ddb4      	ble.n	8006e32 <_dtoa_r+0xaf2>
 8006ec8:	9902      	ldr	r1, [sp, #8]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	220a      	movs	r2, #10
 8006ece:	4648      	mov	r0, r9
 8006ed0:	f000 f968 	bl	80071a4 <__multadd>
 8006ed4:	9002      	str	r0, [sp, #8]
 8006ed6:	e7eb      	b.n	8006eb0 <_dtoa_r+0xb70>
 8006ed8:	08009c77 	.word	0x08009c77
 8006edc:	08009c12 	.word	0x08009c12

08006ee0 <_free_r>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d041      	beq.n	8006f6c <_free_r+0x8c>
 8006ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eec:	1f0c      	subs	r4, r1, #4
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bfb8      	it	lt
 8006ef2:	18e4      	addlt	r4, r4, r3
 8006ef4:	f000 f8e8 	bl	80070c8 <__malloc_lock>
 8006ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f70 <_free_r+0x90>)
 8006efa:	6813      	ldr	r3, [r2, #0]
 8006efc:	b933      	cbnz	r3, 8006f0c <_free_r+0x2c>
 8006efe:	6063      	str	r3, [r4, #4]
 8006f00:	6014      	str	r4, [r2, #0]
 8006f02:	4628      	mov	r0, r5
 8006f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f08:	f000 b8e4 	b.w	80070d4 <__malloc_unlock>
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	d908      	bls.n	8006f22 <_free_r+0x42>
 8006f10:	6820      	ldr	r0, [r4, #0]
 8006f12:	1821      	adds	r1, r4, r0
 8006f14:	428b      	cmp	r3, r1
 8006f16:	bf01      	itttt	eq
 8006f18:	6819      	ldreq	r1, [r3, #0]
 8006f1a:	685b      	ldreq	r3, [r3, #4]
 8006f1c:	1809      	addeq	r1, r1, r0
 8006f1e:	6021      	streq	r1, [r4, #0]
 8006f20:	e7ed      	b.n	8006efe <_free_r+0x1e>
 8006f22:	461a      	mov	r2, r3
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	b10b      	cbz	r3, 8006f2c <_free_r+0x4c>
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d9fa      	bls.n	8006f22 <_free_r+0x42>
 8006f2c:	6811      	ldr	r1, [r2, #0]
 8006f2e:	1850      	adds	r0, r2, r1
 8006f30:	42a0      	cmp	r0, r4
 8006f32:	d10b      	bne.n	8006f4c <_free_r+0x6c>
 8006f34:	6820      	ldr	r0, [r4, #0]
 8006f36:	4401      	add	r1, r0
 8006f38:	1850      	adds	r0, r2, r1
 8006f3a:	4283      	cmp	r3, r0
 8006f3c:	6011      	str	r1, [r2, #0]
 8006f3e:	d1e0      	bne.n	8006f02 <_free_r+0x22>
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	6053      	str	r3, [r2, #4]
 8006f46:	4408      	add	r0, r1
 8006f48:	6010      	str	r0, [r2, #0]
 8006f4a:	e7da      	b.n	8006f02 <_free_r+0x22>
 8006f4c:	d902      	bls.n	8006f54 <_free_r+0x74>
 8006f4e:	230c      	movs	r3, #12
 8006f50:	602b      	str	r3, [r5, #0]
 8006f52:	e7d6      	b.n	8006f02 <_free_r+0x22>
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	1821      	adds	r1, r4, r0
 8006f58:	428b      	cmp	r3, r1
 8006f5a:	bf04      	itt	eq
 8006f5c:	6819      	ldreq	r1, [r3, #0]
 8006f5e:	685b      	ldreq	r3, [r3, #4]
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	bf04      	itt	eq
 8006f64:	1809      	addeq	r1, r1, r0
 8006f66:	6021      	streq	r1, [r4, #0]
 8006f68:	6054      	str	r4, [r2, #4]
 8006f6a:	e7ca      	b.n	8006f02 <_free_r+0x22>
 8006f6c:	bd38      	pop	{r3, r4, r5, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000d14 	.word	0x20000d14

08006f74 <malloc>:
 8006f74:	4b02      	ldr	r3, [pc, #8]	@ (8006f80 <malloc+0xc>)
 8006f76:	4601      	mov	r1, r0
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	f000 b825 	b.w	8006fc8 <_malloc_r>
 8006f7e:	bf00      	nop
 8006f80:	2000001c 	.word	0x2000001c

08006f84 <sbrk_aligned>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4e0f      	ldr	r6, [pc, #60]	@ (8006fc4 <sbrk_aligned+0x40>)
 8006f88:	460c      	mov	r4, r1
 8006f8a:	6831      	ldr	r1, [r6, #0]
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	b911      	cbnz	r1, 8006f96 <sbrk_aligned+0x12>
 8006f90:	f001 fffe 	bl	8008f90 <_sbrk_r>
 8006f94:	6030      	str	r0, [r6, #0]
 8006f96:	4621      	mov	r1, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f001 fff9 	bl	8008f90 <_sbrk_r>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	d103      	bne.n	8006faa <sbrk_aligned+0x26>
 8006fa2:	f04f 34ff 	mov.w	r4, #4294967295
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
 8006faa:	1cc4      	adds	r4, r0, #3
 8006fac:	f024 0403 	bic.w	r4, r4, #3
 8006fb0:	42a0      	cmp	r0, r4
 8006fb2:	d0f8      	beq.n	8006fa6 <sbrk_aligned+0x22>
 8006fb4:	1a21      	subs	r1, r4, r0
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f001 ffea 	bl	8008f90 <_sbrk_r>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d1f2      	bne.n	8006fa6 <sbrk_aligned+0x22>
 8006fc0:	e7ef      	b.n	8006fa2 <sbrk_aligned+0x1e>
 8006fc2:	bf00      	nop
 8006fc4:	20000d10 	.word	0x20000d10

08006fc8 <_malloc_r>:
 8006fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	1ccd      	adds	r5, r1, #3
 8006fce:	f025 0503 	bic.w	r5, r5, #3
 8006fd2:	3508      	adds	r5, #8
 8006fd4:	2d0c      	cmp	r5, #12
 8006fd6:	bf38      	it	cc
 8006fd8:	250c      	movcc	r5, #12
 8006fda:	2d00      	cmp	r5, #0
 8006fdc:	4606      	mov	r6, r0
 8006fde:	db01      	blt.n	8006fe4 <_malloc_r+0x1c>
 8006fe0:	42a9      	cmp	r1, r5
 8006fe2:	d904      	bls.n	8006fee <_malloc_r+0x26>
 8006fe4:	230c      	movs	r3, #12
 8006fe6:	6033      	str	r3, [r6, #0]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80070c4 <_malloc_r+0xfc>
 8006ff2:	f000 f869 	bl	80070c8 <__malloc_lock>
 8006ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8006ffa:	461c      	mov	r4, r3
 8006ffc:	bb44      	cbnz	r4, 8007050 <_malloc_r+0x88>
 8006ffe:	4629      	mov	r1, r5
 8007000:	4630      	mov	r0, r6
 8007002:	f7ff ffbf 	bl	8006f84 <sbrk_aligned>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	4604      	mov	r4, r0
 800700a:	d158      	bne.n	80070be <_malloc_r+0xf6>
 800700c:	f8d8 4000 	ldr.w	r4, [r8]
 8007010:	4627      	mov	r7, r4
 8007012:	2f00      	cmp	r7, #0
 8007014:	d143      	bne.n	800709e <_malloc_r+0xd6>
 8007016:	2c00      	cmp	r4, #0
 8007018:	d04b      	beq.n	80070b2 <_malloc_r+0xea>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	4639      	mov	r1, r7
 800701e:	4630      	mov	r0, r6
 8007020:	eb04 0903 	add.w	r9, r4, r3
 8007024:	f001 ffb4 	bl	8008f90 <_sbrk_r>
 8007028:	4581      	cmp	r9, r0
 800702a:	d142      	bne.n	80070b2 <_malloc_r+0xea>
 800702c:	6821      	ldr	r1, [r4, #0]
 800702e:	1a6d      	subs	r5, r5, r1
 8007030:	4629      	mov	r1, r5
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff ffa6 	bl	8006f84 <sbrk_aligned>
 8007038:	3001      	adds	r0, #1
 800703a:	d03a      	beq.n	80070b2 <_malloc_r+0xea>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	442b      	add	r3, r5
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	f8d8 3000 	ldr.w	r3, [r8]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	bb62      	cbnz	r2, 80070a4 <_malloc_r+0xdc>
 800704a:	f8c8 7000 	str.w	r7, [r8]
 800704e:	e00f      	b.n	8007070 <_malloc_r+0xa8>
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	1b52      	subs	r2, r2, r5
 8007054:	d420      	bmi.n	8007098 <_malloc_r+0xd0>
 8007056:	2a0b      	cmp	r2, #11
 8007058:	d917      	bls.n	800708a <_malloc_r+0xc2>
 800705a:	1961      	adds	r1, r4, r5
 800705c:	42a3      	cmp	r3, r4
 800705e:	6025      	str	r5, [r4, #0]
 8007060:	bf18      	it	ne
 8007062:	6059      	strne	r1, [r3, #4]
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	bf08      	it	eq
 8007068:	f8c8 1000 	streq.w	r1, [r8]
 800706c:	5162      	str	r2, [r4, r5]
 800706e:	604b      	str	r3, [r1, #4]
 8007070:	4630      	mov	r0, r6
 8007072:	f000 f82f 	bl	80070d4 <__malloc_unlock>
 8007076:	f104 000b 	add.w	r0, r4, #11
 800707a:	1d23      	adds	r3, r4, #4
 800707c:	f020 0007 	bic.w	r0, r0, #7
 8007080:	1ac2      	subs	r2, r0, r3
 8007082:	bf1c      	itt	ne
 8007084:	1a1b      	subne	r3, r3, r0
 8007086:	50a3      	strne	r3, [r4, r2]
 8007088:	e7af      	b.n	8006fea <_malloc_r+0x22>
 800708a:	6862      	ldr	r2, [r4, #4]
 800708c:	42a3      	cmp	r3, r4
 800708e:	bf0c      	ite	eq
 8007090:	f8c8 2000 	streq.w	r2, [r8]
 8007094:	605a      	strne	r2, [r3, #4]
 8007096:	e7eb      	b.n	8007070 <_malloc_r+0xa8>
 8007098:	4623      	mov	r3, r4
 800709a:	6864      	ldr	r4, [r4, #4]
 800709c:	e7ae      	b.n	8006ffc <_malloc_r+0x34>
 800709e:	463c      	mov	r4, r7
 80070a0:	687f      	ldr	r7, [r7, #4]
 80070a2:	e7b6      	b.n	8007012 <_malloc_r+0x4a>
 80070a4:	461a      	mov	r2, r3
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d1fb      	bne.n	80070a4 <_malloc_r+0xdc>
 80070ac:	2300      	movs	r3, #0
 80070ae:	6053      	str	r3, [r2, #4]
 80070b0:	e7de      	b.n	8007070 <_malloc_r+0xa8>
 80070b2:	230c      	movs	r3, #12
 80070b4:	6033      	str	r3, [r6, #0]
 80070b6:	4630      	mov	r0, r6
 80070b8:	f000 f80c 	bl	80070d4 <__malloc_unlock>
 80070bc:	e794      	b.n	8006fe8 <_malloc_r+0x20>
 80070be:	6005      	str	r5, [r0, #0]
 80070c0:	e7d6      	b.n	8007070 <_malloc_r+0xa8>
 80070c2:	bf00      	nop
 80070c4:	20000d14 	.word	0x20000d14

080070c8 <__malloc_lock>:
 80070c8:	4801      	ldr	r0, [pc, #4]	@ (80070d0 <__malloc_lock+0x8>)
 80070ca:	f7ff b872 	b.w	80061b2 <__retarget_lock_acquire_recursive>
 80070ce:	bf00      	nop
 80070d0:	20000d0c 	.word	0x20000d0c

080070d4 <__malloc_unlock>:
 80070d4:	4801      	ldr	r0, [pc, #4]	@ (80070dc <__malloc_unlock+0x8>)
 80070d6:	f7ff b86d 	b.w	80061b4 <__retarget_lock_release_recursive>
 80070da:	bf00      	nop
 80070dc:	20000d0c 	.word	0x20000d0c

080070e0 <_Balloc>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	69c6      	ldr	r6, [r0, #28]
 80070e4:	4604      	mov	r4, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	b976      	cbnz	r6, 8007108 <_Balloc+0x28>
 80070ea:	2010      	movs	r0, #16
 80070ec:	f7ff ff42 	bl	8006f74 <malloc>
 80070f0:	4602      	mov	r2, r0
 80070f2:	61e0      	str	r0, [r4, #28]
 80070f4:	b920      	cbnz	r0, 8007100 <_Balloc+0x20>
 80070f6:	4b18      	ldr	r3, [pc, #96]	@ (8007158 <_Balloc+0x78>)
 80070f8:	4818      	ldr	r0, [pc, #96]	@ (800715c <_Balloc+0x7c>)
 80070fa:	216b      	movs	r1, #107	@ 0x6b
 80070fc:	f7ff f878 	bl	80061f0 <__assert_func>
 8007100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007104:	6006      	str	r6, [r0, #0]
 8007106:	60c6      	str	r6, [r0, #12]
 8007108:	69e6      	ldr	r6, [r4, #28]
 800710a:	68f3      	ldr	r3, [r6, #12]
 800710c:	b183      	cbz	r3, 8007130 <_Balloc+0x50>
 800710e:	69e3      	ldr	r3, [r4, #28]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007116:	b9b8      	cbnz	r0, 8007148 <_Balloc+0x68>
 8007118:	2101      	movs	r1, #1
 800711a:	fa01 f605 	lsl.w	r6, r1, r5
 800711e:	1d72      	adds	r2, r6, #5
 8007120:	0092      	lsls	r2, r2, #2
 8007122:	4620      	mov	r0, r4
 8007124:	f001 ff53 	bl	8008fce <_calloc_r>
 8007128:	b160      	cbz	r0, 8007144 <_Balloc+0x64>
 800712a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800712e:	e00e      	b.n	800714e <_Balloc+0x6e>
 8007130:	2221      	movs	r2, #33	@ 0x21
 8007132:	2104      	movs	r1, #4
 8007134:	4620      	mov	r0, r4
 8007136:	f001 ff4a 	bl	8008fce <_calloc_r>
 800713a:	69e3      	ldr	r3, [r4, #28]
 800713c:	60f0      	str	r0, [r6, #12]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e4      	bne.n	800710e <_Balloc+0x2e>
 8007144:	2000      	movs	r0, #0
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	6802      	ldr	r2, [r0, #0]
 800714a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800714e:	2300      	movs	r3, #0
 8007150:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007154:	e7f7      	b.n	8007146 <_Balloc+0x66>
 8007156:	bf00      	nop
 8007158:	08009b65 	.word	0x08009b65
 800715c:	08009c88 	.word	0x08009c88

08007160 <_Bfree>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	69c6      	ldr	r6, [r0, #28]
 8007164:	4605      	mov	r5, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b976      	cbnz	r6, 8007188 <_Bfree+0x28>
 800716a:	2010      	movs	r0, #16
 800716c:	f7ff ff02 	bl	8006f74 <malloc>
 8007170:	4602      	mov	r2, r0
 8007172:	61e8      	str	r0, [r5, #28]
 8007174:	b920      	cbnz	r0, 8007180 <_Bfree+0x20>
 8007176:	4b09      	ldr	r3, [pc, #36]	@ (800719c <_Bfree+0x3c>)
 8007178:	4809      	ldr	r0, [pc, #36]	@ (80071a0 <_Bfree+0x40>)
 800717a:	218f      	movs	r1, #143	@ 0x8f
 800717c:	f7ff f838 	bl	80061f0 <__assert_func>
 8007180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007184:	6006      	str	r6, [r0, #0]
 8007186:	60c6      	str	r6, [r0, #12]
 8007188:	b13c      	cbz	r4, 800719a <_Bfree+0x3a>
 800718a:	69eb      	ldr	r3, [r5, #28]
 800718c:	6862      	ldr	r2, [r4, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007194:	6021      	str	r1, [r4, #0]
 8007196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	08009b65 	.word	0x08009b65
 80071a0:	08009c88 	.word	0x08009c88

080071a4 <__multadd>:
 80071a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a8:	690d      	ldr	r5, [r1, #16]
 80071aa:	4607      	mov	r7, r0
 80071ac:	460c      	mov	r4, r1
 80071ae:	461e      	mov	r6, r3
 80071b0:	f101 0c14 	add.w	ip, r1, #20
 80071b4:	2000      	movs	r0, #0
 80071b6:	f8dc 3000 	ldr.w	r3, [ip]
 80071ba:	b299      	uxth	r1, r3
 80071bc:	fb02 6101 	mla	r1, r2, r1, r6
 80071c0:	0c1e      	lsrs	r6, r3, #16
 80071c2:	0c0b      	lsrs	r3, r1, #16
 80071c4:	fb02 3306 	mla	r3, r2, r6, r3
 80071c8:	b289      	uxth	r1, r1
 80071ca:	3001      	adds	r0, #1
 80071cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071d0:	4285      	cmp	r5, r0
 80071d2:	f84c 1b04 	str.w	r1, [ip], #4
 80071d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071da:	dcec      	bgt.n	80071b6 <__multadd+0x12>
 80071dc:	b30e      	cbz	r6, 8007222 <__multadd+0x7e>
 80071de:	68a3      	ldr	r3, [r4, #8]
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dc19      	bgt.n	8007218 <__multadd+0x74>
 80071e4:	6861      	ldr	r1, [r4, #4]
 80071e6:	4638      	mov	r0, r7
 80071e8:	3101      	adds	r1, #1
 80071ea:	f7ff ff79 	bl	80070e0 <_Balloc>
 80071ee:	4680      	mov	r8, r0
 80071f0:	b928      	cbnz	r0, 80071fe <__multadd+0x5a>
 80071f2:	4602      	mov	r2, r0
 80071f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <__multadd+0x84>)
 80071f6:	480d      	ldr	r0, [pc, #52]	@ (800722c <__multadd+0x88>)
 80071f8:	21ba      	movs	r1, #186	@ 0xba
 80071fa:	f7fe fff9 	bl	80061f0 <__assert_func>
 80071fe:	6922      	ldr	r2, [r4, #16]
 8007200:	3202      	adds	r2, #2
 8007202:	f104 010c 	add.w	r1, r4, #12
 8007206:	0092      	lsls	r2, r2, #2
 8007208:	300c      	adds	r0, #12
 800720a:	f7fe ffdc 	bl	80061c6 <memcpy>
 800720e:	4621      	mov	r1, r4
 8007210:	4638      	mov	r0, r7
 8007212:	f7ff ffa5 	bl	8007160 <_Bfree>
 8007216:	4644      	mov	r4, r8
 8007218:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800721c:	3501      	adds	r5, #1
 800721e:	615e      	str	r6, [r3, #20]
 8007220:	6125      	str	r5, [r4, #16]
 8007222:	4620      	mov	r0, r4
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	08009c77 	.word	0x08009c77
 800722c:	08009c88 	.word	0x08009c88

08007230 <__s2b>:
 8007230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	4615      	mov	r5, r2
 8007238:	461f      	mov	r7, r3
 800723a:	2209      	movs	r2, #9
 800723c:	3308      	adds	r3, #8
 800723e:	4606      	mov	r6, r0
 8007240:	fb93 f3f2 	sdiv	r3, r3, r2
 8007244:	2100      	movs	r1, #0
 8007246:	2201      	movs	r2, #1
 8007248:	429a      	cmp	r2, r3
 800724a:	db09      	blt.n	8007260 <__s2b+0x30>
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff ff47 	bl	80070e0 <_Balloc>
 8007252:	b940      	cbnz	r0, 8007266 <__s2b+0x36>
 8007254:	4602      	mov	r2, r0
 8007256:	4b19      	ldr	r3, [pc, #100]	@ (80072bc <__s2b+0x8c>)
 8007258:	4819      	ldr	r0, [pc, #100]	@ (80072c0 <__s2b+0x90>)
 800725a:	21d3      	movs	r1, #211	@ 0xd3
 800725c:	f7fe ffc8 	bl	80061f0 <__assert_func>
 8007260:	0052      	lsls	r2, r2, #1
 8007262:	3101      	adds	r1, #1
 8007264:	e7f0      	b.n	8007248 <__s2b+0x18>
 8007266:	9b08      	ldr	r3, [sp, #32]
 8007268:	6143      	str	r3, [r0, #20]
 800726a:	2d09      	cmp	r5, #9
 800726c:	f04f 0301 	mov.w	r3, #1
 8007270:	6103      	str	r3, [r0, #16]
 8007272:	dd16      	ble.n	80072a2 <__s2b+0x72>
 8007274:	f104 0909 	add.w	r9, r4, #9
 8007278:	46c8      	mov	r8, r9
 800727a:	442c      	add	r4, r5
 800727c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007280:	4601      	mov	r1, r0
 8007282:	3b30      	subs	r3, #48	@ 0x30
 8007284:	220a      	movs	r2, #10
 8007286:	4630      	mov	r0, r6
 8007288:	f7ff ff8c 	bl	80071a4 <__multadd>
 800728c:	45a0      	cmp	r8, r4
 800728e:	d1f5      	bne.n	800727c <__s2b+0x4c>
 8007290:	f1a5 0408 	sub.w	r4, r5, #8
 8007294:	444c      	add	r4, r9
 8007296:	1b2d      	subs	r5, r5, r4
 8007298:	1963      	adds	r3, r4, r5
 800729a:	42bb      	cmp	r3, r7
 800729c:	db04      	blt.n	80072a8 <__s2b+0x78>
 800729e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a2:	340a      	adds	r4, #10
 80072a4:	2509      	movs	r5, #9
 80072a6:	e7f6      	b.n	8007296 <__s2b+0x66>
 80072a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072ac:	4601      	mov	r1, r0
 80072ae:	3b30      	subs	r3, #48	@ 0x30
 80072b0:	220a      	movs	r2, #10
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ff76 	bl	80071a4 <__multadd>
 80072b8:	e7ee      	b.n	8007298 <__s2b+0x68>
 80072ba:	bf00      	nop
 80072bc:	08009c77 	.word	0x08009c77
 80072c0:	08009c88 	.word	0x08009c88

080072c4 <__hi0bits>:
 80072c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80072c8:	4603      	mov	r3, r0
 80072ca:	bf36      	itet	cc
 80072cc:	0403      	lslcc	r3, r0, #16
 80072ce:	2000      	movcs	r0, #0
 80072d0:	2010      	movcc	r0, #16
 80072d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072d6:	bf3c      	itt	cc
 80072d8:	021b      	lslcc	r3, r3, #8
 80072da:	3008      	addcc	r0, #8
 80072dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072e0:	bf3c      	itt	cc
 80072e2:	011b      	lslcc	r3, r3, #4
 80072e4:	3004      	addcc	r0, #4
 80072e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ea:	bf3c      	itt	cc
 80072ec:	009b      	lslcc	r3, r3, #2
 80072ee:	3002      	addcc	r0, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	db05      	blt.n	8007300 <__hi0bits+0x3c>
 80072f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072f8:	f100 0001 	add.w	r0, r0, #1
 80072fc:	bf08      	it	eq
 80072fe:	2020      	moveq	r0, #32
 8007300:	4770      	bx	lr

08007302 <__lo0bits>:
 8007302:	6803      	ldr	r3, [r0, #0]
 8007304:	4602      	mov	r2, r0
 8007306:	f013 0007 	ands.w	r0, r3, #7
 800730a:	d00b      	beq.n	8007324 <__lo0bits+0x22>
 800730c:	07d9      	lsls	r1, r3, #31
 800730e:	d421      	bmi.n	8007354 <__lo0bits+0x52>
 8007310:	0798      	lsls	r0, r3, #30
 8007312:	bf49      	itett	mi
 8007314:	085b      	lsrmi	r3, r3, #1
 8007316:	089b      	lsrpl	r3, r3, #2
 8007318:	2001      	movmi	r0, #1
 800731a:	6013      	strmi	r3, [r2, #0]
 800731c:	bf5c      	itt	pl
 800731e:	6013      	strpl	r3, [r2, #0]
 8007320:	2002      	movpl	r0, #2
 8007322:	4770      	bx	lr
 8007324:	b299      	uxth	r1, r3
 8007326:	b909      	cbnz	r1, 800732c <__lo0bits+0x2a>
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	2010      	movs	r0, #16
 800732c:	b2d9      	uxtb	r1, r3
 800732e:	b909      	cbnz	r1, 8007334 <__lo0bits+0x32>
 8007330:	3008      	adds	r0, #8
 8007332:	0a1b      	lsrs	r3, r3, #8
 8007334:	0719      	lsls	r1, r3, #28
 8007336:	bf04      	itt	eq
 8007338:	091b      	lsreq	r3, r3, #4
 800733a:	3004      	addeq	r0, #4
 800733c:	0799      	lsls	r1, r3, #30
 800733e:	bf04      	itt	eq
 8007340:	089b      	lsreq	r3, r3, #2
 8007342:	3002      	addeq	r0, #2
 8007344:	07d9      	lsls	r1, r3, #31
 8007346:	d403      	bmi.n	8007350 <__lo0bits+0x4e>
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	f100 0001 	add.w	r0, r0, #1
 800734e:	d003      	beq.n	8007358 <__lo0bits+0x56>
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	4770      	bx	lr
 8007354:	2000      	movs	r0, #0
 8007356:	4770      	bx	lr
 8007358:	2020      	movs	r0, #32
 800735a:	4770      	bx	lr

0800735c <__i2b>:
 800735c:	b510      	push	{r4, lr}
 800735e:	460c      	mov	r4, r1
 8007360:	2101      	movs	r1, #1
 8007362:	f7ff febd 	bl	80070e0 <_Balloc>
 8007366:	4602      	mov	r2, r0
 8007368:	b928      	cbnz	r0, 8007376 <__i2b+0x1a>
 800736a:	4b05      	ldr	r3, [pc, #20]	@ (8007380 <__i2b+0x24>)
 800736c:	4805      	ldr	r0, [pc, #20]	@ (8007384 <__i2b+0x28>)
 800736e:	f240 1145 	movw	r1, #325	@ 0x145
 8007372:	f7fe ff3d 	bl	80061f0 <__assert_func>
 8007376:	2301      	movs	r3, #1
 8007378:	6144      	str	r4, [r0, #20]
 800737a:	6103      	str	r3, [r0, #16]
 800737c:	bd10      	pop	{r4, pc}
 800737e:	bf00      	nop
 8007380:	08009c77 	.word	0x08009c77
 8007384:	08009c88 	.word	0x08009c88

08007388 <__multiply>:
 8007388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738c:	4617      	mov	r7, r2
 800738e:	690a      	ldr	r2, [r1, #16]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	429a      	cmp	r2, r3
 8007394:	bfa8      	it	ge
 8007396:	463b      	movge	r3, r7
 8007398:	4689      	mov	r9, r1
 800739a:	bfa4      	itt	ge
 800739c:	460f      	movge	r7, r1
 800739e:	4699      	movge	r9, r3
 80073a0:	693d      	ldr	r5, [r7, #16]
 80073a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	eb05 060a 	add.w	r6, r5, sl
 80073ae:	42b3      	cmp	r3, r6
 80073b0:	b085      	sub	sp, #20
 80073b2:	bfb8      	it	lt
 80073b4:	3101      	addlt	r1, #1
 80073b6:	f7ff fe93 	bl	80070e0 <_Balloc>
 80073ba:	b930      	cbnz	r0, 80073ca <__multiply+0x42>
 80073bc:	4602      	mov	r2, r0
 80073be:	4b41      	ldr	r3, [pc, #260]	@ (80074c4 <__multiply+0x13c>)
 80073c0:	4841      	ldr	r0, [pc, #260]	@ (80074c8 <__multiply+0x140>)
 80073c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80073c6:	f7fe ff13 	bl	80061f0 <__assert_func>
 80073ca:	f100 0414 	add.w	r4, r0, #20
 80073ce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80073d2:	4623      	mov	r3, r4
 80073d4:	2200      	movs	r2, #0
 80073d6:	4573      	cmp	r3, lr
 80073d8:	d320      	bcc.n	800741c <__multiply+0x94>
 80073da:	f107 0814 	add.w	r8, r7, #20
 80073de:	f109 0114 	add.w	r1, r9, #20
 80073e2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80073e6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80073ea:	9302      	str	r3, [sp, #8]
 80073ec:	1beb      	subs	r3, r5, r7
 80073ee:	3b15      	subs	r3, #21
 80073f0:	f023 0303 	bic.w	r3, r3, #3
 80073f4:	3304      	adds	r3, #4
 80073f6:	3715      	adds	r7, #21
 80073f8:	42bd      	cmp	r5, r7
 80073fa:	bf38      	it	cc
 80073fc:	2304      	movcc	r3, #4
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	9b02      	ldr	r3, [sp, #8]
 8007402:	9103      	str	r1, [sp, #12]
 8007404:	428b      	cmp	r3, r1
 8007406:	d80c      	bhi.n	8007422 <__multiply+0x9a>
 8007408:	2e00      	cmp	r6, #0
 800740a:	dd03      	ble.n	8007414 <__multiply+0x8c>
 800740c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007410:	2b00      	cmp	r3, #0
 8007412:	d055      	beq.n	80074c0 <__multiply+0x138>
 8007414:	6106      	str	r6, [r0, #16]
 8007416:	b005      	add	sp, #20
 8007418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741c:	f843 2b04 	str.w	r2, [r3], #4
 8007420:	e7d9      	b.n	80073d6 <__multiply+0x4e>
 8007422:	f8b1 a000 	ldrh.w	sl, [r1]
 8007426:	f1ba 0f00 	cmp.w	sl, #0
 800742a:	d01f      	beq.n	800746c <__multiply+0xe4>
 800742c:	46c4      	mov	ip, r8
 800742e:	46a1      	mov	r9, r4
 8007430:	2700      	movs	r7, #0
 8007432:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007436:	f8d9 3000 	ldr.w	r3, [r9]
 800743a:	fa1f fb82 	uxth.w	fp, r2
 800743e:	b29b      	uxth	r3, r3
 8007440:	fb0a 330b 	mla	r3, sl, fp, r3
 8007444:	443b      	add	r3, r7
 8007446:	f8d9 7000 	ldr.w	r7, [r9]
 800744a:	0c12      	lsrs	r2, r2, #16
 800744c:	0c3f      	lsrs	r7, r7, #16
 800744e:	fb0a 7202 	mla	r2, sl, r2, r7
 8007452:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007456:	b29b      	uxth	r3, r3
 8007458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745c:	4565      	cmp	r5, ip
 800745e:	f849 3b04 	str.w	r3, [r9], #4
 8007462:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007466:	d8e4      	bhi.n	8007432 <__multiply+0xaa>
 8007468:	9b01      	ldr	r3, [sp, #4]
 800746a:	50e7      	str	r7, [r4, r3]
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007472:	3104      	adds	r1, #4
 8007474:	f1b9 0f00 	cmp.w	r9, #0
 8007478:	d020      	beq.n	80074bc <__multiply+0x134>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	4647      	mov	r7, r8
 800747e:	46a4      	mov	ip, r4
 8007480:	f04f 0a00 	mov.w	sl, #0
 8007484:	f8b7 b000 	ldrh.w	fp, [r7]
 8007488:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800748c:	fb09 220b 	mla	r2, r9, fp, r2
 8007490:	4452      	add	r2, sl
 8007492:	b29b      	uxth	r3, r3
 8007494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007498:	f84c 3b04 	str.w	r3, [ip], #4
 800749c:	f857 3b04 	ldr.w	r3, [r7], #4
 80074a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074a4:	f8bc 3000 	ldrh.w	r3, [ip]
 80074a8:	fb09 330a 	mla	r3, r9, sl, r3
 80074ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80074b0:	42bd      	cmp	r5, r7
 80074b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074b6:	d8e5      	bhi.n	8007484 <__multiply+0xfc>
 80074b8:	9a01      	ldr	r2, [sp, #4]
 80074ba:	50a3      	str	r3, [r4, r2]
 80074bc:	3404      	adds	r4, #4
 80074be:	e79f      	b.n	8007400 <__multiply+0x78>
 80074c0:	3e01      	subs	r6, #1
 80074c2:	e7a1      	b.n	8007408 <__multiply+0x80>
 80074c4:	08009c77 	.word	0x08009c77
 80074c8:	08009c88 	.word	0x08009c88

080074cc <__pow5mult>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	4615      	mov	r5, r2
 80074d2:	f012 0203 	ands.w	r2, r2, #3
 80074d6:	4607      	mov	r7, r0
 80074d8:	460e      	mov	r6, r1
 80074da:	d007      	beq.n	80074ec <__pow5mult+0x20>
 80074dc:	4c25      	ldr	r4, [pc, #148]	@ (8007574 <__pow5mult+0xa8>)
 80074de:	3a01      	subs	r2, #1
 80074e0:	2300      	movs	r3, #0
 80074e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074e6:	f7ff fe5d 	bl	80071a4 <__multadd>
 80074ea:	4606      	mov	r6, r0
 80074ec:	10ad      	asrs	r5, r5, #2
 80074ee:	d03d      	beq.n	800756c <__pow5mult+0xa0>
 80074f0:	69fc      	ldr	r4, [r7, #28]
 80074f2:	b97c      	cbnz	r4, 8007514 <__pow5mult+0x48>
 80074f4:	2010      	movs	r0, #16
 80074f6:	f7ff fd3d 	bl	8006f74 <malloc>
 80074fa:	4602      	mov	r2, r0
 80074fc:	61f8      	str	r0, [r7, #28]
 80074fe:	b928      	cbnz	r0, 800750c <__pow5mult+0x40>
 8007500:	4b1d      	ldr	r3, [pc, #116]	@ (8007578 <__pow5mult+0xac>)
 8007502:	481e      	ldr	r0, [pc, #120]	@ (800757c <__pow5mult+0xb0>)
 8007504:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007508:	f7fe fe72 	bl	80061f0 <__assert_func>
 800750c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007510:	6004      	str	r4, [r0, #0]
 8007512:	60c4      	str	r4, [r0, #12]
 8007514:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800751c:	b94c      	cbnz	r4, 8007532 <__pow5mult+0x66>
 800751e:	f240 2171 	movw	r1, #625	@ 0x271
 8007522:	4638      	mov	r0, r7
 8007524:	f7ff ff1a 	bl	800735c <__i2b>
 8007528:	2300      	movs	r3, #0
 800752a:	f8c8 0008 	str.w	r0, [r8, #8]
 800752e:	4604      	mov	r4, r0
 8007530:	6003      	str	r3, [r0, #0]
 8007532:	f04f 0900 	mov.w	r9, #0
 8007536:	07eb      	lsls	r3, r5, #31
 8007538:	d50a      	bpl.n	8007550 <__pow5mult+0x84>
 800753a:	4631      	mov	r1, r6
 800753c:	4622      	mov	r2, r4
 800753e:	4638      	mov	r0, r7
 8007540:	f7ff ff22 	bl	8007388 <__multiply>
 8007544:	4631      	mov	r1, r6
 8007546:	4680      	mov	r8, r0
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff fe09 	bl	8007160 <_Bfree>
 800754e:	4646      	mov	r6, r8
 8007550:	106d      	asrs	r5, r5, #1
 8007552:	d00b      	beq.n	800756c <__pow5mult+0xa0>
 8007554:	6820      	ldr	r0, [r4, #0]
 8007556:	b938      	cbnz	r0, 8007568 <__pow5mult+0x9c>
 8007558:	4622      	mov	r2, r4
 800755a:	4621      	mov	r1, r4
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff ff13 	bl	8007388 <__multiply>
 8007562:	6020      	str	r0, [r4, #0]
 8007564:	f8c0 9000 	str.w	r9, [r0]
 8007568:	4604      	mov	r4, r0
 800756a:	e7e4      	b.n	8007536 <__pow5mult+0x6a>
 800756c:	4630      	mov	r0, r6
 800756e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007572:	bf00      	nop
 8007574:	08009d5c 	.word	0x08009d5c
 8007578:	08009b65 	.word	0x08009b65
 800757c:	08009c88 	.word	0x08009c88

08007580 <__lshift>:
 8007580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	6849      	ldr	r1, [r1, #4]
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800758e:	68a3      	ldr	r3, [r4, #8]
 8007590:	4607      	mov	r7, r0
 8007592:	4691      	mov	r9, r2
 8007594:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007598:	f108 0601 	add.w	r6, r8, #1
 800759c:	42b3      	cmp	r3, r6
 800759e:	db0b      	blt.n	80075b8 <__lshift+0x38>
 80075a0:	4638      	mov	r0, r7
 80075a2:	f7ff fd9d 	bl	80070e0 <_Balloc>
 80075a6:	4605      	mov	r5, r0
 80075a8:	b948      	cbnz	r0, 80075be <__lshift+0x3e>
 80075aa:	4602      	mov	r2, r0
 80075ac:	4b28      	ldr	r3, [pc, #160]	@ (8007650 <__lshift+0xd0>)
 80075ae:	4829      	ldr	r0, [pc, #164]	@ (8007654 <__lshift+0xd4>)
 80075b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80075b4:	f7fe fe1c 	bl	80061f0 <__assert_func>
 80075b8:	3101      	adds	r1, #1
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	e7ee      	b.n	800759c <__lshift+0x1c>
 80075be:	2300      	movs	r3, #0
 80075c0:	f100 0114 	add.w	r1, r0, #20
 80075c4:	f100 0210 	add.w	r2, r0, #16
 80075c8:	4618      	mov	r0, r3
 80075ca:	4553      	cmp	r3, sl
 80075cc:	db33      	blt.n	8007636 <__lshift+0xb6>
 80075ce:	6920      	ldr	r0, [r4, #16]
 80075d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075d4:	f104 0314 	add.w	r3, r4, #20
 80075d8:	f019 091f 	ands.w	r9, r9, #31
 80075dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075e4:	d02b      	beq.n	800763e <__lshift+0xbe>
 80075e6:	f1c9 0e20 	rsb	lr, r9, #32
 80075ea:	468a      	mov	sl, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	6818      	ldr	r0, [r3, #0]
 80075f0:	fa00 f009 	lsl.w	r0, r0, r9
 80075f4:	4310      	orrs	r0, r2
 80075f6:	f84a 0b04 	str.w	r0, [sl], #4
 80075fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fe:	459c      	cmp	ip, r3
 8007600:	fa22 f20e 	lsr.w	r2, r2, lr
 8007604:	d8f3      	bhi.n	80075ee <__lshift+0x6e>
 8007606:	ebac 0304 	sub.w	r3, ip, r4
 800760a:	3b15      	subs	r3, #21
 800760c:	f023 0303 	bic.w	r3, r3, #3
 8007610:	3304      	adds	r3, #4
 8007612:	f104 0015 	add.w	r0, r4, #21
 8007616:	4560      	cmp	r0, ip
 8007618:	bf88      	it	hi
 800761a:	2304      	movhi	r3, #4
 800761c:	50ca      	str	r2, [r1, r3]
 800761e:	b10a      	cbz	r2, 8007624 <__lshift+0xa4>
 8007620:	f108 0602 	add.w	r6, r8, #2
 8007624:	3e01      	subs	r6, #1
 8007626:	4638      	mov	r0, r7
 8007628:	612e      	str	r6, [r5, #16]
 800762a:	4621      	mov	r1, r4
 800762c:	f7ff fd98 	bl	8007160 <_Bfree>
 8007630:	4628      	mov	r0, r5
 8007632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007636:	f842 0f04 	str.w	r0, [r2, #4]!
 800763a:	3301      	adds	r3, #1
 800763c:	e7c5      	b.n	80075ca <__lshift+0x4a>
 800763e:	3904      	subs	r1, #4
 8007640:	f853 2b04 	ldr.w	r2, [r3], #4
 8007644:	f841 2f04 	str.w	r2, [r1, #4]!
 8007648:	459c      	cmp	ip, r3
 800764a:	d8f9      	bhi.n	8007640 <__lshift+0xc0>
 800764c:	e7ea      	b.n	8007624 <__lshift+0xa4>
 800764e:	bf00      	nop
 8007650:	08009c77 	.word	0x08009c77
 8007654:	08009c88 	.word	0x08009c88

08007658 <__mcmp>:
 8007658:	690a      	ldr	r2, [r1, #16]
 800765a:	4603      	mov	r3, r0
 800765c:	6900      	ldr	r0, [r0, #16]
 800765e:	1a80      	subs	r0, r0, r2
 8007660:	b530      	push	{r4, r5, lr}
 8007662:	d10e      	bne.n	8007682 <__mcmp+0x2a>
 8007664:	3314      	adds	r3, #20
 8007666:	3114      	adds	r1, #20
 8007668:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800766c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007670:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007674:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007678:	4295      	cmp	r5, r2
 800767a:	d003      	beq.n	8007684 <__mcmp+0x2c>
 800767c:	d205      	bcs.n	800768a <__mcmp+0x32>
 800767e:	f04f 30ff 	mov.w	r0, #4294967295
 8007682:	bd30      	pop	{r4, r5, pc}
 8007684:	42a3      	cmp	r3, r4
 8007686:	d3f3      	bcc.n	8007670 <__mcmp+0x18>
 8007688:	e7fb      	b.n	8007682 <__mcmp+0x2a>
 800768a:	2001      	movs	r0, #1
 800768c:	e7f9      	b.n	8007682 <__mcmp+0x2a>
	...

08007690 <__mdiff>:
 8007690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	4689      	mov	r9, r1
 8007696:	4606      	mov	r6, r0
 8007698:	4611      	mov	r1, r2
 800769a:	4648      	mov	r0, r9
 800769c:	4614      	mov	r4, r2
 800769e:	f7ff ffdb 	bl	8007658 <__mcmp>
 80076a2:	1e05      	subs	r5, r0, #0
 80076a4:	d112      	bne.n	80076cc <__mdiff+0x3c>
 80076a6:	4629      	mov	r1, r5
 80076a8:	4630      	mov	r0, r6
 80076aa:	f7ff fd19 	bl	80070e0 <_Balloc>
 80076ae:	4602      	mov	r2, r0
 80076b0:	b928      	cbnz	r0, 80076be <__mdiff+0x2e>
 80076b2:	4b3f      	ldr	r3, [pc, #252]	@ (80077b0 <__mdiff+0x120>)
 80076b4:	f240 2137 	movw	r1, #567	@ 0x237
 80076b8:	483e      	ldr	r0, [pc, #248]	@ (80077b4 <__mdiff+0x124>)
 80076ba:	f7fe fd99 	bl	80061f0 <__assert_func>
 80076be:	2301      	movs	r3, #1
 80076c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80076c4:	4610      	mov	r0, r2
 80076c6:	b003      	add	sp, #12
 80076c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076cc:	bfbc      	itt	lt
 80076ce:	464b      	movlt	r3, r9
 80076d0:	46a1      	movlt	r9, r4
 80076d2:	4630      	mov	r0, r6
 80076d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076d8:	bfba      	itte	lt
 80076da:	461c      	movlt	r4, r3
 80076dc:	2501      	movlt	r5, #1
 80076de:	2500      	movge	r5, #0
 80076e0:	f7ff fcfe 	bl	80070e0 <_Balloc>
 80076e4:	4602      	mov	r2, r0
 80076e6:	b918      	cbnz	r0, 80076f0 <__mdiff+0x60>
 80076e8:	4b31      	ldr	r3, [pc, #196]	@ (80077b0 <__mdiff+0x120>)
 80076ea:	f240 2145 	movw	r1, #581	@ 0x245
 80076ee:	e7e3      	b.n	80076b8 <__mdiff+0x28>
 80076f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076f4:	6926      	ldr	r6, [r4, #16]
 80076f6:	60c5      	str	r5, [r0, #12]
 80076f8:	f109 0310 	add.w	r3, r9, #16
 80076fc:	f109 0514 	add.w	r5, r9, #20
 8007700:	f104 0e14 	add.w	lr, r4, #20
 8007704:	f100 0b14 	add.w	fp, r0, #20
 8007708:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800770c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	46d9      	mov	r9, fp
 8007714:	f04f 0c00 	mov.w	ip, #0
 8007718:	9b01      	ldr	r3, [sp, #4]
 800771a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800771e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007722:	9301      	str	r3, [sp, #4]
 8007724:	fa1f f38a 	uxth.w	r3, sl
 8007728:	4619      	mov	r1, r3
 800772a:	b283      	uxth	r3, r0
 800772c:	1acb      	subs	r3, r1, r3
 800772e:	0c00      	lsrs	r0, r0, #16
 8007730:	4463      	add	r3, ip
 8007732:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007736:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800773a:	b29b      	uxth	r3, r3
 800773c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007740:	4576      	cmp	r6, lr
 8007742:	f849 3b04 	str.w	r3, [r9], #4
 8007746:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800774a:	d8e5      	bhi.n	8007718 <__mdiff+0x88>
 800774c:	1b33      	subs	r3, r6, r4
 800774e:	3b15      	subs	r3, #21
 8007750:	f023 0303 	bic.w	r3, r3, #3
 8007754:	3415      	adds	r4, #21
 8007756:	3304      	adds	r3, #4
 8007758:	42a6      	cmp	r6, r4
 800775a:	bf38      	it	cc
 800775c:	2304      	movcc	r3, #4
 800775e:	441d      	add	r5, r3
 8007760:	445b      	add	r3, fp
 8007762:	461e      	mov	r6, r3
 8007764:	462c      	mov	r4, r5
 8007766:	4544      	cmp	r4, r8
 8007768:	d30e      	bcc.n	8007788 <__mdiff+0xf8>
 800776a:	f108 0103 	add.w	r1, r8, #3
 800776e:	1b49      	subs	r1, r1, r5
 8007770:	f021 0103 	bic.w	r1, r1, #3
 8007774:	3d03      	subs	r5, #3
 8007776:	45a8      	cmp	r8, r5
 8007778:	bf38      	it	cc
 800777a:	2100      	movcc	r1, #0
 800777c:	440b      	add	r3, r1
 800777e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007782:	b191      	cbz	r1, 80077aa <__mdiff+0x11a>
 8007784:	6117      	str	r7, [r2, #16]
 8007786:	e79d      	b.n	80076c4 <__mdiff+0x34>
 8007788:	f854 1b04 	ldr.w	r1, [r4], #4
 800778c:	46e6      	mov	lr, ip
 800778e:	0c08      	lsrs	r0, r1, #16
 8007790:	fa1c fc81 	uxtah	ip, ip, r1
 8007794:	4471      	add	r1, lr
 8007796:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800779a:	b289      	uxth	r1, r1
 800779c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077a0:	f846 1b04 	str.w	r1, [r6], #4
 80077a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077a8:	e7dd      	b.n	8007766 <__mdiff+0xd6>
 80077aa:	3f01      	subs	r7, #1
 80077ac:	e7e7      	b.n	800777e <__mdiff+0xee>
 80077ae:	bf00      	nop
 80077b0:	08009c77 	.word	0x08009c77
 80077b4:	08009c88 	.word	0x08009c88

080077b8 <__ulp>:
 80077b8:	b082      	sub	sp, #8
 80077ba:	ed8d 0b00 	vstr	d0, [sp]
 80077be:	9a01      	ldr	r2, [sp, #4]
 80077c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007800 <__ulp+0x48>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	dc08      	bgt.n	80077de <__ulp+0x26>
 80077cc:	425b      	negs	r3, r3
 80077ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80077d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077d6:	da04      	bge.n	80077e2 <__ulp+0x2a>
 80077d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80077dc:	4113      	asrs	r3, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	e008      	b.n	80077f4 <__ulp+0x3c>
 80077e2:	f1a2 0314 	sub.w	r3, r2, #20
 80077e6:	2b1e      	cmp	r3, #30
 80077e8:	bfda      	itte	le
 80077ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80077ee:	40da      	lsrle	r2, r3
 80077f0:	2201      	movgt	r2, #1
 80077f2:	2300      	movs	r3, #0
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	ec41 0b10 	vmov	d0, r0, r1
 80077fc:	b002      	add	sp, #8
 80077fe:	4770      	bx	lr
 8007800:	7ff00000 	.word	0x7ff00000

08007804 <__b2d>:
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	6906      	ldr	r6, [r0, #16]
 800780a:	f100 0814 	add.w	r8, r0, #20
 800780e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007812:	1f37      	subs	r7, r6, #4
 8007814:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007818:	4610      	mov	r0, r2
 800781a:	f7ff fd53 	bl	80072c4 <__hi0bits>
 800781e:	f1c0 0320 	rsb	r3, r0, #32
 8007822:	280a      	cmp	r0, #10
 8007824:	600b      	str	r3, [r1, #0]
 8007826:	491b      	ldr	r1, [pc, #108]	@ (8007894 <__b2d+0x90>)
 8007828:	dc15      	bgt.n	8007856 <__b2d+0x52>
 800782a:	f1c0 0c0b 	rsb	ip, r0, #11
 800782e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007832:	45b8      	cmp	r8, r7
 8007834:	ea43 0501 	orr.w	r5, r3, r1
 8007838:	bf34      	ite	cc
 800783a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800783e:	2300      	movcs	r3, #0
 8007840:	3015      	adds	r0, #21
 8007842:	fa02 f000 	lsl.w	r0, r2, r0
 8007846:	fa23 f30c 	lsr.w	r3, r3, ip
 800784a:	4303      	orrs	r3, r0
 800784c:	461c      	mov	r4, r3
 800784e:	ec45 4b10 	vmov	d0, r4, r5
 8007852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007856:	45b8      	cmp	r8, r7
 8007858:	bf3a      	itte	cc
 800785a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800785e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007862:	2300      	movcs	r3, #0
 8007864:	380b      	subs	r0, #11
 8007866:	d012      	beq.n	800788e <__b2d+0x8a>
 8007868:	f1c0 0120 	rsb	r1, r0, #32
 800786c:	fa23 f401 	lsr.w	r4, r3, r1
 8007870:	4082      	lsls	r2, r0
 8007872:	4322      	orrs	r2, r4
 8007874:	4547      	cmp	r7, r8
 8007876:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800787a:	bf8c      	ite	hi
 800787c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007880:	2200      	movls	r2, #0
 8007882:	4083      	lsls	r3, r0
 8007884:	40ca      	lsrs	r2, r1
 8007886:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800788a:	4313      	orrs	r3, r2
 800788c:	e7de      	b.n	800784c <__b2d+0x48>
 800788e:	ea42 0501 	orr.w	r5, r2, r1
 8007892:	e7db      	b.n	800784c <__b2d+0x48>
 8007894:	3ff00000 	.word	0x3ff00000

08007898 <__d2b>:
 8007898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800789c:	460f      	mov	r7, r1
 800789e:	2101      	movs	r1, #1
 80078a0:	ec59 8b10 	vmov	r8, r9, d0
 80078a4:	4616      	mov	r6, r2
 80078a6:	f7ff fc1b 	bl	80070e0 <_Balloc>
 80078aa:	4604      	mov	r4, r0
 80078ac:	b930      	cbnz	r0, 80078bc <__d2b+0x24>
 80078ae:	4602      	mov	r2, r0
 80078b0:	4b23      	ldr	r3, [pc, #140]	@ (8007940 <__d2b+0xa8>)
 80078b2:	4824      	ldr	r0, [pc, #144]	@ (8007944 <__d2b+0xac>)
 80078b4:	f240 310f 	movw	r1, #783	@ 0x30f
 80078b8:	f7fe fc9a 	bl	80061f0 <__assert_func>
 80078bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80078c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078c4:	b10d      	cbz	r5, 80078ca <__d2b+0x32>
 80078c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	f1b8 0300 	subs.w	r3, r8, #0
 80078d0:	d023      	beq.n	800791a <__d2b+0x82>
 80078d2:	4668      	mov	r0, sp
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	f7ff fd14 	bl	8007302 <__lo0bits>
 80078da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078de:	b1d0      	cbz	r0, 8007916 <__d2b+0x7e>
 80078e0:	f1c0 0320 	rsb	r3, r0, #32
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	430b      	orrs	r3, r1
 80078ea:	40c2      	lsrs	r2, r0
 80078ec:	6163      	str	r3, [r4, #20]
 80078ee:	9201      	str	r2, [sp, #4]
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	61a3      	str	r3, [r4, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bf0c      	ite	eq
 80078f8:	2201      	moveq	r2, #1
 80078fa:	2202      	movne	r2, #2
 80078fc:	6122      	str	r2, [r4, #16]
 80078fe:	b1a5      	cbz	r5, 800792a <__d2b+0x92>
 8007900:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007904:	4405      	add	r5, r0
 8007906:	603d      	str	r5, [r7, #0]
 8007908:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800790c:	6030      	str	r0, [r6, #0]
 800790e:	4620      	mov	r0, r4
 8007910:	b003      	add	sp, #12
 8007912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007916:	6161      	str	r1, [r4, #20]
 8007918:	e7ea      	b.n	80078f0 <__d2b+0x58>
 800791a:	a801      	add	r0, sp, #4
 800791c:	f7ff fcf1 	bl	8007302 <__lo0bits>
 8007920:	9b01      	ldr	r3, [sp, #4]
 8007922:	6163      	str	r3, [r4, #20]
 8007924:	3020      	adds	r0, #32
 8007926:	2201      	movs	r2, #1
 8007928:	e7e8      	b.n	80078fc <__d2b+0x64>
 800792a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800792e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007932:	6038      	str	r0, [r7, #0]
 8007934:	6918      	ldr	r0, [r3, #16]
 8007936:	f7ff fcc5 	bl	80072c4 <__hi0bits>
 800793a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800793e:	e7e5      	b.n	800790c <__d2b+0x74>
 8007940:	08009c77 	.word	0x08009c77
 8007944:	08009c88 	.word	0x08009c88

08007948 <__ratio>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	b085      	sub	sp, #20
 800794e:	e9cd 1000 	strd	r1, r0, [sp]
 8007952:	a902      	add	r1, sp, #8
 8007954:	f7ff ff56 	bl	8007804 <__b2d>
 8007958:	9800      	ldr	r0, [sp, #0]
 800795a:	a903      	add	r1, sp, #12
 800795c:	ec55 4b10 	vmov	r4, r5, d0
 8007960:	f7ff ff50 	bl	8007804 <__b2d>
 8007964:	9b01      	ldr	r3, [sp, #4]
 8007966:	6919      	ldr	r1, [r3, #16]
 8007968:	9b00      	ldr	r3, [sp, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	1ac9      	subs	r1, r1, r3
 800796e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007972:	1a9b      	subs	r3, r3, r2
 8007974:	ec5b ab10 	vmov	sl, fp, d0
 8007978:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfce      	itee	gt
 8007980:	462a      	movgt	r2, r5
 8007982:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007986:	465a      	movle	r2, fp
 8007988:	462f      	mov	r7, r5
 800798a:	46d9      	mov	r9, fp
 800798c:	bfcc      	ite	gt
 800798e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007992:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007996:	464b      	mov	r3, r9
 8007998:	4652      	mov	r2, sl
 800799a:	4620      	mov	r0, r4
 800799c:	4639      	mov	r1, r7
 800799e:	f7f8 ff6d 	bl	800087c <__aeabi_ddiv>
 80079a2:	ec41 0b10 	vmov	d0, r0, r1
 80079a6:	b005      	add	sp, #20
 80079a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079ac <__copybits>:
 80079ac:	3901      	subs	r1, #1
 80079ae:	b570      	push	{r4, r5, r6, lr}
 80079b0:	1149      	asrs	r1, r1, #5
 80079b2:	6914      	ldr	r4, [r2, #16]
 80079b4:	3101      	adds	r1, #1
 80079b6:	f102 0314 	add.w	r3, r2, #20
 80079ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80079be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80079c2:	1f05      	subs	r5, r0, #4
 80079c4:	42a3      	cmp	r3, r4
 80079c6:	d30c      	bcc.n	80079e2 <__copybits+0x36>
 80079c8:	1aa3      	subs	r3, r4, r2
 80079ca:	3b11      	subs	r3, #17
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	3211      	adds	r2, #17
 80079d2:	42a2      	cmp	r2, r4
 80079d4:	bf88      	it	hi
 80079d6:	2300      	movhi	r3, #0
 80079d8:	4418      	add	r0, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	4288      	cmp	r0, r1
 80079de:	d305      	bcc.n	80079ec <__copybits+0x40>
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
 80079e2:	f853 6b04 	ldr.w	r6, [r3], #4
 80079e6:	f845 6f04 	str.w	r6, [r5, #4]!
 80079ea:	e7eb      	b.n	80079c4 <__copybits+0x18>
 80079ec:	f840 3b04 	str.w	r3, [r0], #4
 80079f0:	e7f4      	b.n	80079dc <__copybits+0x30>

080079f2 <__any_on>:
 80079f2:	f100 0214 	add.w	r2, r0, #20
 80079f6:	6900      	ldr	r0, [r0, #16]
 80079f8:	114b      	asrs	r3, r1, #5
 80079fa:	4298      	cmp	r0, r3
 80079fc:	b510      	push	{r4, lr}
 80079fe:	db11      	blt.n	8007a24 <__any_on+0x32>
 8007a00:	dd0a      	ble.n	8007a18 <__any_on+0x26>
 8007a02:	f011 011f 	ands.w	r1, r1, #31
 8007a06:	d007      	beq.n	8007a18 <__any_on+0x26>
 8007a08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a0c:	fa24 f001 	lsr.w	r0, r4, r1
 8007a10:	fa00 f101 	lsl.w	r1, r0, r1
 8007a14:	428c      	cmp	r4, r1
 8007a16:	d10b      	bne.n	8007a30 <__any_on+0x3e>
 8007a18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d803      	bhi.n	8007a28 <__any_on+0x36>
 8007a20:	2000      	movs	r0, #0
 8007a22:	bd10      	pop	{r4, pc}
 8007a24:	4603      	mov	r3, r0
 8007a26:	e7f7      	b.n	8007a18 <__any_on+0x26>
 8007a28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a2c:	2900      	cmp	r1, #0
 8007a2e:	d0f5      	beq.n	8007a1c <__any_on+0x2a>
 8007a30:	2001      	movs	r0, #1
 8007a32:	e7f6      	b.n	8007a22 <__any_on+0x30>

08007a34 <sulp>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4604      	mov	r4, r0
 8007a38:	460d      	mov	r5, r1
 8007a3a:	ec45 4b10 	vmov	d0, r4, r5
 8007a3e:	4616      	mov	r6, r2
 8007a40:	f7ff feba 	bl	80077b8 <__ulp>
 8007a44:	ec51 0b10 	vmov	r0, r1, d0
 8007a48:	b17e      	cbz	r6, 8007a6a <sulp+0x36>
 8007a4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	dd09      	ble.n	8007a6a <sulp+0x36>
 8007a56:	051b      	lsls	r3, r3, #20
 8007a58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007a5c:	2400      	movs	r4, #0
 8007a5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007a62:	4622      	mov	r2, r4
 8007a64:	462b      	mov	r3, r5
 8007a66:	f7f8 fddf 	bl	8000628 <__aeabi_dmul>
 8007a6a:	ec41 0b10 	vmov	d0, r0, r1
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}

08007a70 <_strtod_l>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	b09f      	sub	sp, #124	@ 0x7c
 8007a76:	460c      	mov	r4, r1
 8007a78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8007a7e:	9005      	str	r0, [sp, #20]
 8007a80:	f04f 0a00 	mov.w	sl, #0
 8007a84:	f04f 0b00 	mov.w	fp, #0
 8007a88:	460a      	mov	r2, r1
 8007a8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a8c:	7811      	ldrb	r1, [r2, #0]
 8007a8e:	292b      	cmp	r1, #43	@ 0x2b
 8007a90:	d04a      	beq.n	8007b28 <_strtod_l+0xb8>
 8007a92:	d838      	bhi.n	8007b06 <_strtod_l+0x96>
 8007a94:	290d      	cmp	r1, #13
 8007a96:	d832      	bhi.n	8007afe <_strtod_l+0x8e>
 8007a98:	2908      	cmp	r1, #8
 8007a9a:	d832      	bhi.n	8007b02 <_strtod_l+0x92>
 8007a9c:	2900      	cmp	r1, #0
 8007a9e:	d03b      	beq.n	8007b18 <_strtod_l+0xa8>
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	920e      	str	r2, [sp, #56]	@ 0x38
 8007aa4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007aa6:	782a      	ldrb	r2, [r5, #0]
 8007aa8:	2a30      	cmp	r2, #48	@ 0x30
 8007aaa:	f040 80b2 	bne.w	8007c12 <_strtod_l+0x1a2>
 8007aae:	786a      	ldrb	r2, [r5, #1]
 8007ab0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007ab4:	2a58      	cmp	r2, #88	@ 0x58
 8007ab6:	d16e      	bne.n	8007b96 <_strtod_l+0x126>
 8007ab8:	9302      	str	r3, [sp, #8]
 8007aba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007abc:	9301      	str	r3, [sp, #4]
 8007abe:	ab1a      	add	r3, sp, #104	@ 0x68
 8007ac0:	9300      	str	r3, [sp, #0]
 8007ac2:	4a8f      	ldr	r2, [pc, #572]	@ (8007d00 <_strtod_l+0x290>)
 8007ac4:	9805      	ldr	r0, [sp, #20]
 8007ac6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007ac8:	a919      	add	r1, sp, #100	@ 0x64
 8007aca:	f001 fafb 	bl	80090c4 <__gethex>
 8007ace:	f010 060f 	ands.w	r6, r0, #15
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	d005      	beq.n	8007ae2 <_strtod_l+0x72>
 8007ad6:	2e06      	cmp	r6, #6
 8007ad8:	d128      	bne.n	8007b2c <_strtod_l+0xbc>
 8007ada:	3501      	adds	r5, #1
 8007adc:	2300      	movs	r3, #0
 8007ade:	9519      	str	r5, [sp, #100]	@ 0x64
 8007ae0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ae2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f040 858e 	bne.w	8008606 <_strtod_l+0xb96>
 8007aea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aec:	b1cb      	cbz	r3, 8007b22 <_strtod_l+0xb2>
 8007aee:	4652      	mov	r2, sl
 8007af0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007af4:	ec43 2b10 	vmov	d0, r2, r3
 8007af8:	b01f      	add	sp, #124	@ 0x7c
 8007afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afe:	2920      	cmp	r1, #32
 8007b00:	d1ce      	bne.n	8007aa0 <_strtod_l+0x30>
 8007b02:	3201      	adds	r2, #1
 8007b04:	e7c1      	b.n	8007a8a <_strtod_l+0x1a>
 8007b06:	292d      	cmp	r1, #45	@ 0x2d
 8007b08:	d1ca      	bne.n	8007aa0 <_strtod_l+0x30>
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007b0e:	1c51      	adds	r1, r2, #1
 8007b10:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b12:	7852      	ldrb	r2, [r2, #1]
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	d1c5      	bne.n	8007aa4 <_strtod_l+0x34>
 8007b18:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007b1a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f040 8570 	bne.w	8008602 <_strtod_l+0xb92>
 8007b22:	4652      	mov	r2, sl
 8007b24:	465b      	mov	r3, fp
 8007b26:	e7e5      	b.n	8007af4 <_strtod_l+0x84>
 8007b28:	2100      	movs	r1, #0
 8007b2a:	e7ef      	b.n	8007b0c <_strtod_l+0x9c>
 8007b2c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b2e:	b13a      	cbz	r2, 8007b40 <_strtod_l+0xd0>
 8007b30:	2135      	movs	r1, #53	@ 0x35
 8007b32:	a81c      	add	r0, sp, #112	@ 0x70
 8007b34:	f7ff ff3a 	bl	80079ac <__copybits>
 8007b38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b3a:	9805      	ldr	r0, [sp, #20]
 8007b3c:	f7ff fb10 	bl	8007160 <_Bfree>
 8007b40:	3e01      	subs	r6, #1
 8007b42:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007b44:	2e04      	cmp	r6, #4
 8007b46:	d806      	bhi.n	8007b56 <_strtod_l+0xe6>
 8007b48:	e8df f006 	tbb	[pc, r6]
 8007b4c:	201d0314 	.word	0x201d0314
 8007b50:	14          	.byte	0x14
 8007b51:	00          	.byte	0x00
 8007b52:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007b56:	05e1      	lsls	r1, r4, #23
 8007b58:	bf48      	it	mi
 8007b5a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007b5e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b62:	0d1b      	lsrs	r3, r3, #20
 8007b64:	051b      	lsls	r3, r3, #20
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1bb      	bne.n	8007ae2 <_strtod_l+0x72>
 8007b6a:	f7fe faf7 	bl	800615c <__errno>
 8007b6e:	2322      	movs	r3, #34	@ 0x22
 8007b70:	6003      	str	r3, [r0, #0]
 8007b72:	e7b6      	b.n	8007ae2 <_strtod_l+0x72>
 8007b74:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007b78:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b7c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b80:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b84:	e7e7      	b.n	8007b56 <_strtod_l+0xe6>
 8007b86:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007d08 <_strtod_l+0x298>
 8007b8a:	e7e4      	b.n	8007b56 <_strtod_l+0xe6>
 8007b8c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007b90:	f04f 3aff 	mov.w	sl, #4294967295
 8007b94:	e7df      	b.n	8007b56 <_strtod_l+0xe6>
 8007b96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b98:	1c5a      	adds	r2, r3, #1
 8007b9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b30      	cmp	r3, #48	@ 0x30
 8007ba0:	d0f9      	beq.n	8007b96 <_strtod_l+0x126>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d09d      	beq.n	8007ae2 <_strtod_l+0x72>
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	2700      	movs	r7, #0
 8007baa:	9308      	str	r3, [sp, #32]
 8007bac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bae:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bb0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007bb2:	46b9      	mov	r9, r7
 8007bb4:	220a      	movs	r2, #10
 8007bb6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007bb8:	7805      	ldrb	r5, [r0, #0]
 8007bba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007bbe:	b2d9      	uxtb	r1, r3
 8007bc0:	2909      	cmp	r1, #9
 8007bc2:	d928      	bls.n	8007c16 <_strtod_l+0x1a6>
 8007bc4:	494f      	ldr	r1, [pc, #316]	@ (8007d04 <_strtod_l+0x294>)
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f7fe f9f9 	bl	8005fbe <strncmp>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d032      	beq.n	8007c36 <_strtod_l+0x1c6>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	462a      	mov	r2, r5
 8007bd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bd6:	464d      	mov	r5, r9
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2a65      	cmp	r2, #101	@ 0x65
 8007bdc:	d001      	beq.n	8007be2 <_strtod_l+0x172>
 8007bde:	2a45      	cmp	r2, #69	@ 0x45
 8007be0:	d114      	bne.n	8007c0c <_strtod_l+0x19c>
 8007be2:	b91d      	cbnz	r5, 8007bec <_strtod_l+0x17c>
 8007be4:	9a08      	ldr	r2, [sp, #32]
 8007be6:	4302      	orrs	r2, r0
 8007be8:	d096      	beq.n	8007b18 <_strtod_l+0xa8>
 8007bea:	2500      	movs	r5, #0
 8007bec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007bee:	1c62      	adds	r2, r4, #1
 8007bf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007bf2:	7862      	ldrb	r2, [r4, #1]
 8007bf4:	2a2b      	cmp	r2, #43	@ 0x2b
 8007bf6:	d07a      	beq.n	8007cee <_strtod_l+0x27e>
 8007bf8:	2a2d      	cmp	r2, #45	@ 0x2d
 8007bfa:	d07e      	beq.n	8007cfa <_strtod_l+0x28a>
 8007bfc:	f04f 0c00 	mov.w	ip, #0
 8007c00:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c04:	2909      	cmp	r1, #9
 8007c06:	f240 8085 	bls.w	8007d14 <_strtod_l+0x2a4>
 8007c0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007c0c:	f04f 0800 	mov.w	r8, #0
 8007c10:	e0a5      	b.n	8007d5e <_strtod_l+0x2ee>
 8007c12:	2300      	movs	r3, #0
 8007c14:	e7c8      	b.n	8007ba8 <_strtod_l+0x138>
 8007c16:	f1b9 0f08 	cmp.w	r9, #8
 8007c1a:	bfd8      	it	le
 8007c1c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007c1e:	f100 0001 	add.w	r0, r0, #1
 8007c22:	bfda      	itte	le
 8007c24:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c28:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007c2a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007c2e:	f109 0901 	add.w	r9, r9, #1
 8007c32:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c34:	e7bf      	b.n	8007bb6 <_strtod_l+0x146>
 8007c36:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c38:	1c5a      	adds	r2, r3, #1
 8007c3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c3c:	785a      	ldrb	r2, [r3, #1]
 8007c3e:	f1b9 0f00 	cmp.w	r9, #0
 8007c42:	d03b      	beq.n	8007cbc <_strtod_l+0x24c>
 8007c44:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c46:	464d      	mov	r5, r9
 8007c48:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007c4c:	2b09      	cmp	r3, #9
 8007c4e:	d912      	bls.n	8007c76 <_strtod_l+0x206>
 8007c50:	2301      	movs	r3, #1
 8007c52:	e7c2      	b.n	8007bda <_strtod_l+0x16a>
 8007c54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c5a:	785a      	ldrb	r2, [r3, #1]
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	2a30      	cmp	r2, #48	@ 0x30
 8007c60:	d0f8      	beq.n	8007c54 <_strtod_l+0x1e4>
 8007c62:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	f200 84d2 	bhi.w	8008610 <_strtod_l+0xba0>
 8007c6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c6e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c70:	2000      	movs	r0, #0
 8007c72:	930c      	str	r3, [sp, #48]	@ 0x30
 8007c74:	4605      	mov	r5, r0
 8007c76:	3a30      	subs	r2, #48	@ 0x30
 8007c78:	f100 0301 	add.w	r3, r0, #1
 8007c7c:	d018      	beq.n	8007cb0 <_strtod_l+0x240>
 8007c7e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c80:	4419      	add	r1, r3
 8007c82:	910a      	str	r1, [sp, #40]	@ 0x28
 8007c84:	462e      	mov	r6, r5
 8007c86:	f04f 0e0a 	mov.w	lr, #10
 8007c8a:	1c71      	adds	r1, r6, #1
 8007c8c:	eba1 0c05 	sub.w	ip, r1, r5
 8007c90:	4563      	cmp	r3, ip
 8007c92:	dc15      	bgt.n	8007cc0 <_strtod_l+0x250>
 8007c94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007c98:	182b      	adds	r3, r5, r0
 8007c9a:	2b08      	cmp	r3, #8
 8007c9c:	f105 0501 	add.w	r5, r5, #1
 8007ca0:	4405      	add	r5, r0
 8007ca2:	dc1a      	bgt.n	8007cda <_strtod_l+0x26a>
 8007ca4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ca6:	230a      	movs	r3, #10
 8007ca8:	fb03 2301 	mla	r3, r3, r1, r2
 8007cac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cae:	2300      	movs	r3, #0
 8007cb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007cb2:	1c51      	adds	r1, r2, #1
 8007cb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8007cb6:	7852      	ldrb	r2, [r2, #1]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	e7c5      	b.n	8007c48 <_strtod_l+0x1d8>
 8007cbc:	4648      	mov	r0, r9
 8007cbe:	e7ce      	b.n	8007c5e <_strtod_l+0x1ee>
 8007cc0:	2e08      	cmp	r6, #8
 8007cc2:	dc05      	bgt.n	8007cd0 <_strtod_l+0x260>
 8007cc4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007cc6:	fb0e f606 	mul.w	r6, lr, r6
 8007cca:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007ccc:	460e      	mov	r6, r1
 8007cce:	e7dc      	b.n	8007c8a <_strtod_l+0x21a>
 8007cd0:	2910      	cmp	r1, #16
 8007cd2:	bfd8      	it	le
 8007cd4:	fb0e f707 	mulle.w	r7, lr, r7
 8007cd8:	e7f8      	b.n	8007ccc <_strtod_l+0x25c>
 8007cda:	2b0f      	cmp	r3, #15
 8007cdc:	bfdc      	itt	le
 8007cde:	230a      	movle	r3, #10
 8007ce0:	fb03 2707 	mlale	r7, r3, r7, r2
 8007ce4:	e7e3      	b.n	8007cae <_strtod_l+0x23e>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cea:	2301      	movs	r3, #1
 8007cec:	e77a      	b.n	8007be4 <_strtod_l+0x174>
 8007cee:	f04f 0c00 	mov.w	ip, #0
 8007cf2:	1ca2      	adds	r2, r4, #2
 8007cf4:	9219      	str	r2, [sp, #100]	@ 0x64
 8007cf6:	78a2      	ldrb	r2, [r4, #2]
 8007cf8:	e782      	b.n	8007c00 <_strtod_l+0x190>
 8007cfa:	f04f 0c01 	mov.w	ip, #1
 8007cfe:	e7f8      	b.n	8007cf2 <_strtod_l+0x282>
 8007d00:	08009e6c 	.word	0x08009e6c
 8007d04:	08009ce1 	.word	0x08009ce1
 8007d08:	7ff00000 	.word	0x7ff00000
 8007d0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d0e:	1c51      	adds	r1, r2, #1
 8007d10:	9119      	str	r1, [sp, #100]	@ 0x64
 8007d12:	7852      	ldrb	r2, [r2, #1]
 8007d14:	2a30      	cmp	r2, #48	@ 0x30
 8007d16:	d0f9      	beq.n	8007d0c <_strtod_l+0x29c>
 8007d18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007d1c:	2908      	cmp	r1, #8
 8007d1e:	f63f af75 	bhi.w	8007c0c <_strtod_l+0x19c>
 8007d22:	3a30      	subs	r2, #48	@ 0x30
 8007d24:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d28:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007d2a:	f04f 080a 	mov.w	r8, #10
 8007d2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007d30:	1c56      	adds	r6, r2, #1
 8007d32:	9619      	str	r6, [sp, #100]	@ 0x64
 8007d34:	7852      	ldrb	r2, [r2, #1]
 8007d36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007d3a:	f1be 0f09 	cmp.w	lr, #9
 8007d3e:	d939      	bls.n	8007db4 <_strtod_l+0x344>
 8007d40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007d42:	1a76      	subs	r6, r6, r1
 8007d44:	2e08      	cmp	r6, #8
 8007d46:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007d4a:	dc03      	bgt.n	8007d54 <_strtod_l+0x2e4>
 8007d4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d4e:	4588      	cmp	r8, r1
 8007d50:	bfa8      	it	ge
 8007d52:	4688      	movge	r8, r1
 8007d54:	f1bc 0f00 	cmp.w	ip, #0
 8007d58:	d001      	beq.n	8007d5e <_strtod_l+0x2ee>
 8007d5a:	f1c8 0800 	rsb	r8, r8, #0
 8007d5e:	2d00      	cmp	r5, #0
 8007d60:	d14e      	bne.n	8007e00 <_strtod_l+0x390>
 8007d62:	9908      	ldr	r1, [sp, #32]
 8007d64:	4308      	orrs	r0, r1
 8007d66:	f47f aebc 	bne.w	8007ae2 <_strtod_l+0x72>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f47f aed4 	bne.w	8007b18 <_strtod_l+0xa8>
 8007d70:	2a69      	cmp	r2, #105	@ 0x69
 8007d72:	d028      	beq.n	8007dc6 <_strtod_l+0x356>
 8007d74:	dc25      	bgt.n	8007dc2 <_strtod_l+0x352>
 8007d76:	2a49      	cmp	r2, #73	@ 0x49
 8007d78:	d025      	beq.n	8007dc6 <_strtod_l+0x356>
 8007d7a:	2a4e      	cmp	r2, #78	@ 0x4e
 8007d7c:	f47f aecc 	bne.w	8007b18 <_strtod_l+0xa8>
 8007d80:	499a      	ldr	r1, [pc, #616]	@ (8007fec <_strtod_l+0x57c>)
 8007d82:	a819      	add	r0, sp, #100	@ 0x64
 8007d84:	f001 fbc0 	bl	8009508 <__match>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	f43f aec5 	beq.w	8007b18 <_strtod_l+0xa8>
 8007d8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b28      	cmp	r3, #40	@ 0x28
 8007d94:	d12e      	bne.n	8007df4 <_strtod_l+0x384>
 8007d96:	4996      	ldr	r1, [pc, #600]	@ (8007ff0 <_strtod_l+0x580>)
 8007d98:	aa1c      	add	r2, sp, #112	@ 0x70
 8007d9a:	a819      	add	r0, sp, #100	@ 0x64
 8007d9c:	f001 fbc8 	bl	8009530 <__hexnan>
 8007da0:	2805      	cmp	r0, #5
 8007da2:	d127      	bne.n	8007df4 <_strtod_l+0x384>
 8007da4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007da6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007daa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007dae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007db2:	e696      	b.n	8007ae2 <_strtod_l+0x72>
 8007db4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007db6:	fb08 2101 	mla	r1, r8, r1, r2
 8007dba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dc0:	e7b5      	b.n	8007d2e <_strtod_l+0x2be>
 8007dc2:	2a6e      	cmp	r2, #110	@ 0x6e
 8007dc4:	e7da      	b.n	8007d7c <_strtod_l+0x30c>
 8007dc6:	498b      	ldr	r1, [pc, #556]	@ (8007ff4 <_strtod_l+0x584>)
 8007dc8:	a819      	add	r0, sp, #100	@ 0x64
 8007dca:	f001 fb9d 	bl	8009508 <__match>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	f43f aea2 	beq.w	8007b18 <_strtod_l+0xa8>
 8007dd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007dd6:	4988      	ldr	r1, [pc, #544]	@ (8007ff8 <_strtod_l+0x588>)
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	a819      	add	r0, sp, #100	@ 0x64
 8007ddc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dde:	f001 fb93 	bl	8009508 <__match>
 8007de2:	b910      	cbnz	r0, 8007dea <_strtod_l+0x37a>
 8007de4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007de6:	3301      	adds	r3, #1
 8007de8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007dea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008008 <_strtod_l+0x598>
 8007dee:	f04f 0a00 	mov.w	sl, #0
 8007df2:	e676      	b.n	8007ae2 <_strtod_l+0x72>
 8007df4:	4881      	ldr	r0, [pc, #516]	@ (8007ffc <_strtod_l+0x58c>)
 8007df6:	f001 f8db 	bl	8008fb0 <nan>
 8007dfa:	ec5b ab10 	vmov	sl, fp, d0
 8007dfe:	e670      	b.n	8007ae2 <_strtod_l+0x72>
 8007e00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007e04:	eba8 0303 	sub.w	r3, r8, r3
 8007e08:	f1b9 0f00 	cmp.w	r9, #0
 8007e0c:	bf08      	it	eq
 8007e0e:	46a9      	moveq	r9, r5
 8007e10:	2d10      	cmp	r5, #16
 8007e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e14:	462c      	mov	r4, r5
 8007e16:	bfa8      	it	ge
 8007e18:	2410      	movge	r4, #16
 8007e1a:	f7f8 fb8b 	bl	8000534 <__aeabi_ui2d>
 8007e1e:	2d09      	cmp	r5, #9
 8007e20:	4682      	mov	sl, r0
 8007e22:	468b      	mov	fp, r1
 8007e24:	dc13      	bgt.n	8007e4e <_strtod_l+0x3de>
 8007e26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f43f ae5a 	beq.w	8007ae2 <_strtod_l+0x72>
 8007e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e30:	dd78      	ble.n	8007f24 <_strtod_l+0x4b4>
 8007e32:	2b16      	cmp	r3, #22
 8007e34:	dc5f      	bgt.n	8007ef6 <_strtod_l+0x486>
 8007e36:	4972      	ldr	r1, [pc, #456]	@ (8008000 <_strtod_l+0x590>)
 8007e38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e40:	4652      	mov	r2, sl
 8007e42:	465b      	mov	r3, fp
 8007e44:	f7f8 fbf0 	bl	8000628 <__aeabi_dmul>
 8007e48:	4682      	mov	sl, r0
 8007e4a:	468b      	mov	fp, r1
 8007e4c:	e649      	b.n	8007ae2 <_strtod_l+0x72>
 8007e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8008000 <_strtod_l+0x590>)
 8007e50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007e58:	f7f8 fbe6 	bl	8000628 <__aeabi_dmul>
 8007e5c:	4682      	mov	sl, r0
 8007e5e:	4638      	mov	r0, r7
 8007e60:	468b      	mov	fp, r1
 8007e62:	f7f8 fb67 	bl	8000534 <__aeabi_ui2d>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4650      	mov	r0, sl
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	f7f8 fa25 	bl	80002bc <__adddf3>
 8007e72:	2d0f      	cmp	r5, #15
 8007e74:	4682      	mov	sl, r0
 8007e76:	468b      	mov	fp, r1
 8007e78:	ddd5      	ble.n	8007e26 <_strtod_l+0x3b6>
 8007e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e7c:	1b2c      	subs	r4, r5, r4
 8007e7e:	441c      	add	r4, r3
 8007e80:	2c00      	cmp	r4, #0
 8007e82:	f340 8093 	ble.w	8007fac <_strtod_l+0x53c>
 8007e86:	f014 030f 	ands.w	r3, r4, #15
 8007e8a:	d00a      	beq.n	8007ea2 <_strtod_l+0x432>
 8007e8c:	495c      	ldr	r1, [pc, #368]	@ (8008000 <_strtod_l+0x590>)
 8007e8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e9a:	f7f8 fbc5 	bl	8000628 <__aeabi_dmul>
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	468b      	mov	fp, r1
 8007ea2:	f034 040f 	bics.w	r4, r4, #15
 8007ea6:	d073      	beq.n	8007f90 <_strtod_l+0x520>
 8007ea8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007eac:	dd49      	ble.n	8007f42 <_strtod_l+0x4d2>
 8007eae:	2400      	movs	r4, #0
 8007eb0:	46a0      	mov	r8, r4
 8007eb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007eb4:	46a1      	mov	r9, r4
 8007eb6:	9a05      	ldr	r2, [sp, #20]
 8007eb8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008008 <_strtod_l+0x598>
 8007ebc:	2322      	movs	r3, #34	@ 0x22
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	f04f 0a00 	mov.w	sl, #0
 8007ec4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f43f ae0b 	beq.w	8007ae2 <_strtod_l+0x72>
 8007ecc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ece:	9805      	ldr	r0, [sp, #20]
 8007ed0:	f7ff f946 	bl	8007160 <_Bfree>
 8007ed4:	9805      	ldr	r0, [sp, #20]
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	f7ff f942 	bl	8007160 <_Bfree>
 8007edc:	9805      	ldr	r0, [sp, #20]
 8007ede:	4641      	mov	r1, r8
 8007ee0:	f7ff f93e 	bl	8007160 <_Bfree>
 8007ee4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ee6:	9805      	ldr	r0, [sp, #20]
 8007ee8:	f7ff f93a 	bl	8007160 <_Bfree>
 8007eec:	9805      	ldr	r0, [sp, #20]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	f7ff f936 	bl	8007160 <_Bfree>
 8007ef4:	e5f5      	b.n	8007ae2 <_strtod_l+0x72>
 8007ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007efc:	4293      	cmp	r3, r2
 8007efe:	dbbc      	blt.n	8007e7a <_strtod_l+0x40a>
 8007f00:	4c3f      	ldr	r4, [pc, #252]	@ (8008000 <_strtod_l+0x590>)
 8007f02:	f1c5 050f 	rsb	r5, r5, #15
 8007f06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007f0a:	4652      	mov	r2, sl
 8007f0c:	465b      	mov	r3, fp
 8007f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f12:	f7f8 fb89 	bl	8000628 <__aeabi_dmul>
 8007f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f18:	1b5d      	subs	r5, r3, r5
 8007f1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007f1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007f22:	e78f      	b.n	8007e44 <_strtod_l+0x3d4>
 8007f24:	3316      	adds	r3, #22
 8007f26:	dba8      	blt.n	8007e7a <_strtod_l+0x40a>
 8007f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f2a:	eba3 0808 	sub.w	r8, r3, r8
 8007f2e:	4b34      	ldr	r3, [pc, #208]	@ (8008000 <_strtod_l+0x590>)
 8007f30:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007f34:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007f38:	4650      	mov	r0, sl
 8007f3a:	4659      	mov	r1, fp
 8007f3c:	f7f8 fc9e 	bl	800087c <__aeabi_ddiv>
 8007f40:	e782      	b.n	8007e48 <_strtod_l+0x3d8>
 8007f42:	2300      	movs	r3, #0
 8007f44:	4f2f      	ldr	r7, [pc, #188]	@ (8008004 <_strtod_l+0x594>)
 8007f46:	1124      	asrs	r4, r4, #4
 8007f48:	4650      	mov	r0, sl
 8007f4a:	4659      	mov	r1, fp
 8007f4c:	461e      	mov	r6, r3
 8007f4e:	2c01      	cmp	r4, #1
 8007f50:	dc21      	bgt.n	8007f96 <_strtod_l+0x526>
 8007f52:	b10b      	cbz	r3, 8007f58 <_strtod_l+0x4e8>
 8007f54:	4682      	mov	sl, r0
 8007f56:	468b      	mov	fp, r1
 8007f58:	492a      	ldr	r1, [pc, #168]	@ (8008004 <_strtod_l+0x594>)
 8007f5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007f62:	4652      	mov	r2, sl
 8007f64:	465b      	mov	r3, fp
 8007f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f6a:	f7f8 fb5d 	bl	8000628 <__aeabi_dmul>
 8007f6e:	4b26      	ldr	r3, [pc, #152]	@ (8008008 <_strtod_l+0x598>)
 8007f70:	460a      	mov	r2, r1
 8007f72:	400b      	ands	r3, r1
 8007f74:	4925      	ldr	r1, [pc, #148]	@ (800800c <_strtod_l+0x59c>)
 8007f76:	428b      	cmp	r3, r1
 8007f78:	4682      	mov	sl, r0
 8007f7a:	d898      	bhi.n	8007eae <_strtod_l+0x43e>
 8007f7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007f80:	428b      	cmp	r3, r1
 8007f82:	bf86      	itte	hi
 8007f84:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008010 <_strtod_l+0x5a0>
 8007f88:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007f90:	2300      	movs	r3, #0
 8007f92:	9308      	str	r3, [sp, #32]
 8007f94:	e076      	b.n	8008084 <_strtod_l+0x614>
 8007f96:	07e2      	lsls	r2, r4, #31
 8007f98:	d504      	bpl.n	8007fa4 <_strtod_l+0x534>
 8007f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9e:	f7f8 fb43 	bl	8000628 <__aeabi_dmul>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	3601      	adds	r6, #1
 8007fa6:	1064      	asrs	r4, r4, #1
 8007fa8:	3708      	adds	r7, #8
 8007faa:	e7d0      	b.n	8007f4e <_strtod_l+0x4de>
 8007fac:	d0f0      	beq.n	8007f90 <_strtod_l+0x520>
 8007fae:	4264      	negs	r4, r4
 8007fb0:	f014 020f 	ands.w	r2, r4, #15
 8007fb4:	d00a      	beq.n	8007fcc <_strtod_l+0x55c>
 8007fb6:	4b12      	ldr	r3, [pc, #72]	@ (8008000 <_strtod_l+0x590>)
 8007fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc4:	f7f8 fc5a 	bl	800087c <__aeabi_ddiv>
 8007fc8:	4682      	mov	sl, r0
 8007fca:	468b      	mov	fp, r1
 8007fcc:	1124      	asrs	r4, r4, #4
 8007fce:	d0df      	beq.n	8007f90 <_strtod_l+0x520>
 8007fd0:	2c1f      	cmp	r4, #31
 8007fd2:	dd1f      	ble.n	8008014 <_strtod_l+0x5a4>
 8007fd4:	2400      	movs	r4, #0
 8007fd6:	46a0      	mov	r8, r4
 8007fd8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fda:	46a1      	mov	r9, r4
 8007fdc:	9a05      	ldr	r2, [sp, #20]
 8007fde:	2322      	movs	r3, #34	@ 0x22
 8007fe0:	f04f 0a00 	mov.w	sl, #0
 8007fe4:	f04f 0b00 	mov.w	fp, #0
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	e76b      	b.n	8007ec4 <_strtod_l+0x454>
 8007fec:	08009b39 	.word	0x08009b39
 8007ff0:	08009e58 	.word	0x08009e58
 8007ff4:	08009b31 	.word	0x08009b31
 8007ff8:	08009c15 	.word	0x08009c15
 8007ffc:	08009c11 	.word	0x08009c11
 8008000:	08009d90 	.word	0x08009d90
 8008004:	08009d68 	.word	0x08009d68
 8008008:	7ff00000 	.word	0x7ff00000
 800800c:	7ca00000 	.word	0x7ca00000
 8008010:	7fefffff 	.word	0x7fefffff
 8008014:	f014 0310 	ands.w	r3, r4, #16
 8008018:	bf18      	it	ne
 800801a:	236a      	movne	r3, #106	@ 0x6a
 800801c:	4ea9      	ldr	r6, [pc, #676]	@ (80082c4 <_strtod_l+0x854>)
 800801e:	9308      	str	r3, [sp, #32]
 8008020:	4650      	mov	r0, sl
 8008022:	4659      	mov	r1, fp
 8008024:	2300      	movs	r3, #0
 8008026:	07e7      	lsls	r7, r4, #31
 8008028:	d504      	bpl.n	8008034 <_strtod_l+0x5c4>
 800802a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800802e:	f7f8 fafb 	bl	8000628 <__aeabi_dmul>
 8008032:	2301      	movs	r3, #1
 8008034:	1064      	asrs	r4, r4, #1
 8008036:	f106 0608 	add.w	r6, r6, #8
 800803a:	d1f4      	bne.n	8008026 <_strtod_l+0x5b6>
 800803c:	b10b      	cbz	r3, 8008042 <_strtod_l+0x5d2>
 800803e:	4682      	mov	sl, r0
 8008040:	468b      	mov	fp, r1
 8008042:	9b08      	ldr	r3, [sp, #32]
 8008044:	b1b3      	cbz	r3, 8008074 <_strtod_l+0x604>
 8008046:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800804a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800804e:	2b00      	cmp	r3, #0
 8008050:	4659      	mov	r1, fp
 8008052:	dd0f      	ble.n	8008074 <_strtod_l+0x604>
 8008054:	2b1f      	cmp	r3, #31
 8008056:	dd56      	ble.n	8008106 <_strtod_l+0x696>
 8008058:	2b34      	cmp	r3, #52	@ 0x34
 800805a:	bfde      	ittt	le
 800805c:	f04f 33ff 	movle.w	r3, #4294967295
 8008060:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008064:	4093      	lslle	r3, r2
 8008066:	f04f 0a00 	mov.w	sl, #0
 800806a:	bfcc      	ite	gt
 800806c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008070:	ea03 0b01 	andle.w	fp, r3, r1
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	4650      	mov	r0, sl
 800807a:	4659      	mov	r1, fp
 800807c:	f7f8 fd3c 	bl	8000af8 <__aeabi_dcmpeq>
 8008080:	2800      	cmp	r0, #0
 8008082:	d1a7      	bne.n	8007fd4 <_strtod_l+0x564>
 8008084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800808a:	9805      	ldr	r0, [sp, #20]
 800808c:	462b      	mov	r3, r5
 800808e:	464a      	mov	r2, r9
 8008090:	f7ff f8ce 	bl	8007230 <__s2b>
 8008094:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008096:	2800      	cmp	r0, #0
 8008098:	f43f af09 	beq.w	8007eae <_strtod_l+0x43e>
 800809c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800809e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080a0:	2a00      	cmp	r2, #0
 80080a2:	eba3 0308 	sub.w	r3, r3, r8
 80080a6:	bfa8      	it	ge
 80080a8:	2300      	movge	r3, #0
 80080aa:	9312      	str	r3, [sp, #72]	@ 0x48
 80080ac:	2400      	movs	r4, #0
 80080ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80080b2:	9316      	str	r3, [sp, #88]	@ 0x58
 80080b4:	46a0      	mov	r8, r4
 80080b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080b8:	9805      	ldr	r0, [sp, #20]
 80080ba:	6859      	ldr	r1, [r3, #4]
 80080bc:	f7ff f810 	bl	80070e0 <_Balloc>
 80080c0:	4681      	mov	r9, r0
 80080c2:	2800      	cmp	r0, #0
 80080c4:	f43f aef7 	beq.w	8007eb6 <_strtod_l+0x446>
 80080c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080ca:	691a      	ldr	r2, [r3, #16]
 80080cc:	3202      	adds	r2, #2
 80080ce:	f103 010c 	add.w	r1, r3, #12
 80080d2:	0092      	lsls	r2, r2, #2
 80080d4:	300c      	adds	r0, #12
 80080d6:	f7fe f876 	bl	80061c6 <memcpy>
 80080da:	ec4b ab10 	vmov	d0, sl, fp
 80080de:	9805      	ldr	r0, [sp, #20]
 80080e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80080e2:	a91b      	add	r1, sp, #108	@ 0x6c
 80080e4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80080e8:	f7ff fbd6 	bl	8007898 <__d2b>
 80080ec:	901a      	str	r0, [sp, #104]	@ 0x68
 80080ee:	2800      	cmp	r0, #0
 80080f0:	f43f aee1 	beq.w	8007eb6 <_strtod_l+0x446>
 80080f4:	9805      	ldr	r0, [sp, #20]
 80080f6:	2101      	movs	r1, #1
 80080f8:	f7ff f930 	bl	800735c <__i2b>
 80080fc:	4680      	mov	r8, r0
 80080fe:	b948      	cbnz	r0, 8008114 <_strtod_l+0x6a4>
 8008100:	f04f 0800 	mov.w	r8, #0
 8008104:	e6d7      	b.n	8007eb6 <_strtod_l+0x446>
 8008106:	f04f 32ff 	mov.w	r2, #4294967295
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	ea03 0a0a 	and.w	sl, r3, sl
 8008112:	e7af      	b.n	8008074 <_strtod_l+0x604>
 8008114:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008116:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008118:	2d00      	cmp	r5, #0
 800811a:	bfab      	itete	ge
 800811c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800811e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008120:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008122:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008124:	bfac      	ite	ge
 8008126:	18ef      	addge	r7, r5, r3
 8008128:	1b5e      	sublt	r6, r3, r5
 800812a:	9b08      	ldr	r3, [sp, #32]
 800812c:	1aed      	subs	r5, r5, r3
 800812e:	4415      	add	r5, r2
 8008130:	4b65      	ldr	r3, [pc, #404]	@ (80082c8 <_strtod_l+0x858>)
 8008132:	3d01      	subs	r5, #1
 8008134:	429d      	cmp	r5, r3
 8008136:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800813a:	da50      	bge.n	80081de <_strtod_l+0x76e>
 800813c:	1b5b      	subs	r3, r3, r5
 800813e:	2b1f      	cmp	r3, #31
 8008140:	eba2 0203 	sub.w	r2, r2, r3
 8008144:	f04f 0101 	mov.w	r1, #1
 8008148:	dc3d      	bgt.n	80081c6 <_strtod_l+0x756>
 800814a:	fa01 f303 	lsl.w	r3, r1, r3
 800814e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008150:	2300      	movs	r3, #0
 8008152:	9310      	str	r3, [sp, #64]	@ 0x40
 8008154:	18bd      	adds	r5, r7, r2
 8008156:	9b08      	ldr	r3, [sp, #32]
 8008158:	42af      	cmp	r7, r5
 800815a:	4416      	add	r6, r2
 800815c:	441e      	add	r6, r3
 800815e:	463b      	mov	r3, r7
 8008160:	bfa8      	it	ge
 8008162:	462b      	movge	r3, r5
 8008164:	42b3      	cmp	r3, r6
 8008166:	bfa8      	it	ge
 8008168:	4633      	movge	r3, r6
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfc2      	ittt	gt
 800816e:	1aed      	subgt	r5, r5, r3
 8008170:	1af6      	subgt	r6, r6, r3
 8008172:	1aff      	subgt	r7, r7, r3
 8008174:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd16      	ble.n	80081a8 <_strtod_l+0x738>
 800817a:	4641      	mov	r1, r8
 800817c:	9805      	ldr	r0, [sp, #20]
 800817e:	461a      	mov	r2, r3
 8008180:	f7ff f9a4 	bl	80074cc <__pow5mult>
 8008184:	4680      	mov	r8, r0
 8008186:	2800      	cmp	r0, #0
 8008188:	d0ba      	beq.n	8008100 <_strtod_l+0x690>
 800818a:	4601      	mov	r1, r0
 800818c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800818e:	9805      	ldr	r0, [sp, #20]
 8008190:	f7ff f8fa 	bl	8007388 <__multiply>
 8008194:	900a      	str	r0, [sp, #40]	@ 0x28
 8008196:	2800      	cmp	r0, #0
 8008198:	f43f ae8d 	beq.w	8007eb6 <_strtod_l+0x446>
 800819c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800819e:	9805      	ldr	r0, [sp, #20]
 80081a0:	f7fe ffde 	bl	8007160 <_Bfree>
 80081a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80081a8:	2d00      	cmp	r5, #0
 80081aa:	dc1d      	bgt.n	80081e8 <_strtod_l+0x778>
 80081ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd23      	ble.n	80081fa <_strtod_l+0x78a>
 80081b2:	4649      	mov	r1, r9
 80081b4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80081b6:	9805      	ldr	r0, [sp, #20]
 80081b8:	f7ff f988 	bl	80074cc <__pow5mult>
 80081bc:	4681      	mov	r9, r0
 80081be:	b9e0      	cbnz	r0, 80081fa <_strtod_l+0x78a>
 80081c0:	f04f 0900 	mov.w	r9, #0
 80081c4:	e677      	b.n	8007eb6 <_strtod_l+0x446>
 80081c6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80081ca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80081ce:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80081d2:	35e2      	adds	r5, #226	@ 0xe2
 80081d4:	fa01 f305 	lsl.w	r3, r1, r5
 80081d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80081da:	9113      	str	r1, [sp, #76]	@ 0x4c
 80081dc:	e7ba      	b.n	8008154 <_strtod_l+0x6e4>
 80081de:	2300      	movs	r3, #0
 80081e0:	9310      	str	r3, [sp, #64]	@ 0x40
 80081e2:	2301      	movs	r3, #1
 80081e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081e6:	e7b5      	b.n	8008154 <_strtod_l+0x6e4>
 80081e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081ea:	9805      	ldr	r0, [sp, #20]
 80081ec:	462a      	mov	r2, r5
 80081ee:	f7ff f9c7 	bl	8007580 <__lshift>
 80081f2:	901a      	str	r0, [sp, #104]	@ 0x68
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d1d9      	bne.n	80081ac <_strtod_l+0x73c>
 80081f8:	e65d      	b.n	8007eb6 <_strtod_l+0x446>
 80081fa:	2e00      	cmp	r6, #0
 80081fc:	dd07      	ble.n	800820e <_strtod_l+0x79e>
 80081fe:	4649      	mov	r1, r9
 8008200:	9805      	ldr	r0, [sp, #20]
 8008202:	4632      	mov	r2, r6
 8008204:	f7ff f9bc 	bl	8007580 <__lshift>
 8008208:	4681      	mov	r9, r0
 800820a:	2800      	cmp	r0, #0
 800820c:	d0d8      	beq.n	80081c0 <_strtod_l+0x750>
 800820e:	2f00      	cmp	r7, #0
 8008210:	dd08      	ble.n	8008224 <_strtod_l+0x7b4>
 8008212:	4641      	mov	r1, r8
 8008214:	9805      	ldr	r0, [sp, #20]
 8008216:	463a      	mov	r2, r7
 8008218:	f7ff f9b2 	bl	8007580 <__lshift>
 800821c:	4680      	mov	r8, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae49 	beq.w	8007eb6 <_strtod_l+0x446>
 8008224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008226:	9805      	ldr	r0, [sp, #20]
 8008228:	464a      	mov	r2, r9
 800822a:	f7ff fa31 	bl	8007690 <__mdiff>
 800822e:	4604      	mov	r4, r0
 8008230:	2800      	cmp	r0, #0
 8008232:	f43f ae40 	beq.w	8007eb6 <_strtod_l+0x446>
 8008236:	68c3      	ldr	r3, [r0, #12]
 8008238:	930f      	str	r3, [sp, #60]	@ 0x3c
 800823a:	2300      	movs	r3, #0
 800823c:	60c3      	str	r3, [r0, #12]
 800823e:	4641      	mov	r1, r8
 8008240:	f7ff fa0a 	bl	8007658 <__mcmp>
 8008244:	2800      	cmp	r0, #0
 8008246:	da45      	bge.n	80082d4 <_strtod_l+0x864>
 8008248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800824a:	ea53 030a 	orrs.w	r3, r3, sl
 800824e:	d16b      	bne.n	8008328 <_strtod_l+0x8b8>
 8008250:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008254:	2b00      	cmp	r3, #0
 8008256:	d167      	bne.n	8008328 <_strtod_l+0x8b8>
 8008258:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800825c:	0d1b      	lsrs	r3, r3, #20
 800825e:	051b      	lsls	r3, r3, #20
 8008260:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008264:	d960      	bls.n	8008328 <_strtod_l+0x8b8>
 8008266:	6963      	ldr	r3, [r4, #20]
 8008268:	b913      	cbnz	r3, 8008270 <_strtod_l+0x800>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	2b01      	cmp	r3, #1
 800826e:	dd5b      	ble.n	8008328 <_strtod_l+0x8b8>
 8008270:	4621      	mov	r1, r4
 8008272:	2201      	movs	r2, #1
 8008274:	9805      	ldr	r0, [sp, #20]
 8008276:	f7ff f983 	bl	8007580 <__lshift>
 800827a:	4641      	mov	r1, r8
 800827c:	4604      	mov	r4, r0
 800827e:	f7ff f9eb 	bl	8007658 <__mcmp>
 8008282:	2800      	cmp	r0, #0
 8008284:	dd50      	ble.n	8008328 <_strtod_l+0x8b8>
 8008286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800828a:	9a08      	ldr	r2, [sp, #32]
 800828c:	0d1b      	lsrs	r3, r3, #20
 800828e:	051b      	lsls	r3, r3, #20
 8008290:	2a00      	cmp	r2, #0
 8008292:	d06a      	beq.n	800836a <_strtod_l+0x8fa>
 8008294:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008298:	d867      	bhi.n	800836a <_strtod_l+0x8fa>
 800829a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800829e:	f67f ae9d 	bls.w	8007fdc <_strtod_l+0x56c>
 80082a2:	4b0a      	ldr	r3, [pc, #40]	@ (80082cc <_strtod_l+0x85c>)
 80082a4:	4650      	mov	r0, sl
 80082a6:	4659      	mov	r1, fp
 80082a8:	2200      	movs	r2, #0
 80082aa:	f7f8 f9bd 	bl	8000628 <__aeabi_dmul>
 80082ae:	4b08      	ldr	r3, [pc, #32]	@ (80082d0 <_strtod_l+0x860>)
 80082b0:	400b      	ands	r3, r1
 80082b2:	4682      	mov	sl, r0
 80082b4:	468b      	mov	fp, r1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f47f ae08 	bne.w	8007ecc <_strtod_l+0x45c>
 80082bc:	9a05      	ldr	r2, [sp, #20]
 80082be:	2322      	movs	r3, #34	@ 0x22
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e603      	b.n	8007ecc <_strtod_l+0x45c>
 80082c4:	08009e80 	.word	0x08009e80
 80082c8:	fffffc02 	.word	0xfffffc02
 80082cc:	39500000 	.word	0x39500000
 80082d0:	7ff00000 	.word	0x7ff00000
 80082d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80082d8:	d165      	bne.n	80083a6 <_strtod_l+0x936>
 80082da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80082dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082e0:	b35a      	cbz	r2, 800833a <_strtod_l+0x8ca>
 80082e2:	4a9f      	ldr	r2, [pc, #636]	@ (8008560 <_strtod_l+0xaf0>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d12b      	bne.n	8008340 <_strtod_l+0x8d0>
 80082e8:	9b08      	ldr	r3, [sp, #32]
 80082ea:	4651      	mov	r1, sl
 80082ec:	b303      	cbz	r3, 8008330 <_strtod_l+0x8c0>
 80082ee:	4b9d      	ldr	r3, [pc, #628]	@ (8008564 <_strtod_l+0xaf4>)
 80082f0:	465a      	mov	r2, fp
 80082f2:	4013      	ands	r3, r2
 80082f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80082f8:	f04f 32ff 	mov.w	r2, #4294967295
 80082fc:	d81b      	bhi.n	8008336 <_strtod_l+0x8c6>
 80082fe:	0d1b      	lsrs	r3, r3, #20
 8008300:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	4299      	cmp	r1, r3
 800830a:	d119      	bne.n	8008340 <_strtod_l+0x8d0>
 800830c:	4b96      	ldr	r3, [pc, #600]	@ (8008568 <_strtod_l+0xaf8>)
 800830e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008310:	429a      	cmp	r2, r3
 8008312:	d102      	bne.n	800831a <_strtod_l+0x8aa>
 8008314:	3101      	adds	r1, #1
 8008316:	f43f adce 	beq.w	8007eb6 <_strtod_l+0x446>
 800831a:	4b92      	ldr	r3, [pc, #584]	@ (8008564 <_strtod_l+0xaf4>)
 800831c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800831e:	401a      	ands	r2, r3
 8008320:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008324:	f04f 0a00 	mov.w	sl, #0
 8008328:	9b08      	ldr	r3, [sp, #32]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1b9      	bne.n	80082a2 <_strtod_l+0x832>
 800832e:	e5cd      	b.n	8007ecc <_strtod_l+0x45c>
 8008330:	f04f 33ff 	mov.w	r3, #4294967295
 8008334:	e7e8      	b.n	8008308 <_strtod_l+0x898>
 8008336:	4613      	mov	r3, r2
 8008338:	e7e6      	b.n	8008308 <_strtod_l+0x898>
 800833a:	ea53 030a 	orrs.w	r3, r3, sl
 800833e:	d0a2      	beq.n	8008286 <_strtod_l+0x816>
 8008340:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008342:	b1db      	cbz	r3, 800837c <_strtod_l+0x90c>
 8008344:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008346:	4213      	tst	r3, r2
 8008348:	d0ee      	beq.n	8008328 <_strtod_l+0x8b8>
 800834a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800834c:	9a08      	ldr	r2, [sp, #32]
 800834e:	4650      	mov	r0, sl
 8008350:	4659      	mov	r1, fp
 8008352:	b1bb      	cbz	r3, 8008384 <_strtod_l+0x914>
 8008354:	f7ff fb6e 	bl	8007a34 <sulp>
 8008358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800835c:	ec53 2b10 	vmov	r2, r3, d0
 8008360:	f7f7 ffac 	bl	80002bc <__adddf3>
 8008364:	4682      	mov	sl, r0
 8008366:	468b      	mov	fp, r1
 8008368:	e7de      	b.n	8008328 <_strtod_l+0x8b8>
 800836a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800836e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008372:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008376:	f04f 3aff 	mov.w	sl, #4294967295
 800837a:	e7d5      	b.n	8008328 <_strtod_l+0x8b8>
 800837c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800837e:	ea13 0f0a 	tst.w	r3, sl
 8008382:	e7e1      	b.n	8008348 <_strtod_l+0x8d8>
 8008384:	f7ff fb56 	bl	8007a34 <sulp>
 8008388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800838c:	ec53 2b10 	vmov	r2, r3, d0
 8008390:	f7f7 ff92 	bl	80002b8 <__aeabi_dsub>
 8008394:	2200      	movs	r2, #0
 8008396:	2300      	movs	r3, #0
 8008398:	4682      	mov	sl, r0
 800839a:	468b      	mov	fp, r1
 800839c:	f7f8 fbac 	bl	8000af8 <__aeabi_dcmpeq>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d0c1      	beq.n	8008328 <_strtod_l+0x8b8>
 80083a4:	e61a      	b.n	8007fdc <_strtod_l+0x56c>
 80083a6:	4641      	mov	r1, r8
 80083a8:	4620      	mov	r0, r4
 80083aa:	f7ff facd 	bl	8007948 <__ratio>
 80083ae:	ec57 6b10 	vmov	r6, r7, d0
 80083b2:	2200      	movs	r2, #0
 80083b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fbb0 	bl	8000b20 <__aeabi_dcmple>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d06f      	beq.n	80084a4 <_strtod_l+0xa34>
 80083c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d17a      	bne.n	80084c0 <_strtod_l+0xa50>
 80083ca:	f1ba 0f00 	cmp.w	sl, #0
 80083ce:	d158      	bne.n	8008482 <_strtod_l+0xa12>
 80083d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d15a      	bne.n	8008490 <_strtod_l+0xa20>
 80083da:	4b64      	ldr	r3, [pc, #400]	@ (800856c <_strtod_l+0xafc>)
 80083dc:	2200      	movs	r2, #0
 80083de:	4630      	mov	r0, r6
 80083e0:	4639      	mov	r1, r7
 80083e2:	f7f8 fb93 	bl	8000b0c <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d159      	bne.n	800849e <_strtod_l+0xa2e>
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	4b60      	ldr	r3, [pc, #384]	@ (8008570 <_strtod_l+0xb00>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	f7f8 f919 	bl	8000628 <__aeabi_dmul>
 80083f6:	4606      	mov	r6, r0
 80083f8:	460f      	mov	r7, r1
 80083fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80083fe:	9606      	str	r6, [sp, #24]
 8008400:	9307      	str	r3, [sp, #28]
 8008402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008406:	4d57      	ldr	r5, [pc, #348]	@ (8008564 <_strtod_l+0xaf4>)
 8008408:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800840c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800840e:	401d      	ands	r5, r3
 8008410:	4b58      	ldr	r3, [pc, #352]	@ (8008574 <_strtod_l+0xb04>)
 8008412:	429d      	cmp	r5, r3
 8008414:	f040 80b2 	bne.w	800857c <_strtod_l+0xb0c>
 8008418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800841e:	ec4b ab10 	vmov	d0, sl, fp
 8008422:	f7ff f9c9 	bl	80077b8 <__ulp>
 8008426:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800842a:	ec51 0b10 	vmov	r0, r1, d0
 800842e:	f7f8 f8fb 	bl	8000628 <__aeabi_dmul>
 8008432:	4652      	mov	r2, sl
 8008434:	465b      	mov	r3, fp
 8008436:	f7f7 ff41 	bl	80002bc <__adddf3>
 800843a:	460b      	mov	r3, r1
 800843c:	4949      	ldr	r1, [pc, #292]	@ (8008564 <_strtod_l+0xaf4>)
 800843e:	4a4e      	ldr	r2, [pc, #312]	@ (8008578 <_strtod_l+0xb08>)
 8008440:	4019      	ands	r1, r3
 8008442:	4291      	cmp	r1, r2
 8008444:	4682      	mov	sl, r0
 8008446:	d942      	bls.n	80084ce <_strtod_l+0xa5e>
 8008448:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800844a:	4b47      	ldr	r3, [pc, #284]	@ (8008568 <_strtod_l+0xaf8>)
 800844c:	429a      	cmp	r2, r3
 800844e:	d103      	bne.n	8008458 <_strtod_l+0x9e8>
 8008450:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008452:	3301      	adds	r3, #1
 8008454:	f43f ad2f 	beq.w	8007eb6 <_strtod_l+0x446>
 8008458:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008568 <_strtod_l+0xaf8>
 800845c:	f04f 3aff 	mov.w	sl, #4294967295
 8008460:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008462:	9805      	ldr	r0, [sp, #20]
 8008464:	f7fe fe7c 	bl	8007160 <_Bfree>
 8008468:	9805      	ldr	r0, [sp, #20]
 800846a:	4649      	mov	r1, r9
 800846c:	f7fe fe78 	bl	8007160 <_Bfree>
 8008470:	9805      	ldr	r0, [sp, #20]
 8008472:	4641      	mov	r1, r8
 8008474:	f7fe fe74 	bl	8007160 <_Bfree>
 8008478:	9805      	ldr	r0, [sp, #20]
 800847a:	4621      	mov	r1, r4
 800847c:	f7fe fe70 	bl	8007160 <_Bfree>
 8008480:	e619      	b.n	80080b6 <_strtod_l+0x646>
 8008482:	f1ba 0f01 	cmp.w	sl, #1
 8008486:	d103      	bne.n	8008490 <_strtod_l+0xa20>
 8008488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	f43f ada6 	beq.w	8007fdc <_strtod_l+0x56c>
 8008490:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008540 <_strtod_l+0xad0>
 8008494:	4f35      	ldr	r7, [pc, #212]	@ (800856c <_strtod_l+0xafc>)
 8008496:	ed8d 7b06 	vstr	d7, [sp, #24]
 800849a:	2600      	movs	r6, #0
 800849c:	e7b1      	b.n	8008402 <_strtod_l+0x992>
 800849e:	4f34      	ldr	r7, [pc, #208]	@ (8008570 <_strtod_l+0xb00>)
 80084a0:	2600      	movs	r6, #0
 80084a2:	e7aa      	b.n	80083fa <_strtod_l+0x98a>
 80084a4:	4b32      	ldr	r3, [pc, #200]	@ (8008570 <_strtod_l+0xb00>)
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	2200      	movs	r2, #0
 80084ac:	f7f8 f8bc 	bl	8000628 <__aeabi_dmul>
 80084b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084b2:	4606      	mov	r6, r0
 80084b4:	460f      	mov	r7, r1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d09f      	beq.n	80083fa <_strtod_l+0x98a>
 80084ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80084be:	e7a0      	b.n	8008402 <_strtod_l+0x992>
 80084c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008548 <_strtod_l+0xad8>
 80084c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80084c8:	ec57 6b17 	vmov	r6, r7, d7
 80084cc:	e799      	b.n	8008402 <_strtod_l+0x992>
 80084ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084d2:	9b08      	ldr	r3, [sp, #32]
 80084d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1c1      	bne.n	8008460 <_strtod_l+0x9f0>
 80084dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084e0:	0d1b      	lsrs	r3, r3, #20
 80084e2:	051b      	lsls	r3, r3, #20
 80084e4:	429d      	cmp	r5, r3
 80084e6:	d1bb      	bne.n	8008460 <_strtod_l+0x9f0>
 80084e8:	4630      	mov	r0, r6
 80084ea:	4639      	mov	r1, r7
 80084ec:	f7f8 fbfc 	bl	8000ce8 <__aeabi_d2lz>
 80084f0:	f7f8 f86c 	bl	80005cc <__aeabi_l2d>
 80084f4:	4602      	mov	r2, r0
 80084f6:	460b      	mov	r3, r1
 80084f8:	4630      	mov	r0, r6
 80084fa:	4639      	mov	r1, r7
 80084fc:	f7f7 fedc 	bl	80002b8 <__aeabi_dsub>
 8008500:	460b      	mov	r3, r1
 8008502:	4602      	mov	r2, r0
 8008504:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008508:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800850c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800850e:	ea46 060a 	orr.w	r6, r6, sl
 8008512:	431e      	orrs	r6, r3
 8008514:	d06f      	beq.n	80085f6 <_strtod_l+0xb86>
 8008516:	a30e      	add	r3, pc, #56	@ (adr r3, 8008550 <_strtod_l+0xae0>)
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	f7f8 faf6 	bl	8000b0c <__aeabi_dcmplt>
 8008520:	2800      	cmp	r0, #0
 8008522:	f47f acd3 	bne.w	8007ecc <_strtod_l+0x45c>
 8008526:	a30c      	add	r3, pc, #48	@ (adr r3, 8008558 <_strtod_l+0xae8>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008530:	f7f8 fb0a 	bl	8000b48 <__aeabi_dcmpgt>
 8008534:	2800      	cmp	r0, #0
 8008536:	d093      	beq.n	8008460 <_strtod_l+0x9f0>
 8008538:	e4c8      	b.n	8007ecc <_strtod_l+0x45c>
 800853a:	bf00      	nop
 800853c:	f3af 8000 	nop.w
 8008540:	00000000 	.word	0x00000000
 8008544:	bff00000 	.word	0xbff00000
 8008548:	00000000 	.word	0x00000000
 800854c:	3ff00000 	.word	0x3ff00000
 8008550:	94a03595 	.word	0x94a03595
 8008554:	3fdfffff 	.word	0x3fdfffff
 8008558:	35afe535 	.word	0x35afe535
 800855c:	3fe00000 	.word	0x3fe00000
 8008560:	000fffff 	.word	0x000fffff
 8008564:	7ff00000 	.word	0x7ff00000
 8008568:	7fefffff 	.word	0x7fefffff
 800856c:	3ff00000 	.word	0x3ff00000
 8008570:	3fe00000 	.word	0x3fe00000
 8008574:	7fe00000 	.word	0x7fe00000
 8008578:	7c9fffff 	.word	0x7c9fffff
 800857c:	9b08      	ldr	r3, [sp, #32]
 800857e:	b323      	cbz	r3, 80085ca <_strtod_l+0xb5a>
 8008580:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008584:	d821      	bhi.n	80085ca <_strtod_l+0xb5a>
 8008586:	a328      	add	r3, pc, #160	@ (adr r3, 8008628 <_strtod_l+0xbb8>)
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f8 fac6 	bl	8000b20 <__aeabi_dcmple>
 8008594:	b1a0      	cbz	r0, 80085c0 <_strtod_l+0xb50>
 8008596:	4639      	mov	r1, r7
 8008598:	4630      	mov	r0, r6
 800859a:	f7f8 fb1d 	bl	8000bd8 <__aeabi_d2uiz>
 800859e:	2801      	cmp	r0, #1
 80085a0:	bf38      	it	cc
 80085a2:	2001      	movcc	r0, #1
 80085a4:	f7f7 ffc6 	bl	8000534 <__aeabi_ui2d>
 80085a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	b9fb      	cbnz	r3, 80085f0 <_strtod_l+0xb80>
 80085b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80085b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80085b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80085b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80085bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80085c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80085c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80085c6:	1b5b      	subs	r3, r3, r5
 80085c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80085ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80085ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80085d2:	f7ff f8f1 	bl	80077b8 <__ulp>
 80085d6:	4650      	mov	r0, sl
 80085d8:	ec53 2b10 	vmov	r2, r3, d0
 80085dc:	4659      	mov	r1, fp
 80085de:	f7f8 f823 	bl	8000628 <__aeabi_dmul>
 80085e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80085e6:	f7f7 fe69 	bl	80002bc <__adddf3>
 80085ea:	4682      	mov	sl, r0
 80085ec:	468b      	mov	fp, r1
 80085ee:	e770      	b.n	80084d2 <_strtod_l+0xa62>
 80085f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80085f4:	e7e0      	b.n	80085b8 <_strtod_l+0xb48>
 80085f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008630 <_strtod_l+0xbc0>)
 80085f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fc:	f7f8 fa86 	bl	8000b0c <__aeabi_dcmplt>
 8008600:	e798      	b.n	8008534 <_strtod_l+0xac4>
 8008602:	2300      	movs	r3, #0
 8008604:	930e      	str	r3, [sp, #56]	@ 0x38
 8008606:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008608:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	f7ff ba6d 	b.w	8007aea <_strtod_l+0x7a>
 8008610:	2a65      	cmp	r2, #101	@ 0x65
 8008612:	f43f ab68 	beq.w	8007ce6 <_strtod_l+0x276>
 8008616:	2a45      	cmp	r2, #69	@ 0x45
 8008618:	f43f ab65 	beq.w	8007ce6 <_strtod_l+0x276>
 800861c:	2301      	movs	r3, #1
 800861e:	f7ff bba0 	b.w	8007d62 <_strtod_l+0x2f2>
 8008622:	bf00      	nop
 8008624:	f3af 8000 	nop.w
 8008628:	ffc00000 	.word	0xffc00000
 800862c:	41dfffff 	.word	0x41dfffff
 8008630:	94a03595 	.word	0x94a03595
 8008634:	3fcfffff 	.word	0x3fcfffff

08008638 <_strtod_r>:
 8008638:	4b01      	ldr	r3, [pc, #4]	@ (8008640 <_strtod_r+0x8>)
 800863a:	f7ff ba19 	b.w	8007a70 <_strtod_l>
 800863e:	bf00      	nop
 8008640:	2000006c 	.word	0x2000006c

08008644 <_strtol_l.isra.0>:
 8008644:	2b24      	cmp	r3, #36	@ 0x24
 8008646:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800864a:	4686      	mov	lr, r0
 800864c:	4690      	mov	r8, r2
 800864e:	d801      	bhi.n	8008654 <_strtol_l.isra.0+0x10>
 8008650:	2b01      	cmp	r3, #1
 8008652:	d106      	bne.n	8008662 <_strtol_l.isra.0+0x1e>
 8008654:	f7fd fd82 	bl	800615c <__errno>
 8008658:	2316      	movs	r3, #22
 800865a:	6003      	str	r3, [r0, #0]
 800865c:	2000      	movs	r0, #0
 800865e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008662:	4834      	ldr	r0, [pc, #208]	@ (8008734 <_strtol_l.isra.0+0xf0>)
 8008664:	460d      	mov	r5, r1
 8008666:	462a      	mov	r2, r5
 8008668:	f815 4b01 	ldrb.w	r4, [r5], #1
 800866c:	5d06      	ldrb	r6, [r0, r4]
 800866e:	f016 0608 	ands.w	r6, r6, #8
 8008672:	d1f8      	bne.n	8008666 <_strtol_l.isra.0+0x22>
 8008674:	2c2d      	cmp	r4, #45	@ 0x2d
 8008676:	d110      	bne.n	800869a <_strtol_l.isra.0+0x56>
 8008678:	782c      	ldrb	r4, [r5, #0]
 800867a:	2601      	movs	r6, #1
 800867c:	1c95      	adds	r5, r2, #2
 800867e:	f033 0210 	bics.w	r2, r3, #16
 8008682:	d115      	bne.n	80086b0 <_strtol_l.isra.0+0x6c>
 8008684:	2c30      	cmp	r4, #48	@ 0x30
 8008686:	d10d      	bne.n	80086a4 <_strtol_l.isra.0+0x60>
 8008688:	782a      	ldrb	r2, [r5, #0]
 800868a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800868e:	2a58      	cmp	r2, #88	@ 0x58
 8008690:	d108      	bne.n	80086a4 <_strtol_l.isra.0+0x60>
 8008692:	786c      	ldrb	r4, [r5, #1]
 8008694:	3502      	adds	r5, #2
 8008696:	2310      	movs	r3, #16
 8008698:	e00a      	b.n	80086b0 <_strtol_l.isra.0+0x6c>
 800869a:	2c2b      	cmp	r4, #43	@ 0x2b
 800869c:	bf04      	itt	eq
 800869e:	782c      	ldrbeq	r4, [r5, #0]
 80086a0:	1c95      	addeq	r5, r2, #2
 80086a2:	e7ec      	b.n	800867e <_strtol_l.isra.0+0x3a>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1f6      	bne.n	8008696 <_strtol_l.isra.0+0x52>
 80086a8:	2c30      	cmp	r4, #48	@ 0x30
 80086aa:	bf14      	ite	ne
 80086ac:	230a      	movne	r3, #10
 80086ae:	2308      	moveq	r3, #8
 80086b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80086b4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80086b8:	2200      	movs	r2, #0
 80086ba:	fbbc f9f3 	udiv	r9, ip, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80086c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80086c8:	2f09      	cmp	r7, #9
 80086ca:	d80f      	bhi.n	80086ec <_strtol_l.isra.0+0xa8>
 80086cc:	463c      	mov	r4, r7
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	dd1b      	ble.n	800870a <_strtol_l.isra.0+0xc6>
 80086d2:	1c57      	adds	r7, r2, #1
 80086d4:	d007      	beq.n	80086e6 <_strtol_l.isra.0+0xa2>
 80086d6:	4581      	cmp	r9, r0
 80086d8:	d314      	bcc.n	8008704 <_strtol_l.isra.0+0xc0>
 80086da:	d101      	bne.n	80086e0 <_strtol_l.isra.0+0x9c>
 80086dc:	45a2      	cmp	sl, r4
 80086de:	db11      	blt.n	8008704 <_strtol_l.isra.0+0xc0>
 80086e0:	fb00 4003 	mla	r0, r0, r3, r4
 80086e4:	2201      	movs	r2, #1
 80086e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086ea:	e7eb      	b.n	80086c4 <_strtol_l.isra.0+0x80>
 80086ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80086f0:	2f19      	cmp	r7, #25
 80086f2:	d801      	bhi.n	80086f8 <_strtol_l.isra.0+0xb4>
 80086f4:	3c37      	subs	r4, #55	@ 0x37
 80086f6:	e7ea      	b.n	80086ce <_strtol_l.isra.0+0x8a>
 80086f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80086fc:	2f19      	cmp	r7, #25
 80086fe:	d804      	bhi.n	800870a <_strtol_l.isra.0+0xc6>
 8008700:	3c57      	subs	r4, #87	@ 0x57
 8008702:	e7e4      	b.n	80086ce <_strtol_l.isra.0+0x8a>
 8008704:	f04f 32ff 	mov.w	r2, #4294967295
 8008708:	e7ed      	b.n	80086e6 <_strtol_l.isra.0+0xa2>
 800870a:	1c53      	adds	r3, r2, #1
 800870c:	d108      	bne.n	8008720 <_strtol_l.isra.0+0xdc>
 800870e:	2322      	movs	r3, #34	@ 0x22
 8008710:	f8ce 3000 	str.w	r3, [lr]
 8008714:	4660      	mov	r0, ip
 8008716:	f1b8 0f00 	cmp.w	r8, #0
 800871a:	d0a0      	beq.n	800865e <_strtol_l.isra.0+0x1a>
 800871c:	1e69      	subs	r1, r5, #1
 800871e:	e006      	b.n	800872e <_strtol_l.isra.0+0xea>
 8008720:	b106      	cbz	r6, 8008724 <_strtol_l.isra.0+0xe0>
 8008722:	4240      	negs	r0, r0
 8008724:	f1b8 0f00 	cmp.w	r8, #0
 8008728:	d099      	beq.n	800865e <_strtol_l.isra.0+0x1a>
 800872a:	2a00      	cmp	r2, #0
 800872c:	d1f6      	bne.n	800871c <_strtol_l.isra.0+0xd8>
 800872e:	f8c8 1000 	str.w	r1, [r8]
 8008732:	e794      	b.n	800865e <_strtol_l.isra.0+0x1a>
 8008734:	08009ea9 	.word	0x08009ea9

08008738 <_strtol_r>:
 8008738:	f7ff bf84 	b.w	8008644 <_strtol_l.isra.0>

0800873c <__ssputs_r>:
 800873c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	688e      	ldr	r6, [r1, #8]
 8008742:	461f      	mov	r7, r3
 8008744:	42be      	cmp	r6, r7
 8008746:	680b      	ldr	r3, [r1, #0]
 8008748:	4682      	mov	sl, r0
 800874a:	460c      	mov	r4, r1
 800874c:	4690      	mov	r8, r2
 800874e:	d82d      	bhi.n	80087ac <__ssputs_r+0x70>
 8008750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008758:	d026      	beq.n	80087a8 <__ssputs_r+0x6c>
 800875a:	6965      	ldr	r5, [r4, #20]
 800875c:	6909      	ldr	r1, [r1, #16]
 800875e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008762:	eba3 0901 	sub.w	r9, r3, r1
 8008766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800876a:	1c7b      	adds	r3, r7, #1
 800876c:	444b      	add	r3, r9
 800876e:	106d      	asrs	r5, r5, #1
 8008770:	429d      	cmp	r5, r3
 8008772:	bf38      	it	cc
 8008774:	461d      	movcc	r5, r3
 8008776:	0553      	lsls	r3, r2, #21
 8008778:	d527      	bpl.n	80087ca <__ssputs_r+0x8e>
 800877a:	4629      	mov	r1, r5
 800877c:	f7fe fc24 	bl	8006fc8 <_malloc_r>
 8008780:	4606      	mov	r6, r0
 8008782:	b360      	cbz	r0, 80087de <__ssputs_r+0xa2>
 8008784:	6921      	ldr	r1, [r4, #16]
 8008786:	464a      	mov	r2, r9
 8008788:	f7fd fd1d 	bl	80061c6 <memcpy>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	6126      	str	r6, [r4, #16]
 800879a:	6165      	str	r5, [r4, #20]
 800879c:	444e      	add	r6, r9
 800879e:	eba5 0509 	sub.w	r5, r5, r9
 80087a2:	6026      	str	r6, [r4, #0]
 80087a4:	60a5      	str	r5, [r4, #8]
 80087a6:	463e      	mov	r6, r7
 80087a8:	42be      	cmp	r6, r7
 80087aa:	d900      	bls.n	80087ae <__ssputs_r+0x72>
 80087ac:	463e      	mov	r6, r7
 80087ae:	6820      	ldr	r0, [r4, #0]
 80087b0:	4632      	mov	r2, r6
 80087b2:	4641      	mov	r1, r8
 80087b4:	f000 fbb0 	bl	8008f18 <memmove>
 80087b8:	68a3      	ldr	r3, [r4, #8]
 80087ba:	1b9b      	subs	r3, r3, r6
 80087bc:	60a3      	str	r3, [r4, #8]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	4433      	add	r3, r6
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	2000      	movs	r0, #0
 80087c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ca:	462a      	mov	r2, r5
 80087cc:	f000 ff5d 	bl	800968a <_realloc_r>
 80087d0:	4606      	mov	r6, r0
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d1e0      	bne.n	8008798 <__ssputs_r+0x5c>
 80087d6:	6921      	ldr	r1, [r4, #16]
 80087d8:	4650      	mov	r0, sl
 80087da:	f7fe fb81 	bl	8006ee0 <_free_r>
 80087de:	230c      	movs	r3, #12
 80087e0:	f8ca 3000 	str.w	r3, [sl]
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ea:	81a3      	strh	r3, [r4, #12]
 80087ec:	f04f 30ff 	mov.w	r0, #4294967295
 80087f0:	e7e9      	b.n	80087c6 <__ssputs_r+0x8a>
	...

080087f4 <_svfiprintf_r>:
 80087f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f8:	4698      	mov	r8, r3
 80087fa:	898b      	ldrh	r3, [r1, #12]
 80087fc:	061b      	lsls	r3, r3, #24
 80087fe:	b09d      	sub	sp, #116	@ 0x74
 8008800:	4607      	mov	r7, r0
 8008802:	460d      	mov	r5, r1
 8008804:	4614      	mov	r4, r2
 8008806:	d510      	bpl.n	800882a <_svfiprintf_r+0x36>
 8008808:	690b      	ldr	r3, [r1, #16]
 800880a:	b973      	cbnz	r3, 800882a <_svfiprintf_r+0x36>
 800880c:	2140      	movs	r1, #64	@ 0x40
 800880e:	f7fe fbdb 	bl	8006fc8 <_malloc_r>
 8008812:	6028      	str	r0, [r5, #0]
 8008814:	6128      	str	r0, [r5, #16]
 8008816:	b930      	cbnz	r0, 8008826 <_svfiprintf_r+0x32>
 8008818:	230c      	movs	r3, #12
 800881a:	603b      	str	r3, [r7, #0]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	b01d      	add	sp, #116	@ 0x74
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	2340      	movs	r3, #64	@ 0x40
 8008828:	616b      	str	r3, [r5, #20]
 800882a:	2300      	movs	r3, #0
 800882c:	9309      	str	r3, [sp, #36]	@ 0x24
 800882e:	2320      	movs	r3, #32
 8008830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008834:	f8cd 800c 	str.w	r8, [sp, #12]
 8008838:	2330      	movs	r3, #48	@ 0x30
 800883a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089d8 <_svfiprintf_r+0x1e4>
 800883e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008842:	f04f 0901 	mov.w	r9, #1
 8008846:	4623      	mov	r3, r4
 8008848:	469a      	mov	sl, r3
 800884a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884e:	b10a      	cbz	r2, 8008854 <_svfiprintf_r+0x60>
 8008850:	2a25      	cmp	r2, #37	@ 0x25
 8008852:	d1f9      	bne.n	8008848 <_svfiprintf_r+0x54>
 8008854:	ebba 0b04 	subs.w	fp, sl, r4
 8008858:	d00b      	beq.n	8008872 <_svfiprintf_r+0x7e>
 800885a:	465b      	mov	r3, fp
 800885c:	4622      	mov	r2, r4
 800885e:	4629      	mov	r1, r5
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ff6b 	bl	800873c <__ssputs_r>
 8008866:	3001      	adds	r0, #1
 8008868:	f000 80a7 	beq.w	80089ba <_svfiprintf_r+0x1c6>
 800886c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800886e:	445a      	add	r2, fp
 8008870:	9209      	str	r2, [sp, #36]	@ 0x24
 8008872:	f89a 3000 	ldrb.w	r3, [sl]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 809f 	beq.w	80089ba <_svfiprintf_r+0x1c6>
 800887c:	2300      	movs	r3, #0
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008886:	f10a 0a01 	add.w	sl, sl, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008892:	931a      	str	r3, [sp, #104]	@ 0x68
 8008894:	4654      	mov	r4, sl
 8008896:	2205      	movs	r2, #5
 8008898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889c:	484e      	ldr	r0, [pc, #312]	@ (80089d8 <_svfiprintf_r+0x1e4>)
 800889e:	f7f7 fcaf 	bl	8000200 <memchr>
 80088a2:	9a04      	ldr	r2, [sp, #16]
 80088a4:	b9d8      	cbnz	r0, 80088de <_svfiprintf_r+0xea>
 80088a6:	06d0      	lsls	r0, r2, #27
 80088a8:	bf44      	itt	mi
 80088aa:	2320      	movmi	r3, #32
 80088ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b0:	0711      	lsls	r1, r2, #28
 80088b2:	bf44      	itt	mi
 80088b4:	232b      	movmi	r3, #43	@ 0x2b
 80088b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088ba:	f89a 3000 	ldrb.w	r3, [sl]
 80088be:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c0:	d015      	beq.n	80088ee <_svfiprintf_r+0xfa>
 80088c2:	9a07      	ldr	r2, [sp, #28]
 80088c4:	4654      	mov	r4, sl
 80088c6:	2000      	movs	r0, #0
 80088c8:	f04f 0c0a 	mov.w	ip, #10
 80088cc:	4621      	mov	r1, r4
 80088ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d2:	3b30      	subs	r3, #48	@ 0x30
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d94b      	bls.n	8008970 <_svfiprintf_r+0x17c>
 80088d8:	b1b0      	cbz	r0, 8008908 <_svfiprintf_r+0x114>
 80088da:	9207      	str	r2, [sp, #28]
 80088dc:	e014      	b.n	8008908 <_svfiprintf_r+0x114>
 80088de:	eba0 0308 	sub.w	r3, r0, r8
 80088e2:	fa09 f303 	lsl.w	r3, r9, r3
 80088e6:	4313      	orrs	r3, r2
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	46a2      	mov	sl, r4
 80088ec:	e7d2      	b.n	8008894 <_svfiprintf_r+0xa0>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	1d19      	adds	r1, r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	9103      	str	r1, [sp, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfbb      	ittet	lt
 80088fa:	425b      	neglt	r3, r3
 80088fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008900:	9307      	strge	r3, [sp, #28]
 8008902:	9307      	strlt	r3, [sp, #28]
 8008904:	bfb8      	it	lt
 8008906:	9204      	strlt	r2, [sp, #16]
 8008908:	7823      	ldrb	r3, [r4, #0]
 800890a:	2b2e      	cmp	r3, #46	@ 0x2e
 800890c:	d10a      	bne.n	8008924 <_svfiprintf_r+0x130>
 800890e:	7863      	ldrb	r3, [r4, #1]
 8008910:	2b2a      	cmp	r3, #42	@ 0x2a
 8008912:	d132      	bne.n	800897a <_svfiprintf_r+0x186>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	9203      	str	r2, [sp, #12]
 800891c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008920:	3402      	adds	r4, #2
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089e8 <_svfiprintf_r+0x1f4>
 8008928:	7821      	ldrb	r1, [r4, #0]
 800892a:	2203      	movs	r2, #3
 800892c:	4650      	mov	r0, sl
 800892e:	f7f7 fc67 	bl	8000200 <memchr>
 8008932:	b138      	cbz	r0, 8008944 <_svfiprintf_r+0x150>
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	eba0 000a 	sub.w	r0, r0, sl
 800893a:	2240      	movs	r2, #64	@ 0x40
 800893c:	4082      	lsls	r2, r0
 800893e:	4313      	orrs	r3, r2
 8008940:	3401      	adds	r4, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008948:	4824      	ldr	r0, [pc, #144]	@ (80089dc <_svfiprintf_r+0x1e8>)
 800894a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800894e:	2206      	movs	r2, #6
 8008950:	f7f7 fc56 	bl	8000200 <memchr>
 8008954:	2800      	cmp	r0, #0
 8008956:	d036      	beq.n	80089c6 <_svfiprintf_r+0x1d2>
 8008958:	4b21      	ldr	r3, [pc, #132]	@ (80089e0 <_svfiprintf_r+0x1ec>)
 800895a:	bb1b      	cbnz	r3, 80089a4 <_svfiprintf_r+0x1b0>
 800895c:	9b03      	ldr	r3, [sp, #12]
 800895e:	3307      	adds	r3, #7
 8008960:	f023 0307 	bic.w	r3, r3, #7
 8008964:	3308      	adds	r3, #8
 8008966:	9303      	str	r3, [sp, #12]
 8008968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896a:	4433      	add	r3, r6
 800896c:	9309      	str	r3, [sp, #36]	@ 0x24
 800896e:	e76a      	b.n	8008846 <_svfiprintf_r+0x52>
 8008970:	fb0c 3202 	mla	r2, ip, r2, r3
 8008974:	460c      	mov	r4, r1
 8008976:	2001      	movs	r0, #1
 8008978:	e7a8      	b.n	80088cc <_svfiprintf_r+0xd8>
 800897a:	2300      	movs	r3, #0
 800897c:	3401      	adds	r4, #1
 800897e:	9305      	str	r3, [sp, #20]
 8008980:	4619      	mov	r1, r3
 8008982:	f04f 0c0a 	mov.w	ip, #10
 8008986:	4620      	mov	r0, r4
 8008988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800898c:	3a30      	subs	r2, #48	@ 0x30
 800898e:	2a09      	cmp	r2, #9
 8008990:	d903      	bls.n	800899a <_svfiprintf_r+0x1a6>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0c6      	beq.n	8008924 <_svfiprintf_r+0x130>
 8008996:	9105      	str	r1, [sp, #20]
 8008998:	e7c4      	b.n	8008924 <_svfiprintf_r+0x130>
 800899a:	fb0c 2101 	mla	r1, ip, r1, r2
 800899e:	4604      	mov	r4, r0
 80089a0:	2301      	movs	r3, #1
 80089a2:	e7f0      	b.n	8008986 <_svfiprintf_r+0x192>
 80089a4:	ab03      	add	r3, sp, #12
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	462a      	mov	r2, r5
 80089aa:	4b0e      	ldr	r3, [pc, #56]	@ (80089e4 <_svfiprintf_r+0x1f0>)
 80089ac:	a904      	add	r1, sp, #16
 80089ae:	4638      	mov	r0, r7
 80089b0:	f7fc faf8 	bl	8004fa4 <_printf_float>
 80089b4:	1c42      	adds	r2, r0, #1
 80089b6:	4606      	mov	r6, r0
 80089b8:	d1d6      	bne.n	8008968 <_svfiprintf_r+0x174>
 80089ba:	89ab      	ldrh	r3, [r5, #12]
 80089bc:	065b      	lsls	r3, r3, #25
 80089be:	f53f af2d 	bmi.w	800881c <_svfiprintf_r+0x28>
 80089c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c4:	e72c      	b.n	8008820 <_svfiprintf_r+0x2c>
 80089c6:	ab03      	add	r3, sp, #12
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	462a      	mov	r2, r5
 80089cc:	4b05      	ldr	r3, [pc, #20]	@ (80089e4 <_svfiprintf_r+0x1f0>)
 80089ce:	a904      	add	r1, sp, #16
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7fc fd7f 	bl	80054d4 <_printf_i>
 80089d6:	e7ed      	b.n	80089b4 <_svfiprintf_r+0x1c0>
 80089d8:	08009ce3 	.word	0x08009ce3
 80089dc:	08009ced 	.word	0x08009ced
 80089e0:	08004fa5 	.word	0x08004fa5
 80089e4:	0800873d 	.word	0x0800873d
 80089e8:	08009ce9 	.word	0x08009ce9

080089ec <__sfputc_r>:
 80089ec:	6893      	ldr	r3, [r2, #8]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	b410      	push	{r4}
 80089f4:	6093      	str	r3, [r2, #8]
 80089f6:	da08      	bge.n	8008a0a <__sfputc_r+0x1e>
 80089f8:	6994      	ldr	r4, [r2, #24]
 80089fa:	42a3      	cmp	r3, r4
 80089fc:	db01      	blt.n	8008a02 <__sfputc_r+0x16>
 80089fe:	290a      	cmp	r1, #10
 8008a00:	d103      	bne.n	8008a0a <__sfputc_r+0x1e>
 8008a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a06:	f7fd ba30 	b.w	8005e6a <__swbuf_r>
 8008a0a:	6813      	ldr	r3, [r2, #0]
 8008a0c:	1c58      	adds	r0, r3, #1
 8008a0e:	6010      	str	r0, [r2, #0]
 8008a10:	7019      	strb	r1, [r3, #0]
 8008a12:	4608      	mov	r0, r1
 8008a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a18:	4770      	bx	lr

08008a1a <__sfputs_r>:
 8008a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1c:	4606      	mov	r6, r0
 8008a1e:	460f      	mov	r7, r1
 8008a20:	4614      	mov	r4, r2
 8008a22:	18d5      	adds	r5, r2, r3
 8008a24:	42ac      	cmp	r4, r5
 8008a26:	d101      	bne.n	8008a2c <__sfputs_r+0x12>
 8008a28:	2000      	movs	r0, #0
 8008a2a:	e007      	b.n	8008a3c <__sfputs_r+0x22>
 8008a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a30:	463a      	mov	r2, r7
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff ffda 	bl	80089ec <__sfputc_r>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d1f3      	bne.n	8008a24 <__sfputs_r+0xa>
 8008a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a40 <_vfiprintf_r>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	460d      	mov	r5, r1
 8008a46:	b09d      	sub	sp, #116	@ 0x74
 8008a48:	4614      	mov	r4, r2
 8008a4a:	4698      	mov	r8, r3
 8008a4c:	4606      	mov	r6, r0
 8008a4e:	b118      	cbz	r0, 8008a58 <_vfiprintf_r+0x18>
 8008a50:	6a03      	ldr	r3, [r0, #32]
 8008a52:	b90b      	cbnz	r3, 8008a58 <_vfiprintf_r+0x18>
 8008a54:	f7fd f8f6 	bl	8005c44 <__sinit>
 8008a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a5a:	07d9      	lsls	r1, r3, #31
 8008a5c:	d405      	bmi.n	8008a6a <_vfiprintf_r+0x2a>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	059a      	lsls	r2, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_vfiprintf_r+0x2a>
 8008a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a66:	f7fd fba4 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	071b      	lsls	r3, r3, #28
 8008a6e:	d501      	bpl.n	8008a74 <_vfiprintf_r+0x34>
 8008a70:	692b      	ldr	r3, [r5, #16]
 8008a72:	b99b      	cbnz	r3, 8008a9c <_vfiprintf_r+0x5c>
 8008a74:	4629      	mov	r1, r5
 8008a76:	4630      	mov	r0, r6
 8008a78:	f7fd fa36 	bl	8005ee8 <__swsetup_r>
 8008a7c:	b170      	cbz	r0, 8008a9c <_vfiprintf_r+0x5c>
 8008a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a80:	07dc      	lsls	r4, r3, #31
 8008a82:	d504      	bpl.n	8008a8e <_vfiprintf_r+0x4e>
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	b01d      	add	sp, #116	@ 0x74
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	0598      	lsls	r0, r3, #22
 8008a92:	d4f7      	bmi.n	8008a84 <_vfiprintf_r+0x44>
 8008a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a96:	f7fd fb8d 	bl	80061b4 <__retarget_lock_release_recursive>
 8008a9a:	e7f3      	b.n	8008a84 <_vfiprintf_r+0x44>
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008aaa:	2330      	movs	r3, #48	@ 0x30
 8008aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c5c <_vfiprintf_r+0x21c>
 8008ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ab4:	f04f 0901 	mov.w	r9, #1
 8008ab8:	4623      	mov	r3, r4
 8008aba:	469a      	mov	sl, r3
 8008abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac0:	b10a      	cbz	r2, 8008ac6 <_vfiprintf_r+0x86>
 8008ac2:	2a25      	cmp	r2, #37	@ 0x25
 8008ac4:	d1f9      	bne.n	8008aba <_vfiprintf_r+0x7a>
 8008ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8008aca:	d00b      	beq.n	8008ae4 <_vfiprintf_r+0xa4>
 8008acc:	465b      	mov	r3, fp
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	f7ff ffa1 	bl	8008a1a <__sfputs_r>
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f000 80a7 	beq.w	8008c2c <_vfiprintf_r+0x1ec>
 8008ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae0:	445a      	add	r2, fp
 8008ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 809f 	beq.w	8008c2c <_vfiprintf_r+0x1ec>
 8008aee:	2300      	movs	r3, #0
 8008af0:	f04f 32ff 	mov.w	r2, #4294967295
 8008af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008af8:	f10a 0a01 	add.w	sl, sl, #1
 8008afc:	9304      	str	r3, [sp, #16]
 8008afe:	9307      	str	r3, [sp, #28]
 8008b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b06:	4654      	mov	r4, sl
 8008b08:	2205      	movs	r2, #5
 8008b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b0e:	4853      	ldr	r0, [pc, #332]	@ (8008c5c <_vfiprintf_r+0x21c>)
 8008b10:	f7f7 fb76 	bl	8000200 <memchr>
 8008b14:	9a04      	ldr	r2, [sp, #16]
 8008b16:	b9d8      	cbnz	r0, 8008b50 <_vfiprintf_r+0x110>
 8008b18:	06d1      	lsls	r1, r2, #27
 8008b1a:	bf44      	itt	mi
 8008b1c:	2320      	movmi	r3, #32
 8008b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b22:	0713      	lsls	r3, r2, #28
 8008b24:	bf44      	itt	mi
 8008b26:	232b      	movmi	r3, #43	@ 0x2b
 8008b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b32:	d015      	beq.n	8008b60 <_vfiprintf_r+0x120>
 8008b34:	9a07      	ldr	r2, [sp, #28]
 8008b36:	4654      	mov	r4, sl
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f04f 0c0a 	mov.w	ip, #10
 8008b3e:	4621      	mov	r1, r4
 8008b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b44:	3b30      	subs	r3, #48	@ 0x30
 8008b46:	2b09      	cmp	r3, #9
 8008b48:	d94b      	bls.n	8008be2 <_vfiprintf_r+0x1a2>
 8008b4a:	b1b0      	cbz	r0, 8008b7a <_vfiprintf_r+0x13a>
 8008b4c:	9207      	str	r2, [sp, #28]
 8008b4e:	e014      	b.n	8008b7a <_vfiprintf_r+0x13a>
 8008b50:	eba0 0308 	sub.w	r3, r0, r8
 8008b54:	fa09 f303 	lsl.w	r3, r9, r3
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	46a2      	mov	sl, r4
 8008b5e:	e7d2      	b.n	8008b06 <_vfiprintf_r+0xc6>
 8008b60:	9b03      	ldr	r3, [sp, #12]
 8008b62:	1d19      	adds	r1, r3, #4
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	9103      	str	r1, [sp, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	bfbb      	ittet	lt
 8008b6c:	425b      	neglt	r3, r3
 8008b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b72:	9307      	strge	r3, [sp, #28]
 8008b74:	9307      	strlt	r3, [sp, #28]
 8008b76:	bfb8      	it	lt
 8008b78:	9204      	strlt	r2, [sp, #16]
 8008b7a:	7823      	ldrb	r3, [r4, #0]
 8008b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b7e:	d10a      	bne.n	8008b96 <_vfiprintf_r+0x156>
 8008b80:	7863      	ldrb	r3, [r4, #1]
 8008b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b84:	d132      	bne.n	8008bec <_vfiprintf_r+0x1ac>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	9203      	str	r2, [sp, #12]
 8008b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b92:	3402      	adds	r4, #2
 8008b94:	9305      	str	r3, [sp, #20]
 8008b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c6c <_vfiprintf_r+0x22c>
 8008b9a:	7821      	ldrb	r1, [r4, #0]
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	f7f7 fb2e 	bl	8000200 <memchr>
 8008ba4:	b138      	cbz	r0, 8008bb6 <_vfiprintf_r+0x176>
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	eba0 000a 	sub.w	r0, r0, sl
 8008bac:	2240      	movs	r2, #64	@ 0x40
 8008bae:	4082      	lsls	r2, r0
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	3401      	adds	r4, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bba:	4829      	ldr	r0, [pc, #164]	@ (8008c60 <_vfiprintf_r+0x220>)
 8008bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bc0:	2206      	movs	r2, #6
 8008bc2:	f7f7 fb1d 	bl	8000200 <memchr>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d03f      	beq.n	8008c4a <_vfiprintf_r+0x20a>
 8008bca:	4b26      	ldr	r3, [pc, #152]	@ (8008c64 <_vfiprintf_r+0x224>)
 8008bcc:	bb1b      	cbnz	r3, 8008c16 <_vfiprintf_r+0x1d6>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	3307      	adds	r3, #7
 8008bd2:	f023 0307 	bic.w	r3, r3, #7
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	9303      	str	r3, [sp, #12]
 8008bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bdc:	443b      	add	r3, r7
 8008bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be0:	e76a      	b.n	8008ab8 <_vfiprintf_r+0x78>
 8008be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008be6:	460c      	mov	r4, r1
 8008be8:	2001      	movs	r0, #1
 8008bea:	e7a8      	b.n	8008b3e <_vfiprintf_r+0xfe>
 8008bec:	2300      	movs	r3, #0
 8008bee:	3401      	adds	r4, #1
 8008bf0:	9305      	str	r3, [sp, #20]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	f04f 0c0a 	mov.w	ip, #10
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bfe:	3a30      	subs	r2, #48	@ 0x30
 8008c00:	2a09      	cmp	r2, #9
 8008c02:	d903      	bls.n	8008c0c <_vfiprintf_r+0x1cc>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d0c6      	beq.n	8008b96 <_vfiprintf_r+0x156>
 8008c08:	9105      	str	r1, [sp, #20]
 8008c0a:	e7c4      	b.n	8008b96 <_vfiprintf_r+0x156>
 8008c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c10:	4604      	mov	r4, r0
 8008c12:	2301      	movs	r3, #1
 8008c14:	e7f0      	b.n	8008bf8 <_vfiprintf_r+0x1b8>
 8008c16:	ab03      	add	r3, sp, #12
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	4b12      	ldr	r3, [pc, #72]	@ (8008c68 <_vfiprintf_r+0x228>)
 8008c1e:	a904      	add	r1, sp, #16
 8008c20:	4630      	mov	r0, r6
 8008c22:	f7fc f9bf 	bl	8004fa4 <_printf_float>
 8008c26:	4607      	mov	r7, r0
 8008c28:	1c78      	adds	r0, r7, #1
 8008c2a:	d1d6      	bne.n	8008bda <_vfiprintf_r+0x19a>
 8008c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c2e:	07d9      	lsls	r1, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_vfiprintf_r+0x1fe>
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	059a      	lsls	r2, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_vfiprintf_r+0x1fe>
 8008c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3a:	f7fd fabb 	bl	80061b4 <__retarget_lock_release_recursive>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	065b      	lsls	r3, r3, #25
 8008c42:	f53f af1f 	bmi.w	8008a84 <_vfiprintf_r+0x44>
 8008c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c48:	e71e      	b.n	8008a88 <_vfiprintf_r+0x48>
 8008c4a:	ab03      	add	r3, sp, #12
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	462a      	mov	r2, r5
 8008c50:	4b05      	ldr	r3, [pc, #20]	@ (8008c68 <_vfiprintf_r+0x228>)
 8008c52:	a904      	add	r1, sp, #16
 8008c54:	4630      	mov	r0, r6
 8008c56:	f7fc fc3d 	bl	80054d4 <_printf_i>
 8008c5a:	e7e4      	b.n	8008c26 <_vfiprintf_r+0x1e6>
 8008c5c:	08009ce3 	.word	0x08009ce3
 8008c60:	08009ced 	.word	0x08009ced
 8008c64:	08004fa5 	.word	0x08004fa5
 8008c68:	08008a1b 	.word	0x08008a1b
 8008c6c:	08009ce9 	.word	0x08009ce9

08008c70 <__sflush_r>:
 8008c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c78:	0716      	lsls	r6, r2, #28
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	d454      	bmi.n	8008d2a <__sflush_r+0xba>
 8008c80:	684b      	ldr	r3, [r1, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc02      	bgt.n	8008c8c <__sflush_r+0x1c>
 8008c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dd48      	ble.n	8008d1e <__sflush_r+0xae>
 8008c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	d045      	beq.n	8008d1e <__sflush_r+0xae>
 8008c92:	2300      	movs	r3, #0
 8008c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c98:	682f      	ldr	r7, [r5, #0]
 8008c9a:	6a21      	ldr	r1, [r4, #32]
 8008c9c:	602b      	str	r3, [r5, #0]
 8008c9e:	d030      	beq.n	8008d02 <__sflush_r+0x92>
 8008ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	0759      	lsls	r1, r3, #29
 8008ca6:	d505      	bpl.n	8008cb4 <__sflush_r+0x44>
 8008ca8:	6863      	ldr	r3, [r4, #4]
 8008caa:	1ad2      	subs	r2, r2, r3
 8008cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cae:	b10b      	cbz	r3, 8008cb4 <__sflush_r+0x44>
 8008cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cb2:	1ad2      	subs	r2, r2, r3
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cb8:	6a21      	ldr	r1, [r4, #32]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	47b0      	blx	r6
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	d106      	bne.n	8008cd2 <__sflush_r+0x62>
 8008cc4:	6829      	ldr	r1, [r5, #0]
 8008cc6:	291d      	cmp	r1, #29
 8008cc8:	d82b      	bhi.n	8008d22 <__sflush_r+0xb2>
 8008cca:	4a2a      	ldr	r2, [pc, #168]	@ (8008d74 <__sflush_r+0x104>)
 8008ccc:	40ca      	lsrs	r2, r1
 8008cce:	07d6      	lsls	r6, r2, #31
 8008cd0:	d527      	bpl.n	8008d22 <__sflush_r+0xb2>
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	6062      	str	r2, [r4, #4]
 8008cd6:	04d9      	lsls	r1, r3, #19
 8008cd8:	6922      	ldr	r2, [r4, #16]
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	d504      	bpl.n	8008ce8 <__sflush_r+0x78>
 8008cde:	1c42      	adds	r2, r0, #1
 8008ce0:	d101      	bne.n	8008ce6 <__sflush_r+0x76>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b903      	cbnz	r3, 8008ce8 <__sflush_r+0x78>
 8008ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cea:	602f      	str	r7, [r5, #0]
 8008cec:	b1b9      	cbz	r1, 8008d1e <__sflush_r+0xae>
 8008cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cf2:	4299      	cmp	r1, r3
 8008cf4:	d002      	beq.n	8008cfc <__sflush_r+0x8c>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f7fe f8f2 	bl	8006ee0 <_free_r>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d00:	e00d      	b.n	8008d1e <__sflush_r+0xae>
 8008d02:	2301      	movs	r3, #1
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b0      	blx	r6
 8008d08:	4602      	mov	r2, r0
 8008d0a:	1c50      	adds	r0, r2, #1
 8008d0c:	d1c9      	bne.n	8008ca2 <__sflush_r+0x32>
 8008d0e:	682b      	ldr	r3, [r5, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0c6      	beq.n	8008ca2 <__sflush_r+0x32>
 8008d14:	2b1d      	cmp	r3, #29
 8008d16:	d001      	beq.n	8008d1c <__sflush_r+0xac>
 8008d18:	2b16      	cmp	r3, #22
 8008d1a:	d11e      	bne.n	8008d5a <__sflush_r+0xea>
 8008d1c:	602f      	str	r7, [r5, #0]
 8008d1e:	2000      	movs	r0, #0
 8008d20:	e022      	b.n	8008d68 <__sflush_r+0xf8>
 8008d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d26:	b21b      	sxth	r3, r3
 8008d28:	e01b      	b.n	8008d62 <__sflush_r+0xf2>
 8008d2a:	690f      	ldr	r7, [r1, #16]
 8008d2c:	2f00      	cmp	r7, #0
 8008d2e:	d0f6      	beq.n	8008d1e <__sflush_r+0xae>
 8008d30:	0793      	lsls	r3, r2, #30
 8008d32:	680e      	ldr	r6, [r1, #0]
 8008d34:	bf08      	it	eq
 8008d36:	694b      	ldreq	r3, [r1, #20]
 8008d38:	600f      	str	r7, [r1, #0]
 8008d3a:	bf18      	it	ne
 8008d3c:	2300      	movne	r3, #0
 8008d3e:	eba6 0807 	sub.w	r8, r6, r7
 8008d42:	608b      	str	r3, [r1, #8]
 8008d44:	f1b8 0f00 	cmp.w	r8, #0
 8008d48:	dde9      	ble.n	8008d1e <__sflush_r+0xae>
 8008d4a:	6a21      	ldr	r1, [r4, #32]
 8008d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d4e:	4643      	mov	r3, r8
 8008d50:	463a      	mov	r2, r7
 8008d52:	4628      	mov	r0, r5
 8008d54:	47b0      	blx	r6
 8008d56:	2800      	cmp	r0, #0
 8008d58:	dc08      	bgt.n	8008d6c <__sflush_r+0xfc>
 8008d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	f04f 30ff 	mov.w	r0, #4294967295
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	4407      	add	r7, r0
 8008d6e:	eba8 0800 	sub.w	r8, r8, r0
 8008d72:	e7e7      	b.n	8008d44 <__sflush_r+0xd4>
 8008d74:	20400001 	.word	0x20400001

08008d78 <_fflush_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	690b      	ldr	r3, [r1, #16]
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	b913      	cbnz	r3, 8008d88 <_fflush_r+0x10>
 8008d82:	2500      	movs	r5, #0
 8008d84:	4628      	mov	r0, r5
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	b118      	cbz	r0, 8008d92 <_fflush_r+0x1a>
 8008d8a:	6a03      	ldr	r3, [r0, #32]
 8008d8c:	b90b      	cbnz	r3, 8008d92 <_fflush_r+0x1a>
 8008d8e:	f7fc ff59 	bl	8005c44 <__sinit>
 8008d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f3      	beq.n	8008d82 <_fflush_r+0xa>
 8008d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d9c:	07d0      	lsls	r0, r2, #31
 8008d9e:	d404      	bmi.n	8008daa <_fflush_r+0x32>
 8008da0:	0599      	lsls	r1, r3, #22
 8008da2:	d402      	bmi.n	8008daa <_fflush_r+0x32>
 8008da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008da6:	f7fd fa04 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8008daa:	4628      	mov	r0, r5
 8008dac:	4621      	mov	r1, r4
 8008dae:	f7ff ff5f 	bl	8008c70 <__sflush_r>
 8008db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008db4:	07da      	lsls	r2, r3, #31
 8008db6:	4605      	mov	r5, r0
 8008db8:	d4e4      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	059b      	lsls	r3, r3, #22
 8008dbe:	d4e1      	bmi.n	8008d84 <_fflush_r+0xc>
 8008dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dc2:	f7fd f9f7 	bl	80061b4 <__retarget_lock_release_recursive>
 8008dc6:	e7dd      	b.n	8008d84 <_fflush_r+0xc>

08008dc8 <fiprintf>:
 8008dc8:	b40e      	push	{r1, r2, r3}
 8008dca:	b503      	push	{r0, r1, lr}
 8008dcc:	4601      	mov	r1, r0
 8008dce:	ab03      	add	r3, sp, #12
 8008dd0:	4805      	ldr	r0, [pc, #20]	@ (8008de8 <fiprintf+0x20>)
 8008dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd6:	6800      	ldr	r0, [r0, #0]
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	f7ff fe31 	bl	8008a40 <_vfiprintf_r>
 8008dde:	b002      	add	sp, #8
 8008de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008de4:	b003      	add	sp, #12
 8008de6:	4770      	bx	lr
 8008de8:	2000001c 	.word	0x2000001c

08008dec <__swhatbuf_r>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	460c      	mov	r4, r1
 8008df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df4:	2900      	cmp	r1, #0
 8008df6:	b096      	sub	sp, #88	@ 0x58
 8008df8:	4615      	mov	r5, r2
 8008dfa:	461e      	mov	r6, r3
 8008dfc:	da0d      	bge.n	8008e1a <__swhatbuf_r+0x2e>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e04:	f04f 0100 	mov.w	r1, #0
 8008e08:	bf14      	ite	ne
 8008e0a:	2340      	movne	r3, #64	@ 0x40
 8008e0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e10:	2000      	movs	r0, #0
 8008e12:	6031      	str	r1, [r6, #0]
 8008e14:	602b      	str	r3, [r5, #0]
 8008e16:	b016      	add	sp, #88	@ 0x58
 8008e18:	bd70      	pop	{r4, r5, r6, pc}
 8008e1a:	466a      	mov	r2, sp
 8008e1c:	f000 f896 	bl	8008f4c <_fstat_r>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	dbec      	blt.n	8008dfe <__swhatbuf_r+0x12>
 8008e24:	9901      	ldr	r1, [sp, #4]
 8008e26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e2e:	4259      	negs	r1, r3
 8008e30:	4159      	adcs	r1, r3
 8008e32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e36:	e7eb      	b.n	8008e10 <__swhatbuf_r+0x24>

08008e38 <__smakebuf_r>:
 8008e38:	898b      	ldrh	r3, [r1, #12]
 8008e3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e3c:	079d      	lsls	r5, r3, #30
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	d507      	bpl.n	8008e54 <__smakebuf_r+0x1c>
 8008e44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	6163      	str	r3, [r4, #20]
 8008e50:	b003      	add	sp, #12
 8008e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e54:	ab01      	add	r3, sp, #4
 8008e56:	466a      	mov	r2, sp
 8008e58:	f7ff ffc8 	bl	8008dec <__swhatbuf_r>
 8008e5c:	9f00      	ldr	r7, [sp, #0]
 8008e5e:	4605      	mov	r5, r0
 8008e60:	4639      	mov	r1, r7
 8008e62:	4630      	mov	r0, r6
 8008e64:	f7fe f8b0 	bl	8006fc8 <_malloc_r>
 8008e68:	b948      	cbnz	r0, 8008e7e <__smakebuf_r+0x46>
 8008e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e6e:	059a      	lsls	r2, r3, #22
 8008e70:	d4ee      	bmi.n	8008e50 <__smakebuf_r+0x18>
 8008e72:	f023 0303 	bic.w	r3, r3, #3
 8008e76:	f043 0302 	orr.w	r3, r3, #2
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	e7e2      	b.n	8008e44 <__smakebuf_r+0xc>
 8008e7e:	89a3      	ldrh	r3, [r4, #12]
 8008e80:	6020      	str	r0, [r4, #0]
 8008e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	9b01      	ldr	r3, [sp, #4]
 8008e8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e8e:	b15b      	cbz	r3, 8008ea8 <__smakebuf_r+0x70>
 8008e90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e94:	4630      	mov	r0, r6
 8008e96:	f000 f86b 	bl	8008f70 <_isatty_r>
 8008e9a:	b128      	cbz	r0, 8008ea8 <__smakebuf_r+0x70>
 8008e9c:	89a3      	ldrh	r3, [r4, #12]
 8008e9e:	f023 0303 	bic.w	r3, r3, #3
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	89a3      	ldrh	r3, [r4, #12]
 8008eaa:	431d      	orrs	r5, r3
 8008eac:	81a5      	strh	r5, [r4, #12]
 8008eae:	e7cf      	b.n	8008e50 <__smakebuf_r+0x18>

08008eb0 <_putc_r>:
 8008eb0:	b570      	push	{r4, r5, r6, lr}
 8008eb2:	460d      	mov	r5, r1
 8008eb4:	4614      	mov	r4, r2
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	b118      	cbz	r0, 8008ec2 <_putc_r+0x12>
 8008eba:	6a03      	ldr	r3, [r0, #32]
 8008ebc:	b90b      	cbnz	r3, 8008ec2 <_putc_r+0x12>
 8008ebe:	f7fc fec1 	bl	8005c44 <__sinit>
 8008ec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ec4:	07d8      	lsls	r0, r3, #31
 8008ec6:	d405      	bmi.n	8008ed4 <_putc_r+0x24>
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	0599      	lsls	r1, r3, #22
 8008ecc:	d402      	bmi.n	8008ed4 <_putc_r+0x24>
 8008ece:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ed0:	f7fd f96f 	bl	80061b2 <__retarget_lock_acquire_recursive>
 8008ed4:	68a3      	ldr	r3, [r4, #8]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	60a3      	str	r3, [r4, #8]
 8008edc:	da05      	bge.n	8008eea <_putc_r+0x3a>
 8008ede:	69a2      	ldr	r2, [r4, #24]
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	db12      	blt.n	8008f0a <_putc_r+0x5a>
 8008ee4:	b2eb      	uxtb	r3, r5
 8008ee6:	2b0a      	cmp	r3, #10
 8008ee8:	d00f      	beq.n	8008f0a <_putc_r+0x5a>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	6022      	str	r2, [r4, #0]
 8008ef0:	701d      	strb	r5, [r3, #0]
 8008ef2:	b2ed      	uxtb	r5, r5
 8008ef4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ef6:	07da      	lsls	r2, r3, #31
 8008ef8:	d405      	bmi.n	8008f06 <_putc_r+0x56>
 8008efa:	89a3      	ldrh	r3, [r4, #12]
 8008efc:	059b      	lsls	r3, r3, #22
 8008efe:	d402      	bmi.n	8008f06 <_putc_r+0x56>
 8008f00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f02:	f7fd f957 	bl	80061b4 <__retarget_lock_release_recursive>
 8008f06:	4628      	mov	r0, r5
 8008f08:	bd70      	pop	{r4, r5, r6, pc}
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4622      	mov	r2, r4
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f7fc ffab 	bl	8005e6a <__swbuf_r>
 8008f14:	4605      	mov	r5, r0
 8008f16:	e7ed      	b.n	8008ef4 <_putc_r+0x44>

08008f18 <memmove>:
 8008f18:	4288      	cmp	r0, r1
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	eb01 0402 	add.w	r4, r1, r2
 8008f20:	d902      	bls.n	8008f28 <memmove+0x10>
 8008f22:	4284      	cmp	r4, r0
 8008f24:	4623      	mov	r3, r4
 8008f26:	d807      	bhi.n	8008f38 <memmove+0x20>
 8008f28:	1e43      	subs	r3, r0, #1
 8008f2a:	42a1      	cmp	r1, r4
 8008f2c:	d008      	beq.n	8008f40 <memmove+0x28>
 8008f2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f36:	e7f8      	b.n	8008f2a <memmove+0x12>
 8008f38:	4402      	add	r2, r0
 8008f3a:	4601      	mov	r1, r0
 8008f3c:	428a      	cmp	r2, r1
 8008f3e:	d100      	bne.n	8008f42 <memmove+0x2a>
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f4a:	e7f7      	b.n	8008f3c <memmove+0x24>

08008f4c <_fstat_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d07      	ldr	r5, [pc, #28]	@ (8008f6c <_fstat_r+0x20>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	602b      	str	r3, [r5, #0]
 8008f5a:	f7f9 f94d 	bl	80021f8 <_fstat>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d102      	bne.n	8008f68 <_fstat_r+0x1c>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	b103      	cbz	r3, 8008f68 <_fstat_r+0x1c>
 8008f66:	6023      	str	r3, [r4, #0]
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000d08 	.word	0x20000d08

08008f70 <_isatty_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	@ (8008f8c <_isatty_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7f9 f94c 	bl	8002218 <_isatty>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_isatty_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_isatty_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20000d08 	.word	0x20000d08

08008f90 <_sbrk_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	4d06      	ldr	r5, [pc, #24]	@ (8008fac <_sbrk_r+0x1c>)
 8008f94:	2300      	movs	r3, #0
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	f7f9 f954 	bl	8002248 <_sbrk>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d102      	bne.n	8008faa <_sbrk_r+0x1a>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b103      	cbz	r3, 8008faa <_sbrk_r+0x1a>
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	20000d08 	.word	0x20000d08

08008fb0 <nan>:
 8008fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008fb8 <nan+0x8>
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	00000000 	.word	0x00000000
 8008fbc:	7ff80000 	.word	0x7ff80000

08008fc0 <abort>:
 8008fc0:	b508      	push	{r3, lr}
 8008fc2:	2006      	movs	r0, #6
 8008fc4:	f000 fbc4 	bl	8009750 <raise>
 8008fc8:	2001      	movs	r0, #1
 8008fca:	f7f9 f8c5 	bl	8002158 <_exit>

08008fce <_calloc_r>:
 8008fce:	b570      	push	{r4, r5, r6, lr}
 8008fd0:	fba1 5402 	umull	r5, r4, r1, r2
 8008fd4:	b934      	cbnz	r4, 8008fe4 <_calloc_r+0x16>
 8008fd6:	4629      	mov	r1, r5
 8008fd8:	f7fd fff6 	bl	8006fc8 <_malloc_r>
 8008fdc:	4606      	mov	r6, r0
 8008fde:	b928      	cbnz	r0, 8008fec <_calloc_r+0x1e>
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}
 8008fe4:	220c      	movs	r2, #12
 8008fe6:	6002      	str	r2, [r0, #0]
 8008fe8:	2600      	movs	r6, #0
 8008fea:	e7f9      	b.n	8008fe0 <_calloc_r+0x12>
 8008fec:	462a      	mov	r2, r5
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f7fc ffd0 	bl	8005f94 <memset>
 8008ff4:	e7f4      	b.n	8008fe0 <_calloc_r+0x12>

08008ff6 <rshift>:
 8008ff6:	6903      	ldr	r3, [r0, #16]
 8008ff8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009000:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009004:	f100 0414 	add.w	r4, r0, #20
 8009008:	dd45      	ble.n	8009096 <rshift+0xa0>
 800900a:	f011 011f 	ands.w	r1, r1, #31
 800900e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009012:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009016:	d10c      	bne.n	8009032 <rshift+0x3c>
 8009018:	f100 0710 	add.w	r7, r0, #16
 800901c:	4629      	mov	r1, r5
 800901e:	42b1      	cmp	r1, r6
 8009020:	d334      	bcc.n	800908c <rshift+0x96>
 8009022:	1a9b      	subs	r3, r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	1eea      	subs	r2, r5, #3
 8009028:	4296      	cmp	r6, r2
 800902a:	bf38      	it	cc
 800902c:	2300      	movcc	r3, #0
 800902e:	4423      	add	r3, r4
 8009030:	e015      	b.n	800905e <rshift+0x68>
 8009032:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009036:	f1c1 0820 	rsb	r8, r1, #32
 800903a:	40cf      	lsrs	r7, r1
 800903c:	f105 0e04 	add.w	lr, r5, #4
 8009040:	46a1      	mov	r9, r4
 8009042:	4576      	cmp	r6, lr
 8009044:	46f4      	mov	ip, lr
 8009046:	d815      	bhi.n	8009074 <rshift+0x7e>
 8009048:	1a9a      	subs	r2, r3, r2
 800904a:	0092      	lsls	r2, r2, #2
 800904c:	3a04      	subs	r2, #4
 800904e:	3501      	adds	r5, #1
 8009050:	42ae      	cmp	r6, r5
 8009052:	bf38      	it	cc
 8009054:	2200      	movcc	r2, #0
 8009056:	18a3      	adds	r3, r4, r2
 8009058:	50a7      	str	r7, [r4, r2]
 800905a:	b107      	cbz	r7, 800905e <rshift+0x68>
 800905c:	3304      	adds	r3, #4
 800905e:	1b1a      	subs	r2, r3, r4
 8009060:	42a3      	cmp	r3, r4
 8009062:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009066:	bf08      	it	eq
 8009068:	2300      	moveq	r3, #0
 800906a:	6102      	str	r2, [r0, #16]
 800906c:	bf08      	it	eq
 800906e:	6143      	streq	r3, [r0, #20]
 8009070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009074:	f8dc c000 	ldr.w	ip, [ip]
 8009078:	fa0c fc08 	lsl.w	ip, ip, r8
 800907c:	ea4c 0707 	orr.w	r7, ip, r7
 8009080:	f849 7b04 	str.w	r7, [r9], #4
 8009084:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009088:	40cf      	lsrs	r7, r1
 800908a:	e7da      	b.n	8009042 <rshift+0x4c>
 800908c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009090:	f847 cf04 	str.w	ip, [r7, #4]!
 8009094:	e7c3      	b.n	800901e <rshift+0x28>
 8009096:	4623      	mov	r3, r4
 8009098:	e7e1      	b.n	800905e <rshift+0x68>

0800909a <__hexdig_fun>:
 800909a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800909e:	2b09      	cmp	r3, #9
 80090a0:	d802      	bhi.n	80090a8 <__hexdig_fun+0xe>
 80090a2:	3820      	subs	r0, #32
 80090a4:	b2c0      	uxtb	r0, r0
 80090a6:	4770      	bx	lr
 80090a8:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80090ac:	2b05      	cmp	r3, #5
 80090ae:	d801      	bhi.n	80090b4 <__hexdig_fun+0x1a>
 80090b0:	3847      	subs	r0, #71	@ 0x47
 80090b2:	e7f7      	b.n	80090a4 <__hexdig_fun+0xa>
 80090b4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80090b8:	2b05      	cmp	r3, #5
 80090ba:	d801      	bhi.n	80090c0 <__hexdig_fun+0x26>
 80090bc:	3827      	subs	r0, #39	@ 0x27
 80090be:	e7f1      	b.n	80090a4 <__hexdig_fun+0xa>
 80090c0:	2000      	movs	r0, #0
 80090c2:	4770      	bx	lr

080090c4 <__gethex>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	b085      	sub	sp, #20
 80090ca:	468a      	mov	sl, r1
 80090cc:	9302      	str	r3, [sp, #8]
 80090ce:	680b      	ldr	r3, [r1, #0]
 80090d0:	9001      	str	r0, [sp, #4]
 80090d2:	4690      	mov	r8, r2
 80090d4:	1c9c      	adds	r4, r3, #2
 80090d6:	46a1      	mov	r9, r4
 80090d8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80090dc:	2830      	cmp	r0, #48	@ 0x30
 80090de:	d0fa      	beq.n	80090d6 <__gethex+0x12>
 80090e0:	eba9 0303 	sub.w	r3, r9, r3
 80090e4:	f1a3 0b02 	sub.w	fp, r3, #2
 80090e8:	f7ff ffd7 	bl	800909a <__hexdig_fun>
 80090ec:	4605      	mov	r5, r0
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d168      	bne.n	80091c4 <__gethex+0x100>
 80090f2:	49a0      	ldr	r1, [pc, #640]	@ (8009374 <__gethex+0x2b0>)
 80090f4:	2201      	movs	r2, #1
 80090f6:	4648      	mov	r0, r9
 80090f8:	f7fc ff61 	bl	8005fbe <strncmp>
 80090fc:	4607      	mov	r7, r0
 80090fe:	2800      	cmp	r0, #0
 8009100:	d167      	bne.n	80091d2 <__gethex+0x10e>
 8009102:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009106:	4626      	mov	r6, r4
 8009108:	f7ff ffc7 	bl	800909a <__hexdig_fun>
 800910c:	2800      	cmp	r0, #0
 800910e:	d062      	beq.n	80091d6 <__gethex+0x112>
 8009110:	4623      	mov	r3, r4
 8009112:	7818      	ldrb	r0, [r3, #0]
 8009114:	2830      	cmp	r0, #48	@ 0x30
 8009116:	4699      	mov	r9, r3
 8009118:	f103 0301 	add.w	r3, r3, #1
 800911c:	d0f9      	beq.n	8009112 <__gethex+0x4e>
 800911e:	f7ff ffbc 	bl	800909a <__hexdig_fun>
 8009122:	fab0 f580 	clz	r5, r0
 8009126:	096d      	lsrs	r5, r5, #5
 8009128:	f04f 0b01 	mov.w	fp, #1
 800912c:	464a      	mov	r2, r9
 800912e:	4616      	mov	r6, r2
 8009130:	3201      	adds	r2, #1
 8009132:	7830      	ldrb	r0, [r6, #0]
 8009134:	f7ff ffb1 	bl	800909a <__hexdig_fun>
 8009138:	2800      	cmp	r0, #0
 800913a:	d1f8      	bne.n	800912e <__gethex+0x6a>
 800913c:	498d      	ldr	r1, [pc, #564]	@ (8009374 <__gethex+0x2b0>)
 800913e:	2201      	movs	r2, #1
 8009140:	4630      	mov	r0, r6
 8009142:	f7fc ff3c 	bl	8005fbe <strncmp>
 8009146:	2800      	cmp	r0, #0
 8009148:	d13f      	bne.n	80091ca <__gethex+0x106>
 800914a:	b944      	cbnz	r4, 800915e <__gethex+0x9a>
 800914c:	1c74      	adds	r4, r6, #1
 800914e:	4622      	mov	r2, r4
 8009150:	4616      	mov	r6, r2
 8009152:	3201      	adds	r2, #1
 8009154:	7830      	ldrb	r0, [r6, #0]
 8009156:	f7ff ffa0 	bl	800909a <__hexdig_fun>
 800915a:	2800      	cmp	r0, #0
 800915c:	d1f8      	bne.n	8009150 <__gethex+0x8c>
 800915e:	1ba4      	subs	r4, r4, r6
 8009160:	00a7      	lsls	r7, r4, #2
 8009162:	7833      	ldrb	r3, [r6, #0]
 8009164:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009168:	2b50      	cmp	r3, #80	@ 0x50
 800916a:	d13e      	bne.n	80091ea <__gethex+0x126>
 800916c:	7873      	ldrb	r3, [r6, #1]
 800916e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009170:	d033      	beq.n	80091da <__gethex+0x116>
 8009172:	2b2d      	cmp	r3, #45	@ 0x2d
 8009174:	d034      	beq.n	80091e0 <__gethex+0x11c>
 8009176:	1c71      	adds	r1, r6, #1
 8009178:	2400      	movs	r4, #0
 800917a:	7808      	ldrb	r0, [r1, #0]
 800917c:	f7ff ff8d 	bl	800909a <__hexdig_fun>
 8009180:	1e43      	subs	r3, r0, #1
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b18      	cmp	r3, #24
 8009186:	d830      	bhi.n	80091ea <__gethex+0x126>
 8009188:	f1a0 0210 	sub.w	r2, r0, #16
 800918c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009190:	f7ff ff83 	bl	800909a <__hexdig_fun>
 8009194:	f100 3cff 	add.w	ip, r0, #4294967295
 8009198:	fa5f fc8c 	uxtb.w	ip, ip
 800919c:	f1bc 0f18 	cmp.w	ip, #24
 80091a0:	f04f 030a 	mov.w	r3, #10
 80091a4:	d91e      	bls.n	80091e4 <__gethex+0x120>
 80091a6:	b104      	cbz	r4, 80091aa <__gethex+0xe6>
 80091a8:	4252      	negs	r2, r2
 80091aa:	4417      	add	r7, r2
 80091ac:	f8ca 1000 	str.w	r1, [sl]
 80091b0:	b1ed      	cbz	r5, 80091ee <__gethex+0x12a>
 80091b2:	f1bb 0f00 	cmp.w	fp, #0
 80091b6:	bf0c      	ite	eq
 80091b8:	2506      	moveq	r5, #6
 80091ba:	2500      	movne	r5, #0
 80091bc:	4628      	mov	r0, r5
 80091be:	b005      	add	sp, #20
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	2500      	movs	r5, #0
 80091c6:	462c      	mov	r4, r5
 80091c8:	e7b0      	b.n	800912c <__gethex+0x68>
 80091ca:	2c00      	cmp	r4, #0
 80091cc:	d1c7      	bne.n	800915e <__gethex+0x9a>
 80091ce:	4627      	mov	r7, r4
 80091d0:	e7c7      	b.n	8009162 <__gethex+0x9e>
 80091d2:	464e      	mov	r6, r9
 80091d4:	462f      	mov	r7, r5
 80091d6:	2501      	movs	r5, #1
 80091d8:	e7c3      	b.n	8009162 <__gethex+0x9e>
 80091da:	2400      	movs	r4, #0
 80091dc:	1cb1      	adds	r1, r6, #2
 80091de:	e7cc      	b.n	800917a <__gethex+0xb6>
 80091e0:	2401      	movs	r4, #1
 80091e2:	e7fb      	b.n	80091dc <__gethex+0x118>
 80091e4:	fb03 0002 	mla	r0, r3, r2, r0
 80091e8:	e7ce      	b.n	8009188 <__gethex+0xc4>
 80091ea:	4631      	mov	r1, r6
 80091ec:	e7de      	b.n	80091ac <__gethex+0xe8>
 80091ee:	eba6 0309 	sub.w	r3, r6, r9
 80091f2:	3b01      	subs	r3, #1
 80091f4:	4629      	mov	r1, r5
 80091f6:	2b07      	cmp	r3, #7
 80091f8:	dc0a      	bgt.n	8009210 <__gethex+0x14c>
 80091fa:	9801      	ldr	r0, [sp, #4]
 80091fc:	f7fd ff70 	bl	80070e0 <_Balloc>
 8009200:	4604      	mov	r4, r0
 8009202:	b940      	cbnz	r0, 8009216 <__gethex+0x152>
 8009204:	4b5c      	ldr	r3, [pc, #368]	@ (8009378 <__gethex+0x2b4>)
 8009206:	4602      	mov	r2, r0
 8009208:	21e4      	movs	r1, #228	@ 0xe4
 800920a:	485c      	ldr	r0, [pc, #368]	@ (800937c <__gethex+0x2b8>)
 800920c:	f7fc fff0 	bl	80061f0 <__assert_func>
 8009210:	3101      	adds	r1, #1
 8009212:	105b      	asrs	r3, r3, #1
 8009214:	e7ef      	b.n	80091f6 <__gethex+0x132>
 8009216:	f100 0a14 	add.w	sl, r0, #20
 800921a:	2300      	movs	r3, #0
 800921c:	4655      	mov	r5, sl
 800921e:	469b      	mov	fp, r3
 8009220:	45b1      	cmp	r9, r6
 8009222:	d337      	bcc.n	8009294 <__gethex+0x1d0>
 8009224:	f845 bb04 	str.w	fp, [r5], #4
 8009228:	eba5 050a 	sub.w	r5, r5, sl
 800922c:	10ad      	asrs	r5, r5, #2
 800922e:	6125      	str	r5, [r4, #16]
 8009230:	4658      	mov	r0, fp
 8009232:	f7fe f847 	bl	80072c4 <__hi0bits>
 8009236:	016d      	lsls	r5, r5, #5
 8009238:	f8d8 6000 	ldr.w	r6, [r8]
 800923c:	1a2d      	subs	r5, r5, r0
 800923e:	42b5      	cmp	r5, r6
 8009240:	dd54      	ble.n	80092ec <__gethex+0x228>
 8009242:	1bad      	subs	r5, r5, r6
 8009244:	4629      	mov	r1, r5
 8009246:	4620      	mov	r0, r4
 8009248:	f7fe fbd3 	bl	80079f2 <__any_on>
 800924c:	4681      	mov	r9, r0
 800924e:	b178      	cbz	r0, 8009270 <__gethex+0x1ac>
 8009250:	1e6b      	subs	r3, r5, #1
 8009252:	1159      	asrs	r1, r3, #5
 8009254:	f003 021f 	and.w	r2, r3, #31
 8009258:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800925c:	f04f 0901 	mov.w	r9, #1
 8009260:	fa09 f202 	lsl.w	r2, r9, r2
 8009264:	420a      	tst	r2, r1
 8009266:	d003      	beq.n	8009270 <__gethex+0x1ac>
 8009268:	454b      	cmp	r3, r9
 800926a:	dc36      	bgt.n	80092da <__gethex+0x216>
 800926c:	f04f 0902 	mov.w	r9, #2
 8009270:	4629      	mov	r1, r5
 8009272:	4620      	mov	r0, r4
 8009274:	f7ff febf 	bl	8008ff6 <rshift>
 8009278:	442f      	add	r7, r5
 800927a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800927e:	42bb      	cmp	r3, r7
 8009280:	da42      	bge.n	8009308 <__gethex+0x244>
 8009282:	9801      	ldr	r0, [sp, #4]
 8009284:	4621      	mov	r1, r4
 8009286:	f7fd ff6b 	bl	8007160 <_Bfree>
 800928a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800928c:	2300      	movs	r3, #0
 800928e:	6013      	str	r3, [r2, #0]
 8009290:	25a3      	movs	r5, #163	@ 0xa3
 8009292:	e793      	b.n	80091bc <__gethex+0xf8>
 8009294:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009298:	2a2e      	cmp	r2, #46	@ 0x2e
 800929a:	d012      	beq.n	80092c2 <__gethex+0x1fe>
 800929c:	2b20      	cmp	r3, #32
 800929e:	d104      	bne.n	80092aa <__gethex+0x1e6>
 80092a0:	f845 bb04 	str.w	fp, [r5], #4
 80092a4:	f04f 0b00 	mov.w	fp, #0
 80092a8:	465b      	mov	r3, fp
 80092aa:	7830      	ldrb	r0, [r6, #0]
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	f7ff fef4 	bl	800909a <__hexdig_fun>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	f000 000f 	and.w	r0, r0, #15
 80092b8:	4098      	lsls	r0, r3
 80092ba:	ea4b 0b00 	orr.w	fp, fp, r0
 80092be:	3304      	adds	r3, #4
 80092c0:	e7ae      	b.n	8009220 <__gethex+0x15c>
 80092c2:	45b1      	cmp	r9, r6
 80092c4:	d8ea      	bhi.n	800929c <__gethex+0x1d8>
 80092c6:	492b      	ldr	r1, [pc, #172]	@ (8009374 <__gethex+0x2b0>)
 80092c8:	9303      	str	r3, [sp, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7fc fe76 	bl	8005fbe <strncmp>
 80092d2:	9b03      	ldr	r3, [sp, #12]
 80092d4:	2800      	cmp	r0, #0
 80092d6:	d1e1      	bne.n	800929c <__gethex+0x1d8>
 80092d8:	e7a2      	b.n	8009220 <__gethex+0x15c>
 80092da:	1ea9      	subs	r1, r5, #2
 80092dc:	4620      	mov	r0, r4
 80092de:	f7fe fb88 	bl	80079f2 <__any_on>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d0c2      	beq.n	800926c <__gethex+0x1a8>
 80092e6:	f04f 0903 	mov.w	r9, #3
 80092ea:	e7c1      	b.n	8009270 <__gethex+0x1ac>
 80092ec:	da09      	bge.n	8009302 <__gethex+0x23e>
 80092ee:	1b75      	subs	r5, r6, r5
 80092f0:	4621      	mov	r1, r4
 80092f2:	9801      	ldr	r0, [sp, #4]
 80092f4:	462a      	mov	r2, r5
 80092f6:	f7fe f943 	bl	8007580 <__lshift>
 80092fa:	1b7f      	subs	r7, r7, r5
 80092fc:	4604      	mov	r4, r0
 80092fe:	f100 0a14 	add.w	sl, r0, #20
 8009302:	f04f 0900 	mov.w	r9, #0
 8009306:	e7b8      	b.n	800927a <__gethex+0x1b6>
 8009308:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800930c:	42bd      	cmp	r5, r7
 800930e:	dd6f      	ble.n	80093f0 <__gethex+0x32c>
 8009310:	1bed      	subs	r5, r5, r7
 8009312:	42ae      	cmp	r6, r5
 8009314:	dc34      	bgt.n	8009380 <__gethex+0x2bc>
 8009316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d022      	beq.n	8009364 <__gethex+0x2a0>
 800931e:	2b03      	cmp	r3, #3
 8009320:	d024      	beq.n	800936c <__gethex+0x2a8>
 8009322:	2b01      	cmp	r3, #1
 8009324:	d115      	bne.n	8009352 <__gethex+0x28e>
 8009326:	42ae      	cmp	r6, r5
 8009328:	d113      	bne.n	8009352 <__gethex+0x28e>
 800932a:	2e01      	cmp	r6, #1
 800932c:	d10b      	bne.n	8009346 <__gethex+0x282>
 800932e:	9a02      	ldr	r2, [sp, #8]
 8009330:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	2301      	movs	r3, #1
 8009338:	6123      	str	r3, [r4, #16]
 800933a:	f8ca 3000 	str.w	r3, [sl]
 800933e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009340:	2562      	movs	r5, #98	@ 0x62
 8009342:	601c      	str	r4, [r3, #0]
 8009344:	e73a      	b.n	80091bc <__gethex+0xf8>
 8009346:	1e71      	subs	r1, r6, #1
 8009348:	4620      	mov	r0, r4
 800934a:	f7fe fb52 	bl	80079f2 <__any_on>
 800934e:	2800      	cmp	r0, #0
 8009350:	d1ed      	bne.n	800932e <__gethex+0x26a>
 8009352:	9801      	ldr	r0, [sp, #4]
 8009354:	4621      	mov	r1, r4
 8009356:	f7fd ff03 	bl	8007160 <_Bfree>
 800935a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800935c:	2300      	movs	r3, #0
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	2550      	movs	r5, #80	@ 0x50
 8009362:	e72b      	b.n	80091bc <__gethex+0xf8>
 8009364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f3      	bne.n	8009352 <__gethex+0x28e>
 800936a:	e7e0      	b.n	800932e <__gethex+0x26a>
 800936c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1dd      	bne.n	800932e <__gethex+0x26a>
 8009372:	e7ee      	b.n	8009352 <__gethex+0x28e>
 8009374:	08009ce1 	.word	0x08009ce1
 8009378:	08009c77 	.word	0x08009c77
 800937c:	08009cfc 	.word	0x08009cfc
 8009380:	1e6f      	subs	r7, r5, #1
 8009382:	f1b9 0f00 	cmp.w	r9, #0
 8009386:	d130      	bne.n	80093ea <__gethex+0x326>
 8009388:	b127      	cbz	r7, 8009394 <__gethex+0x2d0>
 800938a:	4639      	mov	r1, r7
 800938c:	4620      	mov	r0, r4
 800938e:	f7fe fb30 	bl	80079f2 <__any_on>
 8009392:	4681      	mov	r9, r0
 8009394:	117a      	asrs	r2, r7, #5
 8009396:	2301      	movs	r3, #1
 8009398:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800939c:	f007 071f 	and.w	r7, r7, #31
 80093a0:	40bb      	lsls	r3, r7
 80093a2:	4213      	tst	r3, r2
 80093a4:	4629      	mov	r1, r5
 80093a6:	4620      	mov	r0, r4
 80093a8:	bf18      	it	ne
 80093aa:	f049 0902 	orrne.w	r9, r9, #2
 80093ae:	f7ff fe22 	bl	8008ff6 <rshift>
 80093b2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80093b6:	1b76      	subs	r6, r6, r5
 80093b8:	2502      	movs	r5, #2
 80093ba:	f1b9 0f00 	cmp.w	r9, #0
 80093be:	d047      	beq.n	8009450 <__gethex+0x38c>
 80093c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d015      	beq.n	80093f4 <__gethex+0x330>
 80093c8:	2b03      	cmp	r3, #3
 80093ca:	d017      	beq.n	80093fc <__gethex+0x338>
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d109      	bne.n	80093e4 <__gethex+0x320>
 80093d0:	f019 0f02 	tst.w	r9, #2
 80093d4:	d006      	beq.n	80093e4 <__gethex+0x320>
 80093d6:	f8da 3000 	ldr.w	r3, [sl]
 80093da:	ea49 0903 	orr.w	r9, r9, r3
 80093de:	f019 0f01 	tst.w	r9, #1
 80093e2:	d10e      	bne.n	8009402 <__gethex+0x33e>
 80093e4:	f045 0510 	orr.w	r5, r5, #16
 80093e8:	e032      	b.n	8009450 <__gethex+0x38c>
 80093ea:	f04f 0901 	mov.w	r9, #1
 80093ee:	e7d1      	b.n	8009394 <__gethex+0x2d0>
 80093f0:	2501      	movs	r5, #1
 80093f2:	e7e2      	b.n	80093ba <__gethex+0x2f6>
 80093f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093f6:	f1c3 0301 	rsb	r3, r3, #1
 80093fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0f0      	beq.n	80093e4 <__gethex+0x320>
 8009402:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009406:	f104 0314 	add.w	r3, r4, #20
 800940a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800940e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009412:	f04f 0c00 	mov.w	ip, #0
 8009416:	4618      	mov	r0, r3
 8009418:	f853 2b04 	ldr.w	r2, [r3], #4
 800941c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009420:	d01b      	beq.n	800945a <__gethex+0x396>
 8009422:	3201      	adds	r2, #1
 8009424:	6002      	str	r2, [r0, #0]
 8009426:	2d02      	cmp	r5, #2
 8009428:	f104 0314 	add.w	r3, r4, #20
 800942c:	d13c      	bne.n	80094a8 <__gethex+0x3e4>
 800942e:	f8d8 2000 	ldr.w	r2, [r8]
 8009432:	3a01      	subs	r2, #1
 8009434:	42b2      	cmp	r2, r6
 8009436:	d109      	bne.n	800944c <__gethex+0x388>
 8009438:	1171      	asrs	r1, r6, #5
 800943a:	2201      	movs	r2, #1
 800943c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009440:	f006 061f 	and.w	r6, r6, #31
 8009444:	fa02 f606 	lsl.w	r6, r2, r6
 8009448:	421e      	tst	r6, r3
 800944a:	d13a      	bne.n	80094c2 <__gethex+0x3fe>
 800944c:	f045 0520 	orr.w	r5, r5, #32
 8009450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009452:	601c      	str	r4, [r3, #0]
 8009454:	9b02      	ldr	r3, [sp, #8]
 8009456:	601f      	str	r7, [r3, #0]
 8009458:	e6b0      	b.n	80091bc <__gethex+0xf8>
 800945a:	4299      	cmp	r1, r3
 800945c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009460:	d8d9      	bhi.n	8009416 <__gethex+0x352>
 8009462:	68a3      	ldr	r3, [r4, #8]
 8009464:	459b      	cmp	fp, r3
 8009466:	db17      	blt.n	8009498 <__gethex+0x3d4>
 8009468:	6861      	ldr	r1, [r4, #4]
 800946a:	9801      	ldr	r0, [sp, #4]
 800946c:	3101      	adds	r1, #1
 800946e:	f7fd fe37 	bl	80070e0 <_Balloc>
 8009472:	4681      	mov	r9, r0
 8009474:	b918      	cbnz	r0, 800947e <__gethex+0x3ba>
 8009476:	4b1a      	ldr	r3, [pc, #104]	@ (80094e0 <__gethex+0x41c>)
 8009478:	4602      	mov	r2, r0
 800947a:	2184      	movs	r1, #132	@ 0x84
 800947c:	e6c5      	b.n	800920a <__gethex+0x146>
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	3202      	adds	r2, #2
 8009482:	f104 010c 	add.w	r1, r4, #12
 8009486:	0092      	lsls	r2, r2, #2
 8009488:	300c      	adds	r0, #12
 800948a:	f7fc fe9c 	bl	80061c6 <memcpy>
 800948e:	4621      	mov	r1, r4
 8009490:	9801      	ldr	r0, [sp, #4]
 8009492:	f7fd fe65 	bl	8007160 <_Bfree>
 8009496:	464c      	mov	r4, r9
 8009498:	6923      	ldr	r3, [r4, #16]
 800949a:	1c5a      	adds	r2, r3, #1
 800949c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094a0:	6122      	str	r2, [r4, #16]
 80094a2:	2201      	movs	r2, #1
 80094a4:	615a      	str	r2, [r3, #20]
 80094a6:	e7be      	b.n	8009426 <__gethex+0x362>
 80094a8:	6922      	ldr	r2, [r4, #16]
 80094aa:	455a      	cmp	r2, fp
 80094ac:	dd0b      	ble.n	80094c6 <__gethex+0x402>
 80094ae:	2101      	movs	r1, #1
 80094b0:	4620      	mov	r0, r4
 80094b2:	f7ff fda0 	bl	8008ff6 <rshift>
 80094b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094ba:	3701      	adds	r7, #1
 80094bc:	42bb      	cmp	r3, r7
 80094be:	f6ff aee0 	blt.w	8009282 <__gethex+0x1be>
 80094c2:	2501      	movs	r5, #1
 80094c4:	e7c2      	b.n	800944c <__gethex+0x388>
 80094c6:	f016 061f 	ands.w	r6, r6, #31
 80094ca:	d0fa      	beq.n	80094c2 <__gethex+0x3fe>
 80094cc:	4453      	add	r3, sl
 80094ce:	f1c6 0620 	rsb	r6, r6, #32
 80094d2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80094d6:	f7fd fef5 	bl	80072c4 <__hi0bits>
 80094da:	42b0      	cmp	r0, r6
 80094dc:	dbe7      	blt.n	80094ae <__gethex+0x3ea>
 80094de:	e7f0      	b.n	80094c2 <__gethex+0x3fe>
 80094e0:	08009c77 	.word	0x08009c77

080094e4 <L_shift>:
 80094e4:	f1c2 0208 	rsb	r2, r2, #8
 80094e8:	0092      	lsls	r2, r2, #2
 80094ea:	b570      	push	{r4, r5, r6, lr}
 80094ec:	f1c2 0620 	rsb	r6, r2, #32
 80094f0:	6843      	ldr	r3, [r0, #4]
 80094f2:	6804      	ldr	r4, [r0, #0]
 80094f4:	fa03 f506 	lsl.w	r5, r3, r6
 80094f8:	432c      	orrs	r4, r5
 80094fa:	40d3      	lsrs	r3, r2
 80094fc:	6004      	str	r4, [r0, #0]
 80094fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8009502:	4288      	cmp	r0, r1
 8009504:	d3f4      	bcc.n	80094f0 <L_shift+0xc>
 8009506:	bd70      	pop	{r4, r5, r6, pc}

08009508 <__match>:
 8009508:	b530      	push	{r4, r5, lr}
 800950a:	6803      	ldr	r3, [r0, #0]
 800950c:	3301      	adds	r3, #1
 800950e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009512:	b914      	cbnz	r4, 800951a <__match+0x12>
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	2001      	movs	r0, #1
 8009518:	bd30      	pop	{r4, r5, pc}
 800951a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800951e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009522:	2d19      	cmp	r5, #25
 8009524:	bf98      	it	ls
 8009526:	3220      	addls	r2, #32
 8009528:	42a2      	cmp	r2, r4
 800952a:	d0f0      	beq.n	800950e <__match+0x6>
 800952c:	2000      	movs	r0, #0
 800952e:	e7f3      	b.n	8009518 <__match+0x10>

08009530 <__hexnan>:
 8009530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009534:	680b      	ldr	r3, [r1, #0]
 8009536:	6801      	ldr	r1, [r0, #0]
 8009538:	115e      	asrs	r6, r3, #5
 800953a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800953e:	f013 031f 	ands.w	r3, r3, #31
 8009542:	b087      	sub	sp, #28
 8009544:	bf18      	it	ne
 8009546:	3604      	addne	r6, #4
 8009548:	2500      	movs	r5, #0
 800954a:	1f37      	subs	r7, r6, #4
 800954c:	4682      	mov	sl, r0
 800954e:	4690      	mov	r8, r2
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	f846 5c04 	str.w	r5, [r6, #-4]
 8009556:	46b9      	mov	r9, r7
 8009558:	463c      	mov	r4, r7
 800955a:	9502      	str	r5, [sp, #8]
 800955c:	46ab      	mov	fp, r5
 800955e:	784a      	ldrb	r2, [r1, #1]
 8009560:	1c4b      	adds	r3, r1, #1
 8009562:	9303      	str	r3, [sp, #12]
 8009564:	b342      	cbz	r2, 80095b8 <__hexnan+0x88>
 8009566:	4610      	mov	r0, r2
 8009568:	9105      	str	r1, [sp, #20]
 800956a:	9204      	str	r2, [sp, #16]
 800956c:	f7ff fd95 	bl	800909a <__hexdig_fun>
 8009570:	2800      	cmp	r0, #0
 8009572:	d151      	bne.n	8009618 <__hexnan+0xe8>
 8009574:	9a04      	ldr	r2, [sp, #16]
 8009576:	9905      	ldr	r1, [sp, #20]
 8009578:	2a20      	cmp	r2, #32
 800957a:	d818      	bhi.n	80095ae <__hexnan+0x7e>
 800957c:	9b02      	ldr	r3, [sp, #8]
 800957e:	459b      	cmp	fp, r3
 8009580:	dd13      	ble.n	80095aa <__hexnan+0x7a>
 8009582:	454c      	cmp	r4, r9
 8009584:	d206      	bcs.n	8009594 <__hexnan+0x64>
 8009586:	2d07      	cmp	r5, #7
 8009588:	dc04      	bgt.n	8009594 <__hexnan+0x64>
 800958a:	462a      	mov	r2, r5
 800958c:	4649      	mov	r1, r9
 800958e:	4620      	mov	r0, r4
 8009590:	f7ff ffa8 	bl	80094e4 <L_shift>
 8009594:	4544      	cmp	r4, r8
 8009596:	d952      	bls.n	800963e <__hexnan+0x10e>
 8009598:	2300      	movs	r3, #0
 800959a:	f1a4 0904 	sub.w	r9, r4, #4
 800959e:	f844 3c04 	str.w	r3, [r4, #-4]
 80095a2:	f8cd b008 	str.w	fp, [sp, #8]
 80095a6:	464c      	mov	r4, r9
 80095a8:	461d      	mov	r5, r3
 80095aa:	9903      	ldr	r1, [sp, #12]
 80095ac:	e7d7      	b.n	800955e <__hexnan+0x2e>
 80095ae:	2a29      	cmp	r2, #41	@ 0x29
 80095b0:	d157      	bne.n	8009662 <__hexnan+0x132>
 80095b2:	3102      	adds	r1, #2
 80095b4:	f8ca 1000 	str.w	r1, [sl]
 80095b8:	f1bb 0f00 	cmp.w	fp, #0
 80095bc:	d051      	beq.n	8009662 <__hexnan+0x132>
 80095be:	454c      	cmp	r4, r9
 80095c0:	d206      	bcs.n	80095d0 <__hexnan+0xa0>
 80095c2:	2d07      	cmp	r5, #7
 80095c4:	dc04      	bgt.n	80095d0 <__hexnan+0xa0>
 80095c6:	462a      	mov	r2, r5
 80095c8:	4649      	mov	r1, r9
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff ff8a 	bl	80094e4 <L_shift>
 80095d0:	4544      	cmp	r4, r8
 80095d2:	d936      	bls.n	8009642 <__hexnan+0x112>
 80095d4:	f1a8 0204 	sub.w	r2, r8, #4
 80095d8:	4623      	mov	r3, r4
 80095da:	f853 1b04 	ldr.w	r1, [r3], #4
 80095de:	f842 1f04 	str.w	r1, [r2, #4]!
 80095e2:	429f      	cmp	r7, r3
 80095e4:	d2f9      	bcs.n	80095da <__hexnan+0xaa>
 80095e6:	1b3b      	subs	r3, r7, r4
 80095e8:	f023 0303 	bic.w	r3, r3, #3
 80095ec:	3304      	adds	r3, #4
 80095ee:	3401      	adds	r4, #1
 80095f0:	3e03      	subs	r6, #3
 80095f2:	42b4      	cmp	r4, r6
 80095f4:	bf88      	it	hi
 80095f6:	2304      	movhi	r3, #4
 80095f8:	4443      	add	r3, r8
 80095fa:	2200      	movs	r2, #0
 80095fc:	f843 2b04 	str.w	r2, [r3], #4
 8009600:	429f      	cmp	r7, r3
 8009602:	d2fb      	bcs.n	80095fc <__hexnan+0xcc>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	b91b      	cbnz	r3, 8009610 <__hexnan+0xe0>
 8009608:	4547      	cmp	r7, r8
 800960a:	d128      	bne.n	800965e <__hexnan+0x12e>
 800960c:	2301      	movs	r3, #1
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	2005      	movs	r0, #5
 8009612:	b007      	add	sp, #28
 8009614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009618:	3501      	adds	r5, #1
 800961a:	2d08      	cmp	r5, #8
 800961c:	f10b 0b01 	add.w	fp, fp, #1
 8009620:	dd06      	ble.n	8009630 <__hexnan+0x100>
 8009622:	4544      	cmp	r4, r8
 8009624:	d9c1      	bls.n	80095aa <__hexnan+0x7a>
 8009626:	2300      	movs	r3, #0
 8009628:	f844 3c04 	str.w	r3, [r4, #-4]
 800962c:	2501      	movs	r5, #1
 800962e:	3c04      	subs	r4, #4
 8009630:	6822      	ldr	r2, [r4, #0]
 8009632:	f000 000f 	and.w	r0, r0, #15
 8009636:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800963a:	6020      	str	r0, [r4, #0]
 800963c:	e7b5      	b.n	80095aa <__hexnan+0x7a>
 800963e:	2508      	movs	r5, #8
 8009640:	e7b3      	b.n	80095aa <__hexnan+0x7a>
 8009642:	9b01      	ldr	r3, [sp, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d0dd      	beq.n	8009604 <__hexnan+0xd4>
 8009648:	f1c3 0320 	rsb	r3, r3, #32
 800964c:	f04f 32ff 	mov.w	r2, #4294967295
 8009650:	40da      	lsrs	r2, r3
 8009652:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009656:	4013      	ands	r3, r2
 8009658:	f846 3c04 	str.w	r3, [r6, #-4]
 800965c:	e7d2      	b.n	8009604 <__hexnan+0xd4>
 800965e:	3f04      	subs	r7, #4
 8009660:	e7d0      	b.n	8009604 <__hexnan+0xd4>
 8009662:	2004      	movs	r0, #4
 8009664:	e7d5      	b.n	8009612 <__hexnan+0xe2>

08009666 <__ascii_mbtowc>:
 8009666:	b082      	sub	sp, #8
 8009668:	b901      	cbnz	r1, 800966c <__ascii_mbtowc+0x6>
 800966a:	a901      	add	r1, sp, #4
 800966c:	b142      	cbz	r2, 8009680 <__ascii_mbtowc+0x1a>
 800966e:	b14b      	cbz	r3, 8009684 <__ascii_mbtowc+0x1e>
 8009670:	7813      	ldrb	r3, [r2, #0]
 8009672:	600b      	str	r3, [r1, #0]
 8009674:	7812      	ldrb	r2, [r2, #0]
 8009676:	1e10      	subs	r0, r2, #0
 8009678:	bf18      	it	ne
 800967a:	2001      	movne	r0, #1
 800967c:	b002      	add	sp, #8
 800967e:	4770      	bx	lr
 8009680:	4610      	mov	r0, r2
 8009682:	e7fb      	b.n	800967c <__ascii_mbtowc+0x16>
 8009684:	f06f 0001 	mvn.w	r0, #1
 8009688:	e7f8      	b.n	800967c <__ascii_mbtowc+0x16>

0800968a <_realloc_r>:
 800968a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968e:	4607      	mov	r7, r0
 8009690:	4614      	mov	r4, r2
 8009692:	460d      	mov	r5, r1
 8009694:	b921      	cbnz	r1, 80096a0 <_realloc_r+0x16>
 8009696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800969a:	4611      	mov	r1, r2
 800969c:	f7fd bc94 	b.w	8006fc8 <_malloc_r>
 80096a0:	b92a      	cbnz	r2, 80096ae <_realloc_r+0x24>
 80096a2:	f7fd fc1d 	bl	8006ee0 <_free_r>
 80096a6:	4625      	mov	r5, r4
 80096a8:	4628      	mov	r0, r5
 80096aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ae:	f000 f86b 	bl	8009788 <_malloc_usable_size_r>
 80096b2:	4284      	cmp	r4, r0
 80096b4:	4606      	mov	r6, r0
 80096b6:	d802      	bhi.n	80096be <_realloc_r+0x34>
 80096b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096bc:	d8f4      	bhi.n	80096a8 <_realloc_r+0x1e>
 80096be:	4621      	mov	r1, r4
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7fd fc81 	bl	8006fc8 <_malloc_r>
 80096c6:	4680      	mov	r8, r0
 80096c8:	b908      	cbnz	r0, 80096ce <_realloc_r+0x44>
 80096ca:	4645      	mov	r5, r8
 80096cc:	e7ec      	b.n	80096a8 <_realloc_r+0x1e>
 80096ce:	42b4      	cmp	r4, r6
 80096d0:	4622      	mov	r2, r4
 80096d2:	4629      	mov	r1, r5
 80096d4:	bf28      	it	cs
 80096d6:	4632      	movcs	r2, r6
 80096d8:	f7fc fd75 	bl	80061c6 <memcpy>
 80096dc:	4629      	mov	r1, r5
 80096de:	4638      	mov	r0, r7
 80096e0:	f7fd fbfe 	bl	8006ee0 <_free_r>
 80096e4:	e7f1      	b.n	80096ca <_realloc_r+0x40>

080096e6 <__ascii_wctomb>:
 80096e6:	4603      	mov	r3, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	b141      	cbz	r1, 80096fe <__ascii_wctomb+0x18>
 80096ec:	2aff      	cmp	r2, #255	@ 0xff
 80096ee:	d904      	bls.n	80096fa <__ascii_wctomb+0x14>
 80096f0:	228a      	movs	r2, #138	@ 0x8a
 80096f2:	601a      	str	r2, [r3, #0]
 80096f4:	f04f 30ff 	mov.w	r0, #4294967295
 80096f8:	4770      	bx	lr
 80096fa:	700a      	strb	r2, [r1, #0]
 80096fc:	2001      	movs	r0, #1
 80096fe:	4770      	bx	lr

08009700 <_raise_r>:
 8009700:	291f      	cmp	r1, #31
 8009702:	b538      	push	{r3, r4, r5, lr}
 8009704:	4605      	mov	r5, r0
 8009706:	460c      	mov	r4, r1
 8009708:	d904      	bls.n	8009714 <_raise_r+0x14>
 800970a:	2316      	movs	r3, #22
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	f04f 30ff 	mov.w	r0, #4294967295
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009716:	b112      	cbz	r2, 800971e <_raise_r+0x1e>
 8009718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800971c:	b94b      	cbnz	r3, 8009732 <_raise_r+0x32>
 800971e:	4628      	mov	r0, r5
 8009720:	f000 f830 	bl	8009784 <_getpid_r>
 8009724:	4622      	mov	r2, r4
 8009726:	4601      	mov	r1, r0
 8009728:	4628      	mov	r0, r5
 800972a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800972e:	f000 b817 	b.w	8009760 <_kill_r>
 8009732:	2b01      	cmp	r3, #1
 8009734:	d00a      	beq.n	800974c <_raise_r+0x4c>
 8009736:	1c59      	adds	r1, r3, #1
 8009738:	d103      	bne.n	8009742 <_raise_r+0x42>
 800973a:	2316      	movs	r3, #22
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	2001      	movs	r0, #1
 8009740:	e7e7      	b.n	8009712 <_raise_r+0x12>
 8009742:	2100      	movs	r1, #0
 8009744:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009748:	4620      	mov	r0, r4
 800974a:	4798      	blx	r3
 800974c:	2000      	movs	r0, #0
 800974e:	e7e0      	b.n	8009712 <_raise_r+0x12>

08009750 <raise>:
 8009750:	4b02      	ldr	r3, [pc, #8]	@ (800975c <raise+0xc>)
 8009752:	4601      	mov	r1, r0
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	f7ff bfd3 	b.w	8009700 <_raise_r>
 800975a:	bf00      	nop
 800975c:	2000001c 	.word	0x2000001c

08009760 <_kill_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	@ (8009780 <_kill_r+0x20>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	f7f8 fce3 	bl	8002138 <_kill>
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	d102      	bne.n	800977c <_kill_r+0x1c>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	b103      	cbz	r3, 800977c <_kill_r+0x1c>
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	20000d08 	.word	0x20000d08

08009784 <_getpid_r>:
 8009784:	f7f8 bcd0 	b.w	8002128 <_getpid>

08009788 <_malloc_usable_size_r>:
 8009788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800978c:	1f18      	subs	r0, r3, #4
 800978e:	2b00      	cmp	r3, #0
 8009790:	bfbc      	itt	lt
 8009792:	580b      	ldrlt	r3, [r1, r0]
 8009794:	18c0      	addlt	r0, r0, r3
 8009796:	4770      	bx	lr

08009798 <_init>:
 8009798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800979a:	bf00      	nop
 800979c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979e:	bc08      	pop	{r3}
 80097a0:	469e      	mov	lr, r3
 80097a2:	4770      	bx	lr

080097a4 <_fini>:
 80097a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a6:	bf00      	nop
 80097a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097aa:	bc08      	pop	{r3}
 80097ac:	469e      	mov	lr, r3
 80097ae:	4770      	bx	lr
